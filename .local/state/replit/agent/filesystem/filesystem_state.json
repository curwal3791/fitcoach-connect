{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FitFlow - Group Fitness Trainer Platform\n\n## Overview\n\nFitFlow is a comprehensive web application designed to empower group fitness trainers to create, organize, and deliver structured workout routines with seamless presentation capabilities. The platform provides tools for routine creation, exercise management, calendar scheduling, and professional presentation mode for conducting fitness classes.\n\nThe application serves as an all-in-one solution for fitness professionals to streamline their workflow from planning to execution, offering features like exercise databases, routine builders, calendar integration, and presentation tools for delivering engaging fitness classes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Desired User Workflow\n1. **Class-First Organization**: Users should be able to go to Classes page, select a class, then create routines within that class\n2. **Calendar Integration**: Users should be able to select dates/times on calendar and add new classes directly from there\n3. **Complete Flow**: Classes → Routines → Exercises → Calendar Scheduling\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development practices\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: RESTful API architecture with structured route organization\n- **Middleware**: Custom logging, error handling, and request processing middleware\n- **Development**: Hot module replacement and development tooling integration\n\n### Authentication System\n- **Provider**: Email/password authentication with JWT tokens and secure session management\n- **Security**: Bcrypt password hashing, JWT tokens, HTTP-only sessions, and PostgreSQL storage\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **User Management**: Professional registration/login system with form validation\n\n### Data Storage\n- **Database**: PostgreSQL as the primary database\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Migrations**: Drizzle Kit for database schema migrations and management\n- **Schema Design**: Relational design with proper foreign key relationships and indexing\n\n### Core Data Models\n- **Users**: Profile management with Replit Auth integration\n- **Class Types**: Categorization system for different workout styles\n- **Exercises**: Comprehensive exercise database with metadata (difficulty, category, equipment)\n- **Routines**: Structured workout plans with exercise sequences\n- **Calendar Events**: Scheduling system for fitness classes\n- **Routine Exercises**: Junction table for exercise ordering within routines\n- **Programs**: Multi-week training program templates with adaptive progression\n- **Program Sessions**: Individual training sessions within programs with progression rules\n- **Program Enrollments**: Client enrollments in programs with progress tracking\n- **Performance Records**: Exercise-specific performance data and RPE feedback\n- **Readiness Checks**: Daily client readiness assessments for program adaptation\n\n### Application Features\n- **Dashboard**: Analytics and quick access to recent activities ✓ COMPLETED\n- **Class Management**: CRUD operations for fitness class types (HIIT, Yoga, etc.) ✓ COMPLETED\n- **Exercise Management**: CRUD operations for exercise database with filtering and search ✓ COMPLETED\n- **Routine Builder**: Drag-and-drop interface for creating structured workout sequences ✓ COMPLETED\n- **Calendar Integration**: Enhanced scheduling with quick time slots, double-click dates, class-routine linking ✓ COMPLETED\n- **Presentation Mode**: Full-screen presentation interface for conducting classes ✓ COMPLETED\n- **Coach Console**: Event-aware live session management with real-time check-in, timers, and metrics ✓ COMPLETED\n- **Client Management**: Complete client profiles, progress tracking, and attendance system ✓ COMPLETED\n- **Adaptive Program Builder**: Multi-week training programs with intelligent progression algorithms, RPE-based adjustments, performance tracking, and automatic calendar scheduling ✓ COMPLETED\n- **Responsive Design**: Mobile-first approach with cross-device compatibility ✓ COMPLETED\n\n### Current Status & Next Steps\n- ✅ **Class Types Management**: Users can create, edit, and delete class types\n- ✅ **Default Exercise Creation**: Auto-generates relevant exercises per class type (HIIT, Strength, Yoga, etc.)\n- ✅ **Routine Builder Enhancements**: Added \"Add New Exercise\" functionality within routine builder\n- ✅ **Class-to-Routine Workflow**: Complete flow from Classes → Select Class → View/Create Routines\n- ✅ **Enhanced Routine List**: Clickable routine list showing name, date, exercise count, and duration\n- ✅ **Exercise Database Management**: Full CRUD operations, search and filtering functionality working\n- ✅ **Exercise Tab Functionality**: Exercise creation, display, and filtering all operational\n- ✅ **Exercise Search & Filter System**: All filters working correctly (category, difficulty, equipment, search)\n- ✅ **Calendar Integration Enhanced**: Quick scheduling with double-click dates, time slot buttons, class-routine linking\n- ✅ **Presentation Mode Enhanced**: Continuous auto-flow between exercises, simplified clean interface, professional full-screen mode, fixed button visibility issues\n- ✅ **Dashboard Analytics Enhanced**: Visual charts (weekly activity, monthly trends, popular exercises, class type distribution), improved layout with prominent schedule placement\n- ✅ **Global Search Functionality**: Keyboard shortcuts (Cmd/Ctrl+K), unified search across routines and exercises, smart filtering\n- ✅ **Export & Sharing Features**: Professional PDF export with spreadsheet-style layout, shareable routine links, email sharing, clipboard copying\n- ✅ **Client Management System**: Complete client profiles, progress tracking, attendance monitoring\n- ✅ **Class Enrollment System**: Proper client-to-event enrollment with enrollment management interface\n- ✅ **Attendance Tracking**: Shows only enrolled classes, proper client check-in workflow\n- ✅ **Event-Aware Coach Console**: Complete live session management system with real-time check-in, exercise timers, performance tracking, session summaries, and seamless Presentation Mode integration\n- ✅ **Adaptive Program Builder**: Complete multi-week program system with intelligent progression, RPE-based adjustments, client enrollment, performance tracking, and calendar integration ✓ COMPLETED (Aug 23, 2025)\n- ✅ **Dashboard Layout Optimization**: Reorganized based on user feedback - Upcoming Schedule now at top, Quick Actions beside it, stats cards below for trainer-focused workflow ✓ COMPLETED (Aug 23, 2025)\n- ✅ **Top 10 Popular Class Types**: Added professional class types (Yoga, Zumba, HIIT, Pilates, CrossFit, Barre, etc.) with detailed descriptions ✓ COMPLETED (Aug 23, 2025)\n- ✅ **Complete Exercise Library**: Created 100+ professional exercises (10 per class type) with full metadata, difficulty levels, equipment, modifications, and safety notes ✓ COMPLETED (Aug 23, 2025)\n- ✅ **Class-Specific Exercise Filtering**: Routine builder now shows only exercises relevant to selected class type, with clear visual indicators and empty state messages ✓ COMPLETED (Aug 23, 2025)\n- 🔄 **Next**: Advanced reporting and analytics features across all program types\n\n### Development Architecture\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Path Aliases**: Organized imports with TypeScript path mapping\n- **Development Tools**: ESBuild for server bundling, TSX for development server\n- **Asset Management**: Static asset handling and optimization\n- **Environment Configuration**: Separate development and production configurations\n\n## External Dependencies\n\n### Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database hosting\n- **Connection Pooling**: @neondatabase/serverless for optimized database connections\n\n### Authentication & Session Management\n- **Replit Auth**: OAuth authentication provider integration\n- **OpenID Connect**: Standard authentication protocol implementation\n- **Session Storage**: PostgreSQL-backed session persistence\n\n### UI Component Libraries\n- **Radix UI**: Unstyled, accessible component primitives\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Component variant management\n- **CMDK**: Command palette and search functionality\n\n### Development & Build Tools\n- **Vite Plugins**: React support, error overlay, and development enhancements\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **TypeScript**: Full-stack type safety and development tooling\n\n### Utility Libraries\n- **Date-fns**: Date manipulation and formatting\n- **Clsx & Tailwind Merge**: Conditional CSS class management\n- **Zod**: Runtime type validation and schema definition\n- **Memoizee**: Function memoization for performance optimization\n\n### Server Dependencies\n- **Express Session**: Session middleware with PostgreSQL storage\n- **Passport**: Authentication middleware integration\n- **WebSocket Support**: Real-time communication capabilities via ws library","size_bytes":9834},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"#eff6ff\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n          700: \"#1d4ed8\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        fitness: {\n          DEFAULT: \"var(--fitness)\",\n          foreground: \"var(--fitness-foreground)\",\n          50: \"#ecfdf5\",\n          500: \"#059669\",\n          600: \"#047857\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3104},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./emailAuth\";\nimport { z } from \"zod\";\nimport {\n  insertClassTypeSchema,\n  insertExerciseSchema,\n  insertRoutineSchema,\n  insertRoutineExerciseSchema,\n  insertCalendarEventSchema,\n  insertClientSchema,\n  insertClientNoteSchema,\n  insertAttendanceSchema,\n  insertProgressMetricSchema,\n  insertProgramSchema,\n  insertProgramSessionSchema,\n  insertProgramEnrollmentSchema,\n  insertEventTargetSchema,\n  insertReadinessCheckSchema,\n  insertPerformanceRecordSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Manual seed endpoint for existing users (force refresh)\n  app.post('/api/seed-data', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log(`Manual seed/refresh requested for user: ${userId}`);\n      \n      // Force seed and return current counts\n      await storage.seedDefaultData(userId);\n      \n      // Also force exercise creation for existing class types that might not have exercises\n      const classTypes = await storage.getClassTypes(userId);\n      for (const classType of classTypes) {\n        const existingExercises = await storage.getExercises({ classType: classType.id, userId });\n        if (existingExercises.length === 0) {\n          console.log(`Creating missing exercises for class type: ${classType.name}`);\n          await storage.createDefaultExercisesForClass(classType, userId);\n        }\n      }\n      \n      // Get current data counts\n      const finalExercises = await storage.getExercises(userId);\n      \n      res.json({ \n        message: \"Data refresh completed\", \n        classTypes: classTypes.length,\n        exercises: finalExercises.length\n      });\n    } catch (error) {\n      console.error(\"Error seeding data:\", error);\n      res.status(500).json({ message: \"Failed to seed data\" });\n    }\n  });\n\n  // Create exercises for existing class types\n  app.post('/api/create-exercises-for-existing-classes', async (req, res) => {\n    try {\n      console.log(\"Creating exercises for existing class types...\");\n      \n      // Get all users\n      const allUsers = await storage.getAllUsers();\n      let totalExercisesCreated = 0;\n      \n      for (const user of allUsers) {\n        const classTypes = await storage.getClassTypes(user.id);\n        console.log(`Processing ${classTypes.length} class types for user: ${user.id}`);\n        \n        for (const classType of classTypes) {\n          try {\n            console.log(`Creating exercises for ${classType.name}...`);\n            await storage.createDefaultExercisesForClass(classType, user.id);\n            totalExercisesCreated += 10; // Each class type gets 10 exercises\n          } catch (error) {\n            console.error(`Failed to create exercises for ${classType.name}:`, error);\n          }\n        }\n      }\n      \n      res.json({ message: `Created ${totalExercisesCreated} exercises successfully` });\n    } catch (error) {\n      console.error(\"Error creating exercises:\", error);\n      res.status(500).json({ message: \"Failed to create exercises\" });\n    }\n  });\n\n  // Emergency seed endpoint for production (admin use)\n  app.post('/api/force-seed-all', async (req, res) => {\n    try {\n      // This endpoint can be called without auth for production setup\n      console.log(\"Force seeding all default data...\");\n      \n      // Get all users and seed them\n      const allUsers = await storage.getAllUsers();\n      console.log(`Found ${allUsers.length} users to seed`);\n      \n      for (const user of allUsers) {\n        try {\n          console.log(`Force seeding for user: ${user.id}`);\n          await storage.seedDefaultData(user.id);\n          \n          // Also ensure exercises exist for all class types\n          const classTypes = await storage.getClassTypes(user.id);\n          for (const classType of classTypes) {\n            const existingExercises = await storage.getExercises({ classType: classType.id, userId: user.id });\n            if (existingExercises.length === 0) {\n              console.log(`Creating missing exercises for class type: ${classType.name} (user: ${user.id})`);\n              await storage.createDefaultExercisesForClass(classType, user.id);\n            }\n          }\n        } catch (error) {\n          console.error(`Failed to seed user ${user.id}:`, error);\n        }\n      }\n      \n      res.json({ message: `Seeded ${allUsers.length} users successfully` });\n    } catch (error) {\n      console.error(\"Error in force seed:\", error);\n      res.status(500).json({ message: \"Failed to force seed\" });\n    }\n  });\n\n  // Cleanup duplicate class types endpoint\n  app.post('/api/cleanup-duplicate-class-types', async (req, res) => {\n    try {\n      console.log(\"Starting duplicate class types cleanup...\");\n      \n      const result = await storage.cleanupDuplicateClassTypes();\n      \n      console.log(\"Cleanup completed:\", result);\n      \n      res.json({\n        message: \"Duplicate class types cleanup completed\",\n        duplicatesFound: result.duplicatesFound,\n        duplicatesRemoved: result.duplicatesRemoved,\n        report: result.report\n      });\n    } catch (error) {\n      console.error(\"Error in cleanup:\", error);\n      res.status(500).json({ message: \"Failed to cleanup duplicates\" });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // req.user is already the full user object from our auth middleware\n      const user = req.user;\n      \n      // Seed default data for new users (non-blocking)\n      console.log(`Checking/seeding default data for user: ${user.id}`);\n      storage.seedDefaultData(user.id).then(() => {\n        console.log(`Default data seeding completed for user: ${user.id}`);\n      }).catch(error => {\n        console.error(\"Error seeding default data:\", error);\n      });\n      \n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Analytics data\n  app.get('/api/dashboard/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const analytics = await storage.getAnalyticsData(userId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Class Types routes\n  app.get('/api/class-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log(`Fetching class types for user: ${userId}`);\n      \n      // Add cache-busting headers for production\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const classTypes = await storage.getClassTypes(userId);\n      console.log(`Found ${classTypes.length} class types for user: ${userId}`);\n      \n      res.json(classTypes);\n    } catch (error) {\n      console.error(\"Error fetching class types:\", error);\n      res.status(500).json({ message: \"Failed to fetch class types\" });\n    }\n  });\n\n  app.post('/api/class-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const data = insertClassTypeSchema.parse({\n        ...req.body,\n        createdByUserId: userId,\n      });\n      const classType = await storage.createClassType(data);\n      \n      // Create default exercises for this class type\n      await storage.createDefaultExercisesForClass(classType, userId);\n      \n      res.status(201).json(classType);\n    } catch (error) {\n      console.error(\"Error creating class type:\", error);\n      res.status(400).json({ message: \"Failed to create class type\" });\n    }\n  });\n\n  app.patch('/api/class-types/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertClassTypeSchema.partial().parse(req.body);\n      const classType = await storage.updateClassType(id, data);\n      res.json(classType);\n    } catch (error) {\n      console.error(\"Error updating class type:\", error);\n      res.status(400).json({ message: \"Failed to update class type\" });\n    }\n  });\n\n  app.delete('/api/class-types/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteClassType(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting class type:\", error);\n      res.status(400).json({ message: \"Failed to delete class type\" });\n    }\n  });\n\n  // Exercises routes with detailed debugging\n  app.get('/api/exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { search, category, difficulty, equipment, classType } = req.query;\n      \n      console.log(`[DEBUG] Fetching exercises for user: ${userId}, filters:`, { search, category, difficulty, equipment, classType });\n      console.log(`[DEBUG] Database URL exists: ${!!process.env.DATABASE_URL}`);\n      console.log(`[DEBUG] Environment: ${process.env.NODE_ENV}`);\n      \n      // Add cache-busting headers for production\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      const exercises = await storage.getExercises({\n        search: search as string,\n        category: category as string,\n        difficulty: difficulty as string,\n        equipment: equipment as string,\n        classType: classType as string,\n        userId,\n      });\n      \n      // Debug first few exercises\n      console.log(`[DEBUG] Found ${exercises.length} exercises for user: ${userId}`);\n      console.log(`[DEBUG] First 3 exercises:`, exercises.slice(0, 3).map(ex => ({ id: ex.id.slice(0, 8), name: ex.name, classTypeId: ex.classTypeId?.slice(0, 8) })));\n      console.log(`[DEBUG] Any 'Reach' exercises:`, exercises.filter(ex => ex.name.toLowerCase().includes('reach')).length);\n      \n      res.json(exercises);\n    } catch (error) {\n      console.error(\"Error fetching exercises:\", error);\n      res.status(500).json({ message: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.get('/api/exercises/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const exercise = await storage.getExercise(id);\n      if (!exercise) {\n        return res.status(404).json({ message: \"Exercise not found\" });\n      }\n      res.json(exercise);\n    } catch (error) {\n      console.error(\"Error fetching exercise:\", error);\n      res.status(500).json({ message: \"Failed to fetch exercise\" });\n    }\n  });\n\n  app.post('/api/exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const data = insertExerciseSchema.parse({\n        ...req.body,\n        createdByUserId: userId,\n      });\n      const exercise = await storage.createExercise(data);\n      res.status(201).json(exercise);\n    } catch (error) {\n      console.error(\"Error creating exercise:\", error);\n      res.status(400).json({ message: \"Failed to create exercise\" });\n    }\n  });\n\n  app.put('/api/exercises/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertExerciseSchema.partial().parse(req.body);\n      const exercise = await storage.updateExercise(id, data);\n      res.json(exercise);\n    } catch (error) {\n      console.error(\"Error updating exercise:\", error);\n      res.status(400).json({ message: \"Failed to update exercise\" });\n    }\n  });\n\n  app.delete('/api/exercises/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteExercise(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting exercise:\", error);\n      res.status(400).json({ message: \"Failed to delete exercise\" });\n    }\n  });\n\n  // Routines routes\n  app.get('/api/routines', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const routines = await storage.getRoutines(userId);\n      res.json(routines);\n    } catch (error) {\n      console.error(\"Error fetching routines:\", error);\n      res.status(500).json({ message: \"Failed to fetch routines\" });\n    }\n  });\n\n  app.get('/api/routines/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const routine = await storage.getRoutineWithExercises(id);\n      if (!routine) {\n        return res.status(404).json({ message: \"Routine not found\" });\n      }\n      res.json(routine);\n    } catch (error) {\n      console.error(\"Error fetching routine:\", error);\n      res.status(500).json({ message: \"Failed to fetch routine\" });\n    }\n  });\n\n  app.post('/api/routines', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const data = insertRoutineSchema.parse({\n        ...req.body,\n        createdByUserId: userId,\n      });\n      const routine = await storage.createRoutine(data);\n      res.status(201).json(routine);\n    } catch (error) {\n      console.error(\"Error creating routine:\", error);\n      res.status(400).json({ message: \"Failed to create routine\" });\n    }\n  });\n\n  app.put('/api/routines/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertRoutineSchema.partial().parse(req.body);\n      const routine = await storage.updateRoutine(id, data);\n      res.json(routine);\n    } catch (error) {\n      console.error(\"Error updating routine:\", error);\n      res.status(400).json({ message: \"Failed to update routine\" });\n    }\n  });\n\n  app.delete('/api/routines/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRoutine(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting routine:\", error);\n      res.status(400).json({ message: \"Failed to delete routine\" });\n    }\n  });\n\n  app.post('/api/routines/:id/duplicate', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { name } = req.body;\n      const userId = req.user.id;\n      \n      if (!name) {\n        return res.status(400).json({ message: \"Name is required\" });\n      }\n\n      const routine = await storage.duplicateRoutine(id, name, userId);\n      res.status(201).json(routine);\n    } catch (error) {\n      console.error(\"Error duplicating routine:\", error);\n      res.status(400).json({ message: \"Failed to duplicate routine\" });\n    }\n  });\n\n  // Routine Exercises routes\n  app.get('/api/routines/:routineId/exercises', isAuthenticated, async (req, res) => {\n    try {\n      const { routineId } = req.params;\n      const exercises = await storage.getRoutineExercises(routineId);\n      res.json(exercises);\n    } catch (error) {\n      console.error(\"Error fetching routine exercises:\", error);\n      res.status(500).json({ message: \"Failed to fetch routine exercises\" });\n    }\n  });\n\n  app.post('/api/routines/:routineId/exercises', isAuthenticated, async (req, res) => {\n    try {\n      const { routineId } = req.params;\n      const data = insertRoutineExerciseSchema.parse({\n        ...req.body,\n        routineId,\n      });\n      const routineExercise = await storage.addExerciseToRoutine(data);\n      res.status(201).json(routineExercise);\n    } catch (error) {\n      console.error(\"Error adding exercise to routine:\", error);\n      res.status(400).json({ message: \"Failed to add exercise to routine\" });\n    }\n  });\n\n  app.put('/api/routines/:routineId/exercises/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertRoutineExerciseSchema.partial().parse(req.body);\n      const routineExercise = await storage.updateRoutineExercise(id, data);\n      res.json(routineExercise);\n    } catch (error) {\n      console.error(\"Error updating routine exercise:\", error);\n      res.status(400).json({ message: \"Failed to update routine exercise\" });\n    }\n  });\n\n  app.delete('/api/routines/:routineId/exercises/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.removeExerciseFromRoutine(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing exercise from routine:\", error);\n      res.status(400).json({ message: \"Failed to remove exercise from routine\" });\n    }\n  });\n\n  app.put('/api/routines/:routineId/exercises/reorder', isAuthenticated, async (req, res) => {\n    try {\n      const { routineId } = req.params;\n      const { exerciseIds } = req.body;\n      \n      if (!Array.isArray(exerciseIds)) {\n        return res.status(400).json({ message: \"exerciseIds must be an array\" });\n      }\n\n      await storage.reorderRoutineExercises(routineId, exerciseIds);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error reordering routine exercises:\", error);\n      res.status(400).json({ message: \"Failed to reorder routine exercises\" });\n    }\n  });\n\n  // Calendar routes\n  app.get('/api/calendar/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { start, end } = req.query;\n      const startDate = start ? new Date(start as string) : undefined;\n      const endDate = end ? new Date(end as string) : undefined;\n      \n      const events = await storage.getCalendarEvents(userId, startDate, endDate);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching calendar events:\", error);\n      res.status(500).json({ message: \"Failed to fetch calendar events\" });\n    }\n  });\n\n  app.post('/api/calendar/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Convert string dates to Date objects before validation\n      const requestData = {\n        ...req.body,\n        userId,\n        startDatetime: new Date(req.body.startDatetime),\n        endDatetime: new Date(req.body.endDatetime),\n      };\n      \n      const data = insertCalendarEventSchema.parse(requestData);\n      const event = await storage.createCalendarEvent(data);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Error creating calendar event:\", error);\n      res.status(400).json({ message: \"Failed to create calendar event\" });\n    }\n  });\n\n  app.put('/api/calendar/events/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Convert string dates to Date objects if they exist\n      const requestData = { ...req.body };\n      if (req.body.startDatetime) {\n        requestData.startDatetime = new Date(req.body.startDatetime);\n      }\n      if (req.body.endDatetime) {\n        requestData.endDatetime = new Date(req.body.endDatetime);\n      }\n      \n      const data = insertCalendarEventSchema.partial().parse(requestData);\n      const event = await storage.updateCalendarEvent(id, data);\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error updating calendar event:\", error);\n      res.status(400).json({ message: \"Failed to update calendar event\" });\n    }\n  });\n\n  app.delete('/api/calendar/events/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCalendarEvent(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting calendar event:\", error);\n      res.status(400).json({ message: \"Failed to delete calendar event\" });\n    }\n  });\n\n  // Community routes\n  app.get('/api/community/routines', isAuthenticated, async (req, res) => {\n    try {\n      const { search, classType } = req.query;\n      const routines = await storage.getCommunityRoutines({\n        search: search as string,\n        classType: classType as string,\n      });\n      res.json(routines);\n    } catch (error) {\n      console.error(\"Error fetching community routines:\", error);\n      res.status(500).json({ message: \"Failed to fetch community routines\" });\n    }\n  });\n\n  app.post('/api/routines/:id/save', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      const saved = await storage.saveRoutine(userId, id);\n      res.status(201).json(saved);\n    } catch (error) {\n      console.error(\"Error saving routine:\", error);\n      res.status(400).json({ message: \"Failed to save routine\" });\n    }\n  });\n\n  app.delete('/api/routines/:id/save', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      await storage.unsaveRoutine(userId, id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error unsaving routine:\", error);\n      res.status(400).json({ message: \"Failed to unsave routine\" });\n    }\n  });\n\n  app.get('/api/saved-routines', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const savedRoutines = await storage.getUserSavedRoutines(userId);\n      res.json(savedRoutines);\n    } catch (error) {\n      console.error(\"Error fetching saved routines:\", error);\n      res.status(500).json({ message: \"Failed to fetch saved routines\" });\n    }\n  });\n\n  // Client Management routes\n  app.get('/api/clients', isAuthenticated, async (req: any, res) => {\n    try {\n      const trainerId = req.user.id;\n      const clients = await storage.getClients(trainerId);\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get('/api/clients/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error fetching client:\", error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post('/api/clients', isAuthenticated, async (req: any, res) => {\n    try {\n      const trainerId = req.user.id;\n      const clientData = insertClientSchema.parse({\n        ...req.body,\n        trainerId,\n      });\n      const client = await storage.createClient(clientData);\n      res.status(201).json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(400).json({ message: \"Failed to create client\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/clients/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, updateData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      res.status(400).json({ message: \"Failed to update client\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/clients/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.deleteClient(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Client Notes routes\n  app.get('/api/clients/:clientId/notes', isAuthenticated, async (req: any, res) => {\n    try {\n      const notes = await storage.getClientNotes(req.params.clientId);\n      res.json(notes);\n    } catch (error) {\n      console.error(\"Error fetching client notes:\", error);\n      res.status(500).json({ message: \"Failed to fetch client notes\" });\n    }\n  });\n\n  app.post('/api/clients/:clientId/notes', isAuthenticated, async (req: any, res) => {\n    try {\n      const trainerId = req.user.id;\n      const noteData = insertClientNoteSchema.parse({\n        ...req.body,\n        clientId: req.params.clientId,\n        trainerId,\n      });\n      const note = await storage.createClientNote(noteData);\n      res.status(201).json(note);\n    } catch (error) {\n      console.error(\"Error creating client note:\", error);\n      res.status(400).json({ message: \"Failed to create client note\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Attendance routes\n  app.get('/api/events/:eventId/attendance', isAuthenticated, async (req: any, res) => {\n    try {\n      const attendance = await storage.getAttendanceForEvent(req.params.eventId);\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error fetching event attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch event attendance\" });\n    }\n  });\n\n  app.get('/api/clients/:clientId/attendance', isAuthenticated, async (req: any, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const attendance = await storage.getClientAttendance(req.params.clientId, limit);\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error fetching client attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch client attendance\" });\n    }\n  });\n\n  app.post('/api/attendance', isAuthenticated, async (req: any, res) => {\n    try {\n      const attendanceData = insertAttendanceSchema.parse(req.body);\n      const attendance = await storage.createAttendance(attendanceData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      console.error(\"Error creating attendance:\", error);\n      res.status(400).json({ message: \"Failed to create attendance\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/attendance/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertAttendanceSchema.partial().parse(req.body);\n      const attendance = await storage.updateAttendance(req.params.id, updateData);\n      res.json(attendance);\n    } catch (error) {\n      console.error(\"Error updating attendance:\", error);\n      res.status(400).json({ message: \"Failed to update attendance\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Progress Metrics routes\n  app.get('/api/clients/:clientId/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const exerciseId = req.query.exerciseId as string;\n      const progress = await storage.getClientProgress(req.params.clientId, exerciseId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching client progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch client progress\" });\n    }\n  });\n\n  app.post('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const metricData = insertProgressMetricSchema.parse(req.body);\n      const metric = await storage.createProgressMetric(metricData);\n      res.status(201).json(metric);\n    } catch (error) {\n      console.error(\"Error creating progress metric:\", error);\n      res.status(400).json({ message: \"Failed to create progress metric\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Calendar Event Clients routes (enrollment)\n  app.get(\"/api/calendar/events/:eventId/clients\", isAuthenticated, async (req, res) => {\n    try {\n      const clients = await storage.getEventClients(req.params.eventId);\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching event clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch event clients\" });\n    }\n  });\n\n  app.post(\"/api/calendar/events/:eventId/clients\", isAuthenticated, async (req, res) => {\n    try {\n      const { clientId } = req.body;\n      await storage.enrollClientInEvent(req.params.eventId, clientId);\n      res.status(201).json({ message: \"Client enrolled successfully\" });\n    } catch (error) {\n      console.error(\"Error enrolling client:\", error);\n      res.status(400).json({ message: \"Failed to enroll client\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete(\"/api/calendar/events/:eventId/clients/:clientId\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.unenrollClientFromEvent(req.params.eventId, req.params.clientId);\n      res.json({ message: \"Client unenrolled successfully\" });\n    } catch (error) {\n      console.error(\"Error unenrolling client:\", error);\n      res.status(400).json({ message: \"Failed to unenroll client\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/calendar/events/client/:clientId\", isAuthenticated, async (req, res) => {\n    try {\n      const events = await storage.getClientEnrolledEvents(req.params.clientId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching client enrolled events:\", error);\n      res.status(500).json({ message: \"Failed to fetch client enrolled events\" });\n    }\n  });\n\n  // Coach Console Routes - Event-aware session management\n  app.get(\"/api/events/:eventId/console\", isAuthenticated, async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const userId = req.user.id;\n      \n      // Get event details with routine and enrolled clients\n      const eventData = await storage.getEventConsoleData(eventId, userId);\n      \n      if (!eventData) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      res.json(eventData);\n    } catch (error) {\n      console.error(\"Error fetching event console data:\", error);\n      res.status(500).json({ message: \"Failed to fetch event data\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/start\", isAuthenticated, async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const userId = req.user.id;\n      \n      const updatedEvent = await storage.startEventSession(eventId, userId);\n      res.json(updatedEvent);\n    } catch (error) {\n      console.error(\"Error starting event session:\", error);\n      res.status(500).json({ message: \"Failed to start session\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/complete\", isAuthenticated, async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const { sessionNotes } = req.body;\n      const userId = req.user.id;\n      \n      const sessionSummary = await storage.completeEventSession(eventId, userId, sessionNotes);\n      res.json(sessionSummary);\n    } catch (error) {\n      console.error(\"Error completing event session:\", error);\n      res.status(500).json({ message: \"Failed to complete session\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/checkin\", isAuthenticated, async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const { clientId, status } = req.body;\n      \n      await storage.recordAttendance(eventId, clientId, status || \"present\");\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error recording attendance:\", error);\n      res.status(500).json({ message: \"Failed to record attendance\" });\n    }\n  });\n\n  app.post(\"/api/events/:eventId/metrics\", isAuthenticated, async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const metricsData = req.body; // Array of metrics to record\n      \n      await storage.recordSessionMetrics(eventId, metricsData);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error recording metrics:\", error);\n      res.status(500).json({ message: \"Failed to record metrics\" });\n    }\n  });\n\n  // Program Management Routes - Adaptive Program Builder\n  app.get('/api/programs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const programs = await storage.getPrograms(userId);\n      res.json(programs);\n    } catch (error) {\n      console.error(\"Error fetching programs:\", error);\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  app.get('/api/programs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const program = await storage.getProgramWithSessions(req.params.id);\n      if (!program) {\n        return res.status(404).json({ message: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (error) {\n      console.error(\"Error fetching program:\", error);\n      res.status(500).json({ message: \"Failed to fetch program\" });\n    }\n  });\n\n  app.post('/api/programs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const programData = insertProgramSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const program = await storage.createProgram(programData);\n      res.status(201).json(program);\n    } catch (error) {\n      console.error(\"Error creating program:\", error);\n      res.status(400).json({ message: \"Failed to create program\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/programs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertProgramSchema.partial().parse(req.body);\n      const program = await storage.updateProgram(req.params.id, updateData);\n      res.json(program);\n    } catch (error) {\n      console.error(\"Error updating program:\", error);\n      res.status(400).json({ message: \"Failed to update program\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/programs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.deleteProgram(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting program:\", error);\n      res.status(500).json({ message: \"Failed to delete program\" });\n    }\n  });\n\n  // Program Session Routes\n  app.get('/api/programs/:programId/sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessions = await storage.getProgramSessions(req.params.programId);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching program sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch program sessions\" });\n    }\n  });\n\n  app.post('/api/programs/:programId/sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionData = insertProgramSessionSchema.parse({\n        ...req.body,\n        programId: req.params.programId,\n      });\n      const session = await storage.createProgramSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      console.error(\"Error creating program session:\", error);\n      res.status(400).json({ message: \"Failed to create program session\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/program-sessions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertProgramSessionSchema.partial().parse(req.body);\n      const session = await storage.updateProgramSession(req.params.id, updateData);\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error updating program session:\", error);\n      res.status(400).json({ message: \"Failed to update program session\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/program-sessions/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.deleteProgramSession(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting program session:\", error);\n      res.status(500).json({ message: \"Failed to delete program session\" });\n    }\n  });\n\n  // Generate calendar events from program\n  app.post('/api/programs/:programId/generate-schedule', isAuthenticated, async (req: any, res) => {\n    try {\n      const { weeks } = req.body;\n      const events = await storage.generateScheduleForProgram(req.params.programId, weeks || 4);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error generating schedule:\", error);\n      res.status(400).json({ message: \"Failed to generate schedule\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Program Enrollment Routes\n  app.get('/api/programs/:programId/enrollments', isAuthenticated, async (req: any, res) => {\n    try {\n      const enrollments = await storage.getProgramEnrollments(req.params.programId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching program enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch program enrollments\" });\n    }\n  });\n\n  app.post('/api/programs/:programId/enroll', isAuthenticated, async (req: any, res) => {\n    try {\n      const enrollmentData = insertProgramEnrollmentSchema.parse({\n        ...req.body,\n        programId: req.params.programId,\n        startDate: new Date(req.body.startDate),\n      });\n      const enrollment = await storage.enrollInProgram(enrollmentData);\n      res.status(201).json(enrollment);\n    } catch (error) {\n      console.error(\"Error enrolling in program:\", error);\n      res.status(400).json({ message: \"Failed to enroll in program\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/program-enrollments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertProgramEnrollmentSchema.partial().parse(req.body);\n      const enrollment = await storage.updateProgramEnrollment(req.params.id, updateData);\n      res.json(enrollment);\n    } catch (error) {\n      console.error(\"Error updating program enrollment:\", error);\n      res.status(400).json({ message: \"Failed to update program enrollment\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/program-enrollments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.unenrollFromProgram(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error unenrolling from program:\", error);\n      res.status(500).json({ message: \"Failed to unenroll from program\" });\n    }\n  });\n\n  // Event Targets Routes (for auto-generated targets)\n  app.get('/api/events/:eventId/targets', isAuthenticated, async (req: any, res) => {\n    try {\n      const targets = await storage.getEventTargets(req.params.eventId);\n      res.json(targets);\n    } catch (error) {\n      console.error(\"Error fetching event targets:\", error);\n      res.status(500).json({ message: \"Failed to fetch event targets\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/targets', isAuthenticated, async (req: any, res) => {\n    try {\n      const targetsData = req.body.map((target: any) => ({\n        ...insertEventTargetSchema.parse(target),\n        eventId: req.params.eventId,\n      }));\n      const targets = await storage.createEventTargets(targetsData);\n      res.status(201).json(targets);\n    } catch (error) {\n      console.error(\"Error creating event targets:\", error);\n      res.status(400).json({ message: \"Failed to create event targets\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.patch('/api/event-targets/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const updateData = insertEventTargetSchema.partial().parse(req.body);\n      const target = await storage.updateEventTarget(req.params.id, updateData);\n      res.json(target);\n    } catch (error) {\n      console.error(\"Error updating event target:\", error);\n      res.status(400).json({ message: \"Failed to update event target\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Readiness Check Routes\n  app.get('/api/clients/:clientId/readiness', isAuthenticated, async (req: any, res) => {\n    try {\n      const date = req.query.date ? new Date(req.query.date as string) : undefined;\n      const readiness = await storage.getClientReadiness(req.params.clientId, date);\n      res.json(readiness);\n    } catch (error) {\n      console.error(\"Error fetching client readiness:\", error);\n      res.status(500).json({ message: \"Failed to fetch client readiness\" });\n    }\n  });\n\n  app.post('/api/clients/:clientId/readiness', isAuthenticated, async (req: any, res) => {\n    try {\n      const readinessData = insertReadinessCheckSchema.parse({\n        ...req.body,\n        clientId: req.params.clientId,\n        date: new Date(req.body.date),\n      });\n      const readiness = await storage.createReadinessCheck(readinessData);\n      res.status(201).json(readiness);\n    } catch (error) {\n      console.error(\"Error creating readiness check:\", error);\n      res.status(400).json({ message: \"Failed to create readiness check\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get('/api/clients/:clientId/readiness/latest', isAuthenticated, async (req: any, res) => {\n    try {\n      const readiness = await storage.getLatestReadiness(req.params.clientId);\n      res.json(readiness);\n    } catch (error) {\n      console.error(\"Error fetching latest readiness:\", error);\n      res.status(500).json({ message: \"Failed to fetch latest readiness\" });\n    }\n  });\n\n  // Performance Record Routes\n  app.get('/api/events/:eventId/performance', isAuthenticated, async (req: any, res) => {\n    try {\n      const clientId = req.query.clientId as string;\n      const performance = await storage.getPerformanceRecords(req.params.eventId, clientId);\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching performance records:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance records\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/performance', isAuthenticated, async (req: any, res) => {\n    try {\n      const performanceData = insertPerformanceRecordSchema.parse({\n        ...req.body,\n        eventId: req.params.eventId,\n      });\n      const performance = await storage.createPerformanceRecord(performanceData);\n      res.status(201).json(performance);\n    } catch (error) {\n      console.error(\"Error creating performance record:\", error);\n      res.status(400).json({ message: \"Failed to create performance record\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Apply Progression to Event\n  app.post('/api/events/:eventId/apply-progression', isAuthenticated, async (req: any, res) => {\n    try {\n      const result = await storage.applyProgression(req.params.eventId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error applying progression:\", error);\n      res.status(500).json({ message: \"Failed to apply progression\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Simple fix: Use reseed endpoint to populate production with correct exercises\n  app.post('/api/fix-exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log('[FIX] Fixing exercises for user:', userId);\n      \n      // Import and run the seeder\n      const { seedExercises } = await import('./seed-exercises');\n      const totalCreated = await seedExercises(userId);\n      \n      // Get current counts after seeding\n      const allExercises = await storage.getExercises(userId);\n      const allClassTypes = await storage.getClassTypes(userId);\n      \n      console.log('[FIX] Fix completed. Total exercises:', allExercises.length);\n      \n      res.json({\n        success: true,\n        message: `Exercise fix completed! Created ${totalCreated} exercises.`,\n        totalExercises: allExercises.length,\n        totalClassTypes: allClassTypes.length,\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV || 'production'\n      });\n    } catch (error: any) {\n      console.error('[FIX] Error:', error);\n      res.status(500).json({ \n        success: false,\n        error: error.message, \n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Clean up duplicate exercises endpoint\n  app.post('/api/cleanup-exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log('[CLEANUP] Starting exercise cleanup for user:', userId);\n      \n      // Get all exercises for the user\n      const allExercises = await storage.getExercises({ userId });\n      \n      // Group by name (case-insensitive)\n      const exercisesByName = new Map<string, any[]>();\n      for (const exercise of allExercises) {\n        const key = exercise.name.toLowerCase().trim();\n        if (!exercisesByName.has(key)) {\n          exercisesByName.set(key, []);\n        }\n        exercisesByName.get(key)!.push(exercise);\n      }\n      \n      let duplicatesRemoved = 0;\n      \n      // For each group, keep the first one and delete the rest\n      for (const [name, exercises] of exercisesByName.entries()) {\n        if (exercises.length > 1) {\n          console.log(`[CLEANUP] Found ${exercises.length} duplicates of \"${exercises[0].name}\"`);\n          \n          // Keep the first exercise, delete the rest\n          for (let i = 1; i < exercises.length; i++) {\n            await storage.deleteExercise(exercises[i].id);\n            duplicatesRemoved++;\n          }\n        }\n      }\n      \n      const remainingExercises = await storage.getExercises({ userId });\n      \n      console.log('[CLEANUP] Cleanup completed. Removed:', duplicatesRemoved, 'Total remaining:', remainingExercises.length);\n      \n      res.json({\n        success: true,\n        message: `Cleanup completed! Removed ${duplicatesRemoved} duplicate exercises.`,\n        duplicatesRemoved,\n        totalExercises: remainingExercises.length,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('[CLEANUP] Error:', error);\n      res.status(500).json({ \n        success: false,\n        error: error.message, \n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Clear all exercises endpoint\n  app.post('/api/clear-exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log('[CLEAR] Clearing all exercises for user:', userId);\n      \n      // Get all exercises for the user and delete them\n      const allExercises = await storage.getExercises({ userId });\n      \n      for (const exercise of allExercises) {\n        await storage.deleteExercise(exercise.id);\n      }\n      \n      console.log(`[CLEAR] Cleared ${allExercises.length} exercises for user: ${userId}`);\n      \n      res.json({\n        success: true,\n        message: `Cleared ${allExercises.length} exercises from database.`,\n        exercisesRemoved: allExercises.length,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('[CLEAR] Error:', error);\n      res.status(500).json({ \n        success: false,\n        error: error.message, \n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Reseed exercises endpoint\n  app.post('/api/reseed-exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      console.log('[RESEED] Starting exercise reseed for user:', userId);\n      \n      const { seedExercises } = await import('./seed-exercises');\n      const totalCreated = await seedExercises(userId);\n      \n      console.log('[RESEED] Successfully created exercises:', totalCreated);\n      res.json({\n        success: true,\n        message: `Successfully created ${totalCreated} exercises`,\n        totalCreated,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('[RESEED] Error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message, \n        timestamp: new Date().toISOString() \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":48774},"server/storage.ts":{"content":"import {\n  users,\n  classTypes,\n  exercises,\n  routines,\n  routineExercises,\n  calendarEvents,\n  userSavedRoutines,\n  clients,\n  clientNotes,\n  attendance,\n  progressMetrics,\n  programs,\n  programSessions,\n  programEnrollments,\n  eventTargets,\n  readinessChecks,\n  performanceRecords,\n  type User,\n  type UpsertUser,\n  type ClassType,\n  type Exercise,\n  type Routine,\n  type RoutineExercise,\n  type CalendarEvent,\n  type UserSavedRoutine,\n  type Client,\n  type ClientNote,\n  type Attendance,\n  type ProgressMetric,\n  type Program,\n  type ProgramSession,\n  type ProgramEnrollment,\n  type EventTarget,\n  type ReadinessCheck,\n  type PerformanceRecord,\n  type InsertClassType,\n  type InsertExercise,\n  type InsertRoutine,\n  type InsertRoutineExercise,\n  type InsertCalendarEvent,\n  type InsertUserSavedRoutine,\n  type InsertClient,\n  type InsertClientNote,\n  type InsertAttendance,\n  type InsertProgressMetric,\n  type InsertProgram,\n  type InsertProgramSession,\n  type InsertProgramEnrollment,\n  type InsertEventTarget,\n  type InsertReadinessCheck,\n  type InsertPerformanceRecord,\n  eventClients,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, like, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: { email: string; passwordHash: string; firstName?: string; lastName?: string; emailVerified?: boolean }): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Class Type operations\n  getClassTypes(userId?: string): Promise<ClassType[]>;\n  createClassType(classType: InsertClassType): Promise<ClassType>;\n  updateClassType(id: string, classType: Partial<InsertClassType>): Promise<ClassType>;\n  deleteClassType(id: string): Promise<void>;\n  createDefaultExercisesForClass(classType: ClassType, userId: string): Promise<void>;\n\n  // Exercise operations\n  getExercises(filters?: {\n    search?: string;\n    category?: string;\n    difficulty?: string;\n    equipment?: string;\n    classType?: string;\n    userId?: string;\n  }): Promise<(Exercise & { classType?: ClassType })[]>;\n  getExercise(id: string): Promise<Exercise | undefined>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  updateExercise(id: string, exercise: Partial<InsertExercise>): Promise<Exercise>;\n  deleteExercise(id: string): Promise<void>;\n\n  // Routine operations\n  getRoutines(userId: string): Promise<(Routine & { classType?: ClassType; exerciseCount: number })[]>;\n  getRoutine(id: string): Promise<Routine | undefined>;\n  getRoutineWithExercises(id: string): Promise<(Routine & { \n    classType?: ClassType; \n    exercises: (RoutineExercise & { exercise: Exercise })[] \n  }) | undefined>;\n  createRoutine(routine: InsertRoutine): Promise<Routine>;\n  updateRoutine(id: string, routine: Partial<InsertRoutine>): Promise<Routine>;\n  deleteRoutine(id: string): Promise<void>;\n  duplicateRoutine(id: string, newName: string, userId: string): Promise<Routine>;\n\n  // Routine Exercise operations\n  getRoutineExercises(routineId: string): Promise<(RoutineExercise & { exercise: Exercise })[]>;\n  addExerciseToRoutine(routineExercise: InsertRoutineExercise): Promise<RoutineExercise>;\n  updateRoutineExercise(id: string, routineExercise: Partial<InsertRoutineExercise>): Promise<RoutineExercise>;\n  removeExerciseFromRoutine(id: string): Promise<void>;\n  reorderRoutineExercises(routineId: string, exerciseIds: string[]): Promise<void>;\n\n  // Calendar operations\n  getCalendarEvents(userId: string, startDate?: Date, endDate?: Date): Promise<(CalendarEvent & { classType?: ClassType; routine?: Routine })[]>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent>;\n  deleteCalendarEvent(id: string): Promise<void>;\n\n  // Community operations\n  getCommunityRoutines(filters?: { search?: string; classType?: string }): Promise<(Routine & { \n    classType?: ClassType; \n    createdBy: User;\n    exerciseCount: number \n  })[]>;\n  saveRoutine(userId: string, routineId: string): Promise<UserSavedRoutine>;\n  unsaveRoutine(userId: string, routineId: string): Promise<void>;\n  getUserSavedRoutines(userId: string): Promise<(UserSavedRoutine & { routine: Routine & { classType?: ClassType } })[]>;\n\n  // Dashboard stats\n  getUserStats(userId: string): Promise<{\n    totalRoutines: number;\n    totalExercises: number;\n    weeklyClasses: number;\n    avgDuration: number;\n    classTypes: number;\n  }>;\n\n  // Analytics operations\n  getAnalyticsData(userId: string): Promise<{\n    weeklyActivity: Array<{ week: string; routines: number; classes: number }>;\n    popularExercises: Array<{ name: string; count: number; category: string }>;\n    classTypeDistribution: Array<{ name: string; count: number; percentage: number }>;\n    monthlyTrends: Array<{ month: string; totalMinutes: number; avgDuration: number }>;\n  }>;\n\n  // Client Management operations\n  getClients(trainerId: string): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: string): Promise<void>;\n\n  // Client Notes operations\n  getClientNotes(clientId: string): Promise<ClientNote[]>;\n  createClientNote(note: InsertClientNote): Promise<ClientNote>;\n  deleteClientNote(id: string): Promise<void>;\n\n  // Attendance operations\n  getAttendanceForEvent(eventId: string): Promise<(Attendance & { client: Client })[]>;\n  getClientAttendance(clientId: string, limit?: number): Promise<(Attendance & { event: CalendarEvent })[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(id: string, attendance: Partial<InsertAttendance>): Promise<Attendance>;\n\n  // Progress Metrics operations\n  getClientProgress(clientId: string, exerciseId?: string): Promise<ProgressMetric[]>;\n  createProgressMetric(metric: InsertProgressMetric): Promise<ProgressMetric>;\n  getProgressMetricsForRoutine(clientId: string, routineId: string): Promise<ProgressMetric[]>;\n\n  // Coach Console operations\n  getEventConsoleData(eventId: string, userId: string): Promise<any>;\n  startEventSession(eventId: string, userId: string): Promise<CalendarEvent>;\n  completeEventSession(eventId: string, userId: string, sessionNotes?: string): Promise<any>;\n  recordAttendance(eventId: string, clientId: string, status: string): Promise<void>;\n  recordSessionMetrics(eventId: string, metrics: any[]): Promise<void>;\n\n  // Program Management operations\n  getPrograms(userId: string): Promise<(Program & { classType?: ClassType; enrollmentCount: number })[]>;\n  getProgram(id: string): Promise<Program | undefined>;\n  getProgramWithSessions(id: string): Promise<(Program & { \n    classType?: ClassType; \n    sessions: (ProgramSession & { routine?: Routine })[] \n  }) | undefined>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  updateProgram(id: string, program: Partial<InsertProgram>): Promise<Program>;\n  deleteProgram(id: string): Promise<void>;\n\n  // Program Session operations\n  getProgramSessions(programId: string): Promise<(ProgramSession & { routine?: Routine })[]>;\n  createProgramSession(session: InsertProgramSession): Promise<ProgramSession>;\n  updateProgramSession(id: string, session: Partial<InsertProgramSession>): Promise<ProgramSession>;\n  deleteProgramSession(id: string): Promise<void>;\n  generateScheduleForProgram(programId: string, weeks: number): Promise<CalendarEvent[]>;\n\n  // Program Enrollment operations\n  getProgramEnrollments(programId: string): Promise<(ProgramEnrollment & { client?: Client; classType?: ClassType })[]>;\n  enrollInProgram(enrollment: InsertProgramEnrollment): Promise<ProgramEnrollment>;\n  updateProgramEnrollment(id: string, enrollment: Partial<InsertProgramEnrollment>): Promise<ProgramEnrollment>;\n  unenrollFromProgram(id: string): Promise<void>;\n\n  // Event Targets operations\n  getEventTargets(eventId: string): Promise<(EventTarget & { routineExercise?: RoutineExercise & { exercise: Exercise } })[]>;\n  createEventTargets(targets: InsertEventTarget[]): Promise<EventTarget[]>;\n  updateEventTarget(id: string, target: Partial<InsertEventTarget>): Promise<EventTarget>;\n\n  // Readiness Check operations\n  getClientReadiness(clientId: string, date?: Date): Promise<ReadinessCheck[]>;\n  createReadinessCheck(check: InsertReadinessCheck): Promise<ReadinessCheck>;\n  getLatestReadiness(clientId: string): Promise<ReadinessCheck | undefined>;\n\n  // Performance Record operations\n  getPerformanceRecords(eventId: string, clientId?: string): Promise<(PerformanceRecord & { exercise: Exercise })[]>;\n  createPerformanceRecord(record: InsertPerformanceRecord): Promise<PerformanceRecord>;\n  applyProgression(eventId: string): Promise<any>;\n\n  // Data seeding operations\n  seedDefaultData(userId: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: { email: string; passwordHash: string; firstName?: string; lastName?: string; emailVerified?: boolean }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        email: userData.email,\n        passwordHash: userData.passwordHash,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        emailVerified: userData.emailVerified,\n      })\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Class Type operations\n  async getClassTypes(userId?: string): Promise<ClassType[]> {\n    const query = db.select().from(classTypes);\n    if (userId) {\n      return await query.where(\n        sql`${classTypes.isDefault} = true OR ${classTypes.createdByUserId} = ${userId}`\n      );\n    }\n    return await query.where(eq(classTypes.isDefault, true));\n  }\n\n  async createClassType(classType: InsertClassType): Promise<ClassType> {\n    const [newClassType] = await db.insert(classTypes).values(classType).returning();\n    return newClassType;\n  }\n\n  async updateClassType(id: string, classType: Partial<InsertClassType>): Promise<ClassType> {\n    const [updated] = await db\n      .update(classTypes)\n      .set(classType)\n      .where(eq(classTypes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteClassType(id: string): Promise<void> {\n    await db.delete(classTypes).where(eq(classTypes.id, id));\n  }\n\n  async createDefaultExercisesForClass(classType: ClassType, userId: string): Promise<void> {\n    const defaultExercises = this.getDefaultExercisesForClassType(classType.name);\n    \n    for (const exercise of defaultExercises) {\n      await this.createExercise({\n        ...exercise,\n        classTypeId: classType.id,\n        createdByUserId: userId,\n        isPublic: true,\n      });\n    }\n  }\n\n  private getDefaultExercisesForClassType(className: string): Omit<InsertExercise, 'createdByUserId' | 'isPublic'>[] {\n    const name = className.toLowerCase();\n    \n    if (name.includes('yoga')) {\n      return [\n        { name: \"Child's Pose\", description: \"Restorative yoga pose for relaxation and gentle stretching\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Back, hips\", secondaryMuscles: \"Shoulders\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Wide-knee child's pose\", safetyNotes: \"Listen to your body\" },\n        { name: \"Downward Dog\", description: \"Foundational yoga pose that stretches and strengthens\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Shoulders, hamstrings\", secondaryMuscles: \"Core, calves\", category: \"flexibility\", caloriesPerMinute: 3, modifications: \"Hands on blocks\", safetyNotes: \"Distribute weight evenly\" },\n        { name: \"Warrior I\", description: \"Standing yoga pose that builds strength and stability\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Shoulders, back\", category: \"balance\", caloriesPerMinute: 3, modifications: \"Use wall for support\", safetyNotes: \"Keep front knee over ankle\" },\n        { name: \"Warrior II\", description: \"Strong standing pose that opens hips and strengthens legs\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Arms, back\", category: \"balance\", caloriesPerMinute: 4, modifications: \"Hands on hips\", safetyNotes: \"Keep torso upright\" },\n        { name: \"Tree Pose\", description: \"Standing balance pose that improves focus and stability\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Ankles\", category: \"balance\", caloriesPerMinute: 2, modifications: \"Toe on ground for balance\", safetyNotes: \"Avoid placing foot on knee\" },\n        { name: \"Cat-Cow Stretch\", description: \"Spinal mobility exercise alternating between arch and round\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Spine, core\", secondaryMuscles: \"Shoulders\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Seated version\", safetyNotes: \"Move slowly\" },\n        { name: \"Cobra Pose\", description: \"Backbend that strengthens the spine and opens the chest\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Back, core\", secondaryMuscles: \"Arms\", category: \"flexibility\", caloriesPerMinute: 3, modifications: \"Keep forearms down\", safetyNotes: \"Don't overarch\" },\n        { name: \"Triangle Pose\", description: \"Standing pose that stretches sides and strengthens legs\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Back, arms\", category: \"flexibility\", caloriesPerMinute: 3, modifications: \"Hand on shin\", safetyNotes: \"Keep both legs straight\" },\n        { name: \"Seated Forward Fold\", description: \"Calming seated pose that stretches the spine and hamstrings\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"Hamstrings, back\", secondaryMuscles: \"Calves\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Bend knees slightly\", safetyNotes: \"Don't force the stretch\" },\n        { name: \"Savasana\", description: \"Final relaxation pose for complete rest and integration\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Yoga mat\", primaryMuscles: \"None\", secondaryMuscles: \"None\", category: \"flexibility\", caloriesPerMinute: 1, modifications: \"Use props for comfort\", safetyNotes: \"Stay warm and still\" }\n      ];\n    }\n    \n    if (name.includes('hiit')) {\n      return [\n        { name: \"Burpees\", description: \"Full-body explosive movement combining squat, plank, and jump\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 12, modifications: \"Step back instead of jump\", safetyNotes: \"Land softly\" },\n        { name: \"Mountain Climbers\", description: \"High-intensity plank exercise with alternating knee drives\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Core, shoulders\", secondaryMuscles: \"Legs\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Slow tempo\", safetyNotes: \"Keep hips level\" },\n        { name: \"Jump Squats\", description: \"Explosive lower body exercise adding jump to basic squat\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Glutes, quads\", secondaryMuscles: \"Calves, core\", category: \"cardio\", caloriesPerMinute: 11, modifications: \"Regular squats\", safetyNotes: \"Land with soft knees\" },\n        { name: \"High Knees\", description: \"Running in place while lifting knees to hip level\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Glutes\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"March in place\", safetyNotes: \"Keep core engaged\" },\n        { name: \"Jumping Jacks\", description: \"Classic cardio exercise jumping feet wide with arms overhead\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Step touch\", safetyNotes: \"Land on balls of feet\" },\n        { name: \"Sprint Intervals\", description: \"Maximum effort running intervals for cardiovascular fitness\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Legs\", secondaryMuscles: \"Core, arms\", category: \"cardio\", caloriesPerMinute: 15, modifications: \"Jog in place\", safetyNotes: \"Proper warm-up essential\" },\n        { name: \"Plank Jacks\", description: \"Plank position with jumping jack leg movement\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Core, shoulders\", secondaryMuscles: \"Legs\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Step feet out\", safetyNotes: \"Maintain plank form\" },\n        { name: \"Squat Thrusts\", description: \"Dynamic movement from squat to plank and back\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Step back\", safetyNotes: \"Control the movement\" },\n        { name: \"Box Step-ups\", description: \"Explosive step-up movement for power and conditioning\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Box or step\", primaryMuscles: \"Glutes, quads\", secondaryMuscles: \"Calves, core\", category: \"cardio\", caloriesPerMinute: 7, modifications: \"Regular step-ups\", safetyNotes: \"Step down controlled\" },\n        { name: \"Battle Ropes\", description: \"Intense upper body cardio using heavy training ropes\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Battle ropes\", primaryMuscles: \"Arms, shoulders\", secondaryMuscles: \"Core, back\", category: \"cardio\", caloriesPerMinute: 13, modifications: \"Lighter ropes\", safetyNotes: \"Maintain posture\" }\n      ];\n    }\n    \n    if (name.includes('pilates')) {\n      return [\n        { name: \"The Hundred\", description: \"Classic Pilates exercise focusing on core strength and breathing\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Arms\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Bend knees\", safetyNotes: \"Keep lower back pressed down\" },\n        { name: \"Single Leg Circles\", description: \"Controlled leg circles to improve hip mobility and stability\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Mat\", primaryMuscles: \"Hip flexors\", secondaryMuscles: \"Core, glutes\", category: \"flexibility\", caloriesPerMinute: 3, modifications: \"Smaller circles\", safetyNotes: \"Keep hips stable\" },\n        { name: \"Roll Up\", description: \"Spinal articulation exercise rolling up from lying to sitting\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Hip flexors\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Use assistance\", safetyNotes: \"Move vertebra by vertebra\" },\n        { name: \"Teaser\", description: \"Advanced core exercise balancing on sit bones with straight legs\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Hip flexors\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Bent knees\", safetyNotes: \"Don't strain neck\" },\n        { name: \"Swan\", description: \"Back extension exercise strengthening posterior chain\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Back extensors\", secondaryMuscles: \"Glutes\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Hands remain down\", safetyNotes: \"Lift from back, not arms\" },\n        { name: \"Side Plank\", description: \"Lateral core strengthening exercise in side-lying position\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Obliques\", secondaryMuscles: \"Shoulders, glutes\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Knees down\", safetyNotes: \"Keep body in straight line\" },\n        { name: \"Leg Pull Front\", description: \"Plank variation with leg lifts for core and shoulder stability\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core, shoulders\", secondaryMuscles: \"Glutes\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Hold plank only\", safetyNotes: \"Don't let hips sag\" },\n        { name: \"Spine Stretch Forward\", description: \"Seated forward flexion for spinal mobility and hamstring stretch\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Mat\", primaryMuscles: \"Spine\", secondaryMuscles: \"Hamstrings\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Sit on cushion\", safetyNotes: \"Round spine sequentially\" },\n        { name: \"Double Leg Stretch\", description: \"Core exercise with coordinated arm and leg movements\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Arms, legs\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Keep head down\", safetyNotes: \"Don't let back arch\" },\n        { name: \"Corkscrew\", description: \"Advanced exercise combining core strength with spinal rotation\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Hip flexors\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Smaller circles\", safetyNotes: \"Control the movement\" }\n      ];\n    }\n    \n    if (name.includes('crossfit')) {\n      return [\n        { name: \"Wall Balls\", description: \"Functional movement throwing medicine ball to target on wall\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Medicine ball\", primaryMuscles: \"Legs, shoulders\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 10, modifications: \"Lighter ball\", safetyNotes: \"Full squat depth\" },\n        { name: \"Box Jumps\", description: \"Explosive jump onto elevated platform for power development\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Plyo box\", primaryMuscles: \"Glutes, quads\", secondaryMuscles: \"Calves\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"Step-ups\", safetyNotes: \"Land softly, step down\" },\n        { name: \"Kettlebell Swings\", description: \"Hip-hinge movement generating power through posterior chain\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Kettlebell\", primaryMuscles: \"Glutes, hamstrings\", secondaryMuscles: \"Core, shoulders\", category: \"strength\", caloriesPerMinute: 8, modifications: \"Lighter weight\", safetyNotes: \"Drive with hips\" },\n        { name: \"Push Press\", description: \"Overhead pressing movement using leg drive for assistance\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Barbell or dumbbells\", primaryMuscles: \"Shoulders\", secondaryMuscles: \"Legs, core\", category: \"strength\", caloriesPerMinute: 6, modifications: \"Lighter weight\", safetyNotes: \"Keep core tight\" },\n        { name: \"Pull-ups\", description: \"Upper body pulling exercise for back and arm strength\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Pull-up bar\", primaryMuscles: \"Back, arms\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 7, modifications: \"Assisted pull-ups\", safetyNotes: \"Full range of motion\" },\n        { name: \"Thrusters\", description: \"Combination front squat and overhead press movement\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Barbell or dumbbells\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 11, modifications: \"Lighter weight\", safetyNotes: \"Keep chest up\" },\n        { name: \"Double Unders\", description: \"Jump rope technique passing rope twice per jump\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Jump rope\", primaryMuscles: \"Calves\", secondaryMuscles: \"Core, shoulders\", category: \"cardio\", caloriesPerMinute: 12, modifications: \"Single unders\", safetyNotes: \"Stay on balls of feet\" },\n        { name: \"Deadlifts\", description: \"Fundamental hip-hinge movement lifting weight from ground\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Barbell\", primaryMuscles: \"Hamstrings, glutes\", secondaryMuscles: \"Back, core\", category: \"strength\", caloriesPerMinute: 6, modifications: \"Lighter weight\", safetyNotes: \"Keep back straight\" },\n        { name: \"Rowing\", description: \"Full-body cardio exercise using rowing machine\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Rowing machine\", primaryMuscles: \"Back, legs\", secondaryMuscles: \"Core, arms\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Slower pace\", safetyNotes: \"Drive with legs first\" },\n        { name: \"Handstand Push-ups\", description: \"Inverted pressing movement for shoulder and core strength\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Wall\", primaryMuscles: \"Shoulders\", secondaryMuscles: \"Core, triceps\", category: \"strength\", caloriesPerMinute: 8, modifications: \"Pike push-ups\", safetyNotes: \"Build up gradually\" }\n      ];\n    }\n    \n    if (name.includes('strength')) {\n      return [\n        { name: \"Squats\", description: \"Fundamental lower body exercise targeting glutes and quadriceps\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Glutes, quadriceps\", secondaryMuscles: \"Core, calves\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Chair-assisted\", safetyNotes: \"Keep knees behind toes\" },\n        { name: \"Push-ups\", description: \"Upper body exercise targeting chest, shoulders, and triceps\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Chest, shoulders, triceps\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 6, modifications: \"Knee push-ups\", safetyNotes: \"Maintain straight line\" },\n        { name: \"Lunges\", description: \"Unilateral leg exercise for strength and balance\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Glutes, quadriceps\", secondaryMuscles: \"Hamstrings, calves\", category: \"strength\", caloriesPerMinute: 6, modifications: \"Stationary lunges\", safetyNotes: \"Keep front knee over ankle\" },\n        { name: \"Plank\", description: \"Isometric core exercise in push-up position\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Core\", secondaryMuscles: \"Shoulders, glutes\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Knee plank\", safetyNotes: \"Keep body straight\" },\n        { name: \"Dumbbell Rows\", description: \"Back strengthening exercise using pulling motion\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Dumbbells\", primaryMuscles: \"Back\", secondaryMuscles: \"Biceps, core\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Lighter weights\", safetyNotes: \"Keep back straight\" },\n        { name: \"Overhead Press\", description: \"Shoulder exercise pressing weight above head\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Dumbbells\", primaryMuscles: \"Shoulders\", secondaryMuscles: \"Core, triceps\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Seated press\", safetyNotes: \"Don't arch back\" },\n        { name: \"Romanian Deadlifts\", description: \"Hip-hinge movement targeting posterior chain\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Dumbbells\", primaryMuscles: \"Hamstrings, glutes\", secondaryMuscles: \"Back, core\", category: \"strength\", caloriesPerMinute: 6, modifications: \"Bodyweight\", safetyNotes: \"Keep chest up\" },\n        { name: \"Bicep Curls\", description: \"Isolation exercise for bicep muscle development\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Dumbbells\", primaryMuscles: \"Biceps\", secondaryMuscles: \"Forearms\", category: \"strength\", caloriesPerMinute: 3, modifications: \"Lighter weights\", safetyNotes: \"Control the negative\" },\n        { name: \"Tricep Dips\", description: \"Bodyweight exercise targeting tricep muscles\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Chair or bench\", primaryMuscles: \"Triceps\", secondaryMuscles: \"Shoulders\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Feet on ground\", safetyNotes: \"Don't go too low\" },\n        { name: \"Calf Raises\", description: \"Lower leg exercise for calf muscle development\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Calves\", secondaryMuscles: \"Ankles\", category: \"strength\", caloriesPerMinute: 3, modifications: \"Hold wall\", safetyNotes: \"Full range of motion\" }\n      ];\n    }\n    \n    if (name.includes('barre')) {\n      return [\n        { name: \"Pliés\", description: \"Ballet-inspired squat variation with turned-out legs\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Glutes, inner thighs\", secondaryMuscles: \"Calves\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Hold barre\", safetyNotes: \"Keep knees over toes\" },\n        { name: \"Relevés\", description: \"Calf raises in ballet first position for strength and grace\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Calves\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 3, modifications: \"Hold support\", safetyNotes: \"Rise slowly\" },\n        { name: \"Leg Lifts at Barre\", description: \"Standing leg extensions for glute and hip strength\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Barre or chair\", primaryMuscles: \"Glutes, hip flexors\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Lower height\", safetyNotes: \"Keep hips square\" },\n        { name: \"Thigh Dancing\", description: \"Small isometric movements in deep plié position\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Quadriceps, glutes\", secondaryMuscles: \"Inner thighs\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Less depth\", safetyNotes: \"Don't bounce\" },\n        { name: \"Seat Work\", description: \"Glute-focused exercises in all-fours position\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Mat\", primaryMuscles: \"Glutes\", secondaryMuscles: \"Hamstrings, core\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Lower range\", safetyNotes: \"Keep hips level\" },\n        { name: \"Port de Bras\", description: \"Flowing arm movements for upper body and posture\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Light weights\", primaryMuscles: \"Arms, shoulders\", secondaryMuscles: \"Core, back\", category: \"strength\", caloriesPerMinute: 3, modifications: \"No weights\", safetyNotes: \"Move with control\" },\n        { name: \"Pretzel\", description: \"Targeted glute exercise in side-lying position\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Mat\", primaryMuscles: \"Glutes\", secondaryMuscles: \"Hip flexors, core\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Smaller movements\", safetyNotes: \"Don't roll forward\" },\n        { name: \"Core Burner\", description: \"Intense abdominal sequence with small movements\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Mat\", primaryMuscles: \"Core\", secondaryMuscles: \"Hip flexors\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Larger movements\", safetyNotes: \"Don't pull neck\" },\n        { name: \"Balance Challenge\", description: \"Single-leg exercises for stability and strength\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Ankles\", category: \"balance\", caloriesPerMinute: 4, modifications: \"Hold support\", safetyNotes: \"Engage core\" },\n        { name: \"Final Stretch\", description: \"Flexibility sequence to lengthen worked muscles\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Mat\", primaryMuscles: \"Full body\", secondaryMuscles: \"None\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Less depth\", safetyNotes: \"Breathe deeply\" }\n      ];\n    }\n    \n    if (name.includes('spinning') || name.includes('cycling')) {\n      return [\n        { name: \"Warm-up Ride\", description: \"Gentle cycling to prepare muscles and joints\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"Lower resistance\", safetyNotes: \"Proper bike setup essential\" },\n        { name: \"Seated Climb\", description: \"Increased resistance simulation of uphill cycling\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Glutes, quadriceps\", secondaryMuscles: \"Core, calves\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"Moderate resistance\", safetyNotes: \"Maintain cadence\" },\n        { name: \"Standing Climb\", description: \"Out-of-saddle riding for maximum power output\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Glutes, quadriceps\", secondaryMuscles: \"Core, arms\", category: \"cardio\", caloriesPerMinute: 12, modifications: \"Seated option\", safetyNotes: \"Core engagement crucial\" },\n        { name: \"Sprint Intervals\", description: \"High-intensity short bursts at maximum effort\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"Core, cardiovascular\", category: \"cardio\", caloriesPerMinute: 15, modifications: \"Longer intervals\", safetyNotes: \"Proper recovery essential\" },\n        { name: \"Jumps\", description: \"Alternating between seated and standing positions\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Arms\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Slower transitions\", safetyNotes: \"Smooth transitions\" },\n        { name: \"Isolations\", description: \"Single-leg focused work for muscle imbalance correction\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Individual leg muscles\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 7, modifications: \"Both legs\", safetyNotes: \"Equal work both sides\" },\n        { name: \"Recovery Spin\", description: \"Easy-paced cycling for active recovery\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"Cardiovascular\", category: \"cardio\", caloriesPerMinute: 5, modifications: \"Even slower\", safetyNotes: \"Focus on form\" },\n        { name: \"Tabata Cycling\", description: \"4-minute high-intensity protocol with specific timing\", difficultyLevel: \"Advanced\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"Cardiovascular\", category: \"cardio\", caloriesPerMinute: 14, modifications: \"Longer work periods\", safetyNotes: \"All-out effort required\" },\n        { name: \"Endurance Ride\", description: \"Sustained moderate effort for cardiovascular fitness\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"Core, cardiovascular\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Shorter duration\", safetyNotes: \"Pace yourself\" },\n        { name: \"Cool-down Spin\", description: \"Gentle cycling to gradually lower heart rate\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Spin bike\", primaryMuscles: \"Legs\", secondaryMuscles: \"None\", category: \"cardio\", caloriesPerMinute: 4, modifications: \"Even gentler\", safetyNotes: \"Gradual reduction\" }\n      ];\n    }\n    \n    if (name.includes('kickboxing')) {\n      return [\n        { name: \"Jab-Cross Combo\", description: \"Basic boxing combination with lead and rear hand punches\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Arms, shoulders\", secondaryMuscles: \"Core, legs\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Slower pace\", safetyNotes: \"Keep guard up\" },\n        { name: \"Front Kicks\", description: \"Straight kick using ball of foot to target\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Hip flexors\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"Knee lifts\", safetyNotes: \"Pull toes back\" },\n        { name: \"Roundhouse Kicks\", description: \"Circular kick using shin or instep\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Glutes, obliques\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Low kicks\", safetyNotes: \"Turn hips over\" },\n        { name: \"Hook Punches\", description: \"Circular punch targeting side of opponent\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Arms, shoulders\", secondaryMuscles: \"Core, obliques\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Body punches\", safetyNotes: \"Rotate from core\" },\n        { name: \"Knee Strikes\", description: \"Close-range strikes using knee joint\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Hip flexors, core\", secondaryMuscles: \"Legs, glutes\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"Standing knees\", safetyNotes: \"Drive knee up\" },\n        { name: \"Duck and Weave\", description: \"Defensive movement to avoid punches\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Back\", category: \"cardio\", caloriesPerMinute: 7, modifications: \"Slower movement\", safetyNotes: \"Keep eyes on target\" },\n        { name: \"Side Kicks\", description: \"Lateral kick using heel or blade of foot\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, obliques\", secondaryMuscles: \"Core, glutes\", category: \"cardio\", caloriesPerMinute: 9, modifications: \"Standing leg lifts\", safetyNotes: \"Turn supporting foot\" },\n        { name: \"Boxing Footwork\", description: \"Movement patterns for positioning and mobility\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, calves\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"Slower steps\", safetyNotes: \"Stay on balls of feet\" },\n        { name: \"Combination Drills\", description: \"Flowing sequences combining punches and kicks\", difficultyLevel: \"Advanced\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Cardiovascular\", category: \"cardio\", caloriesPerMinute: 11, modifications: \"Simpler combos\", safetyNotes: \"Focus on form\" },\n        { name: \"Heavy Bag Work\", description: \"Practicing techniques on heavy training bag\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Heavy bag, gloves\", primaryMuscles: \"Full body\", secondaryMuscles: \"Cardiovascular\", category: \"cardio\", caloriesPerMinute: 10, modifications: \"Pad work\", safetyNotes: \"Proper hand protection\" }\n      ];\n    }\n    \n    if (name.includes('zumba')) {\n      return [\n        { name: \"Salsa Steps\", description: \"Basic salsa footwork adapted for fitness\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, calves\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 7, modifications: \"Step touch\", safetyNotes: \"Stay light on feet\" },\n        { name: \"Merengue March\", description: \"Simple marching steps with hip movement\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, glutes\", secondaryMuscles: \"Core, hips\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"In place\", safetyNotes: \"Let hips move naturally\" },\n        { name: \"Reggaeton Bounce\", description: \"Urban dance move with knee bouncing\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, glutes\", secondaryMuscles: \"Core, hips\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Smaller bounces\", safetyNotes: \"Bend knees\" },\n        { name: \"Cumbia Steps\", description: \"Colombian dance with side-to-side movement\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, hips\", secondaryMuscles: \"Core, arms\", category: \"cardio\", caloriesPerMinute: 7, modifications: \"Step touch\", safetyNotes: \"Follow the rhythm\" },\n        { name: \"Belly Dance Moves\", description: \"Isolated hip and torso movements\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Core, hips\", secondaryMuscles: \"Back, glutes\", category: \"cardio\", caloriesPerMinute: 5, modifications: \"Smaller movements\", safetyNotes: \"Focus on isolation\" },\n        { name: \"Cha Cha Cha\", description: \"Triple step ballroom dance movement\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, calves\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"Walking steps\", safetyNotes: \"Quick-quick-slow rhythm\" },\n        { name: \"Bollywood Arms\", description: \"Expressive arm movements from Indian dance\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Arms, shoulders\", secondaryMuscles: \"Core, back\", category: \"cardio\", caloriesPerMinute: 4, modifications: \"Smaller range\", safetyNotes: \"Graceful movements\" },\n        { name: \"Samba Bounce\", description: \"Brazilian dance with bouncing knee action\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Legs, glutes\", secondaryMuscles: \"Core, calves\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Less bounce\", safetyNotes: \"Continuous knee bend\" },\n        { name: \"Hip Hop Moves\", description: \"Urban street dance with attitude\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Simpler moves\", safetyNotes: \"Express yourself\" },\n        { name: \"Cool Down Stretch\", description: \"Gentle stretching with Latin music\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"None\", category: \"flexibility\", caloriesPerMinute: 3, modifications: \"Deeper stretches\", safetyNotes: \"Breathe and relax\" }\n      ];\n    }\n    \n    if (name.includes('aqua') || name.includes('water')) {\n      return [\n        { name: \"Water Walking\", description: \"Forward and backward walking in chest-deep water\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Pool\", primaryMuscles: \"Legs\", secondaryMuscles: \"Core, arms\", category: \"cardio\", caloriesPerMinute: 5, modifications: \"Shallow water\", safetyNotes: \"Use water buoyancy\" },\n        { name: \"Aqua Jogging\", description: \"Running motion in deep water with flotation\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Pool, flotation belt\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Arms\", category: \"cardio\", caloriesPerMinute: 8, modifications: \"Slower pace\", safetyNotes: \"Maintain good form\" },\n        { name: \"Water Jumping Jacks\", description: \"Classic exercise adapted for water resistance\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Pool\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"Arms only\", safetyNotes: \"Use water resistance\" },\n        { name: \"Pool Push-ups\", description: \"Push-ups using pool edge for upper body strength\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Pool edge\", primaryMuscles: \"Chest, arms\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Inclined position\", safetyNotes: \"Secure hand placement\" },\n        { name: \"Water Kicks\", description: \"Leg kicks in various directions for strength\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Pool\", primaryMuscles: \"Legs, glutes\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Hold pool edge\", safetyNotes: \"Controlled movements\" },\n        { name: \"Cross-Country Skiing\", description: \"Skiing motion adapted for water exercise\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Pool\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 7, modifications: \"Smaller range\", safetyNotes: \"Opposite arm/leg\" },\n        { name: \"Water Squats\", description: \"Squat exercise with water resistance and buoyancy\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Pool\", primaryMuscles: \"Glutes, legs\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 5, modifications: \"Shallow squats\", safetyNotes: \"Full range of motion\" },\n        { name: \"Arm Circles\", description: \"Large arm circles against water resistance\", difficultyLevel: \"Beginner\", equipmentNeeded: \"Pool\", primaryMuscles: \"Shoulders, arms\", secondaryMuscles: \"Core\", category: \"strength\", caloriesPerMinute: 3, modifications: \"Smaller circles\", safetyNotes: \"Both directions\" },\n        { name: \"Flutter Kicks\", description: \"Rapid alternating leg kicks holding pool edge\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Pool edge\", primaryMuscles: \"Legs, core\", secondaryMuscles: \"Hip flexors\", category: \"cardio\", caloriesPerMinute: 6, modifications: \"Slower kicks\", safetyNotes: \"Keep legs straight\" },\n        { name: \"Water Planks\", description: \"Plank position using water buoyancy and noodles\", difficultyLevel: \"Intermediate\", equipmentNeeded: \"Pool noodles\", primaryMuscles: \"Core\", secondaryMuscles: \"Shoulders\", category: \"strength\", caloriesPerMinute: 4, modifications: \"Shorter holds\", safetyNotes: \"Maintain straight line\" }\n      ];\n    }\n    \n    // Default exercises for any other class type  \n    return [\n      { name: \"Basic Warm-up\", description: \"Light movement to prepare the body for exercise\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"cardio\", caloriesPerMinute: 3, modifications: \"Adjust intensity as needed\", safetyNotes: \"Start slowly\" },\n      { name: \"Cool-down Stretch\", description: \"Gentle stretching to help muscles recover\", difficultyLevel: \"Beginner\", equipmentNeeded: \"None\", primaryMuscles: \"Full body\", secondaryMuscles: \"Core\", category: \"flexibility\", caloriesPerMinute: 2, modifications: \"Hold stretches as comfortable\", safetyNotes: \"Never bounce while stretching\" }\n    ];\n  }\n\n  // Exercise operations\n  async getExercises(filters?: {\n    search?: string;\n    category?: string;\n    difficulty?: string;\n    equipment?: string;\n    classType?: string;\n    userId?: string;\n  }): Promise<(Exercise & { classType?: ClassType })[]> {\n    // Use leftJoin to include exercises with or without class types\n    let query = db.select({\n      exercise: exercises,\n      classType: classTypes\n    }).from(exercises).leftJoin(classTypes, eq(exercises.classTypeId, classTypes.id));\n    \n    const filterConditions = [];\n    \n    // Build filter conditions\n    if (filters?.search && filters.search.trim() !== '') {\n      filterConditions.push(ilike(exercises.name, `%${filters.search}%`));\n    }\n    if (filters?.category && filters.category !== 'all') {\n      filterConditions.push(eq(exercises.category, filters.category as any));\n    }\n    if (filters?.difficulty && filters.difficulty !== 'all') {\n      filterConditions.push(eq(exercises.difficultyLevel, filters.difficulty as any));\n    }\n    if (filters?.equipment && filters.equipment !== 'all') {\n      if (filters.equipment === 'No Equipment') {\n        filterConditions.push(\n          sql`(${exercises.equipmentNeeded} IS NULL OR ${exercises.equipmentNeeded} = '' OR ${exercises.equipmentNeeded} = 'None')`\n        );\n      } else {\n        filterConditions.push(ilike(exercises.equipmentNeeded, `%${filters.equipment}%`));\n      }\n    }\n    if (filters?.classType && filters.classType !== 'all') {\n      if (filters.classType === 'none') {\n        filterConditions.push(sql`${exercises.classTypeId} IS NULL`);\n      } else {\n        filterConditions.push(eq(exercises.classTypeId, filters.classType));\n      }\n    }\n\n    // Combine visibility and filter conditions properly\n    const visibilityCondition = filters?.userId \n      ? sql`(${exercises.isPublic} = true OR ${exercises.createdByUserId} = ${filters.userId})`\n      : eq(exercises.isPublic, true);\n\n    const finalCondition = filterConditions.length > 0\n      ? and(visibilityCondition, and(...filterConditions))\n      : visibilityCondition;\n    \n    const results = await query.where(finalCondition).orderBy(exercises.name);\n    \n    // Transform the results to match expected format\n    return results.map(result => ({\n      ...result.exercise,\n      classType: result.classType || undefined\n    }));\n  }\n\n  async getExercise(id: string): Promise<Exercise | undefined> {\n    const [exercise] = await db.select().from(exercises).where(eq(exercises.id, id));\n    return exercise;\n  }\n\n  async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    const [newExercise] = await db.insert(exercises).values(exercise).returning();\n    return newExercise;\n  }\n\n  async updateExercise(id: string, exercise: Partial<InsertExercise>): Promise<Exercise> {\n    const [updated] = await db\n      .update(exercises)\n      .set(exercise)\n      .where(eq(exercises.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteExercise(id: string): Promise<void> {\n    await db.delete(exercises).where(eq(exercises.id, id));\n  }\n\n  // Routine operations\n  async getRoutines(userId: string): Promise<(Routine & { classType?: ClassType; exerciseCount: number })[]> {\n    const result = await db\n      .select({\n        routine: routines,\n        classType: classTypes,\n        exerciseCount: sql<number>`COUNT(${routineExercises.id})::int`,\n      })\n      .from(routines)\n      .leftJoin(classTypes, eq(routines.classTypeId, classTypes.id))\n      .leftJoin(routineExercises, eq(routines.id, routineExercises.routineId))\n      .where(eq(routines.createdByUserId, userId))\n      .groupBy(routines.id, classTypes.id)\n      .orderBy(desc(routines.createdAt));\n\n    return result.map(row => ({\n      ...row.routine,\n      classType: row.classType || undefined,\n      exerciseCount: row.exerciseCount,\n    }));\n  }\n\n  async getRoutine(id: string): Promise<Routine | undefined> {\n    const [routine] = await db.select().from(routines).where(eq(routines.id, id));\n    return routine;\n  }\n\n  async getRoutineWithExercises(id: string): Promise<(Routine & { \n    classType?: ClassType; \n    exercises: (RoutineExercise & { exercise: Exercise })[] \n  }) | undefined> {\n    const [routine] = await db\n      .select({\n        routine: routines,\n        classType: classTypes,\n      })\n      .from(routines)\n      .leftJoin(classTypes, eq(routines.classTypeId, classTypes.id))\n      .where(eq(routines.id, id));\n\n    if (!routine) return undefined;\n\n    const exerciseResults = await db\n      .select({\n        routineExercise: routineExercises,\n        exercise: exercises,\n      })\n      .from(routineExercises)\n      .innerJoin(exercises, eq(routineExercises.exerciseId, exercises.id))\n      .where(eq(routineExercises.routineId, id))\n      .orderBy(routineExercises.orderIndex);\n\n    return {\n      ...routine.routine,\n      classType: routine.classType || undefined,\n      exercises: exerciseResults.map(row => ({\n        ...row.routineExercise,\n        exercise: row.exercise,\n      })),\n    };\n  }\n\n  async createRoutine(routine: InsertRoutine): Promise<Routine> {\n    const [newRoutine] = await db.insert(routines).values(routine).returning();\n    return newRoutine;\n  }\n\n  async updateRoutine(id: string, routine: Partial<InsertRoutine>): Promise<Routine> {\n    const [updated] = await db\n      .update(routines)\n      .set({ ...routine, updatedAt: new Date() })\n      .where(eq(routines.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteRoutine(id: string): Promise<void> {\n    await db.delete(routines).where(eq(routines.id, id));\n  }\n\n  async duplicateRoutine(id: string, newName: string, userId: string): Promise<Routine> {\n    const original = await this.getRoutineWithExercises(id);\n    if (!original) throw new Error(\"Routine not found\");\n\n    const [newRoutine] = await db.insert(routines).values({\n      name: newName,\n      description: original.description,\n      classTypeId: original.classTypeId,\n      createdByUserId: userId,\n      isPublic: false,\n      totalDuration: original.totalDuration,\n    }).returning();\n\n    // Copy exercises\n    if (original.exercises.length > 0) {\n      await db.insert(routineExercises).values(\n        original.exercises.map(ex => ({\n          routineId: newRoutine.id,\n          exerciseId: ex.exerciseId,\n          orderIndex: ex.orderIndex,\n          durationSeconds: ex.durationSeconds,\n          repetitions: ex.repetitions,\n          sets: ex.sets,\n          restSeconds: ex.restSeconds,\n          musicTitle: ex.musicTitle,\n          notes: ex.notes,\n        }))\n      );\n    }\n\n    return newRoutine;\n  }\n\n  // Routine Exercise operations\n  async getRoutineExercises(routineId: string): Promise<(RoutineExercise & { exercise: Exercise })[]> {\n    const results = await db\n      .select({\n        routineExercise: routineExercises,\n        exercise: exercises,\n      })\n      .from(routineExercises)\n      .innerJoin(exercises, eq(routineExercises.exerciseId, exercises.id))\n      .where(eq(routineExercises.routineId, routineId))\n      .orderBy(routineExercises.orderIndex);\n\n    return results.map(row => ({\n      ...row.routineExercise,\n      exercise: row.exercise,\n    }));\n  }\n\n  async addExerciseToRoutine(routineExercise: InsertRoutineExercise): Promise<RoutineExercise> {\n    const [newRoutineExercise] = await db.insert(routineExercises).values(routineExercise).returning();\n    \n    // Update routine total duration\n    await this.updateRoutineDuration(routineExercise.routineId);\n    \n    return newRoutineExercise;\n  }\n\n  async updateRoutineExercise(id: string, routineExercise: Partial<InsertRoutineExercise>): Promise<RoutineExercise> {\n    const [updated] = await db\n      .update(routineExercises)\n      .set(routineExercise)\n      .where(eq(routineExercises.id, id))\n      .returning();\n\n    // Update routine total duration\n    if (updated) {\n      await this.updateRoutineDuration(updated.routineId);\n    }\n\n    return updated;\n  }\n\n  async removeExerciseFromRoutine(id: string): Promise<void> {\n    const [removed] = await db.delete(routineExercises).where(eq(routineExercises.id, id)).returning();\n    \n    if (removed) {\n      await this.updateRoutineDuration(removed.routineId);\n    }\n  }\n\n  async reorderRoutineExercises(routineId: string, exerciseIds: string[]): Promise<void> {\n    for (let i = 0; i < exerciseIds.length; i++) {\n      await db\n        .update(routineExercises)\n        .set({ orderIndex: i })\n        .where(eq(routineExercises.id, exerciseIds[i]));\n    }\n  }\n\n  private async updateRoutineDuration(routineId: string): Promise<void> {\n    const exercises = await db\n      .select({ durationSeconds: routineExercises.durationSeconds, restSeconds: routineExercises.restSeconds })\n      .from(routineExercises)\n      .where(eq(routineExercises.routineId, routineId));\n\n    const totalDuration = exercises.reduce((total, ex) => {\n      return total + (ex.durationSeconds || 0) + (ex.restSeconds || 0);\n    }, 0);\n\n    await db\n      .update(routines)\n      .set({ totalDuration, updatedAt: new Date() })\n      .where(eq(routines.id, routineId));\n  }\n\n  // Calendar operations\n  async getCalendarEvents(userId: string, startDate?: Date, endDate?: Date): Promise<(CalendarEvent & { classType?: ClassType; routine?: Routine })[]> {\n    const conditions = [eq(calendarEvents.userId, userId)];\n    \n    if (startDate && endDate) {\n      conditions.push(sql`${calendarEvents.startDatetime} >= ${startDate}`);\n      conditions.push(sql`${calendarEvents.endDatetime} <= ${endDate}`);\n    }\n    \n    const results = await db\n      .select({\n        event: calendarEvents,\n        classType: classTypes,\n        routine: routines,\n      })\n      .from(calendarEvents)\n      .leftJoin(classTypes, eq(calendarEvents.classTypeId, classTypes.id))\n      .leftJoin(routines, eq(calendarEvents.routineId, routines.id))\n      .where(and(...conditions))\n      .orderBy(calendarEvents.startDatetime);\n\n    return results.map(row => ({\n      ...row.event,\n      classType: row.classType || undefined,\n      routine: row.routine || undefined,\n    }));\n  }\n\n  async createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [newEvent] = await db.insert(calendarEvents).values(event).returning();\n    return newEvent;\n  }\n\n  async updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent> {\n    const [updated] = await db\n      .update(calendarEvents)\n      .set(event)\n      .where(eq(calendarEvents.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<void> {\n    await db.delete(calendarEvents).where(eq(calendarEvents.id, id));\n  }\n\n  // Community operations\n  async getCommunityRoutines(filters?: { search?: string; classType?: string }): Promise<(Routine & { \n    classType?: ClassType; \n    createdBy: User;\n    exerciseCount: number \n  })[]> {\n    const conditions = [eq(routines.isPublic, true)];\n\n    if (filters?.search) {\n      conditions.push(ilike(routines.name, `%${filters.search}%`));\n    }\n    if (filters?.classType) {\n      conditions.push(eq(routines.classTypeId, filters.classType));\n    }\n\n    const results = await db\n      .select({\n        routine: routines,\n        classType: classTypes,\n        createdBy: users,\n        exerciseCount: sql<number>`COUNT(${routineExercises.id})::int`,\n      })\n      .from(routines)\n      .leftJoin(classTypes, eq(routines.classTypeId, classTypes.id))\n      .innerJoin(users, eq(routines.createdByUserId, users.id))\n      .leftJoin(routineExercises, eq(routines.id, routineExercises.routineId))\n      .where(and(...conditions))\n      .groupBy(routines.id, classTypes.id, users.id)\n      .orderBy(desc(routines.createdAt));\n\n    return results.map(row => ({\n      ...row.routine,\n      classType: row.classType || undefined,\n      createdBy: row.createdBy,\n      exerciseCount: row.exerciseCount,\n    }));\n  }\n\n  async saveRoutine(userId: string, routineId: string): Promise<UserSavedRoutine> {\n    const [saved] = await db.insert(userSavedRoutines).values({\n      userId,\n      routineId,\n    }).returning();\n    return saved;\n  }\n\n  async unsaveRoutine(userId: string, routineId: string): Promise<void> {\n    await db.delete(userSavedRoutines).where(\n      and(\n        eq(userSavedRoutines.userId, userId),\n        eq(userSavedRoutines.routineId, routineId)\n      )\n    );\n  }\n\n  async getUserSavedRoutines(userId: string): Promise<(UserSavedRoutine & { routine: Routine & { classType?: ClassType } })[]> {\n    const results = await db\n      .select({\n        saved: userSavedRoutines,\n        routine: routines,\n        classType: classTypes,\n      })\n      .from(userSavedRoutines)\n      .innerJoin(routines, eq(userSavedRoutines.routineId, routines.id))\n      .leftJoin(classTypes, eq(routines.classTypeId, classTypes.id))\n      .where(eq(userSavedRoutines.userId, userId))\n      .orderBy(desc(userSavedRoutines.savedAt));\n\n    return results.map(row => ({\n      ...row.saved,\n      routine: {\n        ...row.routine,\n        classType: row.classType || undefined,\n      },\n    }));\n  }\n\n  // Dashboard stats\n  async getUserStats(userId: string): Promise<{\n    totalRoutines: number;\n    totalExercises: number;\n    weeklyClasses: number;\n    avgDuration: number;\n    classTypes: number;\n  }> {\n    const [routineStats] = await db\n      .select({\n        totalRoutines: sql<number>`COUNT(${routines.id})::int`,\n        avgDuration: sql<number>`COALESCE(AVG(${routines.totalDuration}), 0)::int`,\n      })\n      .from(routines)\n      .where(eq(routines.createdByUserId, userId));\n\n    const [exerciseStats] = await db\n      .select({\n        totalExercises: sql<number>`COUNT(${exercises.id})::int`,\n      })\n      .from(exercises)\n      .where(eq(exercises.createdByUserId, userId));\n\n    const [classTypeStats] = await db\n      .select({\n        classTypes: sql<number>`COUNT(${classTypes.id})::int`,\n      })\n      .from(classTypes)\n      .where(eq(classTypes.createdByUserId, userId));\n\n    const weekStart = new Date();\n    weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n    weekStart.setHours(0, 0, 0, 0);\n\n    const weekEnd = new Date(weekStart);\n    weekEnd.setDate(weekEnd.getDate() + 7);\n\n    const [weeklyStats] = await db\n      .select({\n        weeklyClasses: sql<number>`COUNT(${calendarEvents.id})::int`,\n      })\n      .from(calendarEvents)\n      .where(\n        and(\n          eq(calendarEvents.userId, userId),\n          sql`${calendarEvents.startDatetime} >= ${weekStart}`,\n          sql`${calendarEvents.startDatetime} < ${weekEnd}`\n        )\n      );\n\n    return {\n      totalRoutines: routineStats?.totalRoutines || 0,\n      totalExercises: exerciseStats?.totalExercises || 0,\n      weeklyClasses: weeklyStats?.weeklyClasses || 0,\n      avgDuration: Math.round((routineStats?.avgDuration || 0) / 60), // Convert to minutes\n      classTypes: classTypeStats?.classTypes || 0,\n    };\n  }\n\n  async getAnalyticsData(userId: string): Promise<{\n    weeklyActivity: Array<{ week: string; routines: number; classes: number }>;\n    popularExercises: Array<{ name: string; count: number; category: string }>;\n    classTypeDistribution: Array<{ name: string; count: number; percentage: number }>;\n    monthlyTrends: Array<{ month: string; totalMinutes: number; avgDuration: number }>;\n  }> {\n    // Weekly Activity for last 8 weeks\n    const weeklyActivity = [];\n    for (let i = 7; i >= 0; i--) {\n      const weekStart = new Date();\n      weekStart.setDate(weekStart.getDate() - (weekStart.getDay() + i * 7));\n      weekStart.setHours(0, 0, 0, 0);\n      \n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 7);\n\n      const [routineCount] = await db\n        .select({\n          count: sql<number>`COUNT(${routines.id})::int`,\n        })\n        .from(routines)\n        .where(\n          and(\n            eq(routines.createdByUserId, userId),\n            sql`${routines.createdAt} >= ${weekStart}`,\n            sql`${routines.createdAt} < ${weekEnd}`\n          )\n        );\n\n      const [classCount] = await db\n        .select({\n          count: sql<number>`COUNT(${calendarEvents.id})::int`,\n        })\n        .from(calendarEvents)\n        .where(\n          and(\n            eq(calendarEvents.userId, userId),\n            sql`${calendarEvents.startDatetime} >= ${weekStart}`,\n            sql`${calendarEvents.startDatetime} < ${weekEnd}`\n          )\n        );\n\n      weeklyActivity.push({\n        week: weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        routines: routineCount?.count || 0,\n        classes: classCount?.count || 0,\n      });\n    }\n\n    // Popular Exercises (most used in routines)\n    const popularExercises = await db\n      .select({\n        name: exercises.name,\n        count: sql<number>`COUNT(${routineExercises.id})::int`,\n        category: exercises.category,\n      })\n      .from(routineExercises)\n      .innerJoin(exercises, eq(routineExercises.exerciseId, exercises.id))\n      .innerJoin(routines, eq(routineExercises.routineId, routines.id))\n      .where(eq(routines.createdByUserId, userId))\n      .groupBy(exercises.id, exercises.name, exercises.category)\n      .orderBy(sql`COUNT(${routineExercises.id}) DESC`)\n      .limit(10);\n\n    // Class Type Distribution\n    const classTypeData = await db\n      .select({\n        name: sql<string>`COALESCE(${classTypes.name}, 'No Class Type')`,\n        count: sql<number>`COUNT(${routines.id})::int`,\n      })\n      .from(routines)\n      .leftJoin(classTypes, eq(routines.classTypeId, classTypes.id))\n      .where(eq(routines.createdByUserId, userId))\n      .groupBy(classTypes.id, classTypes.name);\n\n    const totalClassTypeRoutines = classTypeData.reduce((sum, item) => sum + item.count, 0);\n    const classTypeDistribution = classTypeData.map(item => ({\n      name: item.name || 'No Class Type',\n      count: item.count,\n      percentage: totalClassTypeRoutines > 0 ? Math.round((item.count / totalClassTypeRoutines) * 100) : 0,\n    }));\n\n    // Monthly Trends for last 6 months\n    const monthlyTrends = [];\n    for (let i = 5; i >= 0; i--) {\n      const monthStart = new Date();\n      monthStart.setMonth(monthStart.getMonth() - i);\n      monthStart.setDate(1);\n      monthStart.setHours(0, 0, 0, 0);\n      \n      const monthEnd = new Date(monthStart);\n      monthEnd.setMonth(monthEnd.getMonth() + 1);\n\n      const [monthlyData] = await db\n        .select({\n          totalMinutes: sql<number>`COALESCE(SUM(${routines.totalDuration}), 0)::int`,\n          avgDuration: sql<number>`COALESCE(AVG(${routines.totalDuration}), 0)::int`,\n        })\n        .from(routines)\n        .where(\n          and(\n            eq(routines.createdByUserId, userId),\n            sql`${routines.createdAt} >= ${monthStart}`,\n            sql`${routines.createdAt} < ${monthEnd}`\n          )\n        );\n\n      monthlyTrends.push({\n        month: monthStart.toLocaleDateString('en-US', { month: 'short' }),\n        totalMinutes: Math.round((monthlyData?.totalMinutes || 0) / 60), // Convert to minutes\n        avgDuration: Math.round((monthlyData?.avgDuration || 0) / 60), // Convert to minutes\n      });\n    }\n\n    return {\n      weeklyActivity,\n      popularExercises: popularExercises.map(ex => ({\n        name: ex.name,\n        count: ex.count,\n        category: ex.category || 'General'\n      })),\n      classTypeDistribution,\n      monthlyTrends,\n    };\n  }\n\n  // Client Management operations\n  async getClients(trainerId: string): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(and(eq(clients.trainerId, trainerId), eq(clients.isActive, true)))\n      .orderBy(clients.firstName, clients.lastName);\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const [newClient] = await db.insert(clients).values(client).returning();\n    return newClient;\n  }\n\n  async updateClient(id: string, client: Partial<InsertClient>): Promise<Client> {\n    const [updated] = await db\n      .update(clients)\n      .set({\n        ...client,\n        updatedAt: new Date(),\n      })\n      .where(eq(clients.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    // Soft delete by setting isActive to false\n    await db\n      .update(clients)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(clients.id, id));\n  }\n\n  // Client Notes operations\n  async getClientNotes(clientId: string): Promise<ClientNote[]> {\n    return await db\n      .select()\n      .from(clientNotes)\n      .where(eq(clientNotes.clientId, clientId))\n      .orderBy(desc(clientNotes.createdAt));\n  }\n\n  async createClientNote(note: InsertClientNote): Promise<ClientNote> {\n    const [newNote] = await db.insert(clientNotes).values(note).returning();\n    return newNote;\n  }\n\n  async deleteClientNote(id: string): Promise<void> {\n    await db.delete(clientNotes).where(eq(clientNotes.id, id));\n  }\n\n  // Attendance operations\n  async getAttendanceForEvent(eventId: string): Promise<(Attendance & { client: Client })[]> {\n    const results = await db\n      .select({\n        attendance: attendance,\n        client: clients,\n      })\n      .from(attendance)\n      .innerJoin(clients, eq(attendance.clientId, clients.id))\n      .where(eq(attendance.eventId, eventId))\n      .orderBy(clients.firstName, clients.lastName);\n\n    return results.map(result => ({\n      ...result.attendance,\n      client: result.client,\n    }));\n  }\n\n  async getClientAttendance(clientId: string, limit?: number): Promise<(Attendance & { event: CalendarEvent })[]> {\n    let query = db\n      .select({\n        attendance: attendance,\n        event: calendarEvents,\n      })\n      .from(attendance)\n      .innerJoin(calendarEvents, eq(attendance.eventId, calendarEvents.id))\n      .where(eq(attendance.clientId, clientId))\n      .orderBy(desc(calendarEvents.startDatetime));\n\n    if (limit) {\n      query = query.limit(limit) as any;\n    }\n\n    const results = await query;\n    return results.map(result => ({\n      ...result.attendance,\n      event: result.event,\n    }));\n  }\n\n  async createAttendance(attendanceData: InsertAttendance): Promise<Attendance> {\n    const [newAttendance] = await db.insert(attendance).values(attendanceData).returning();\n    return newAttendance;\n  }\n\n  async updateAttendance(id: string, attendanceData: Partial<InsertAttendance>): Promise<Attendance> {\n    const [updated] = await db\n      .update(attendance)\n      .set(attendanceData)\n      .where(eq(attendance.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Progress Metrics operations\n  async getClientProgress(clientId: string, exerciseId?: string): Promise<ProgressMetric[]> {\n    if (exerciseId) {\n      return await db\n        .select()\n        .from(progressMetrics)\n        .where(and(eq(progressMetrics.clientId, clientId), eq(progressMetrics.exerciseId, exerciseId)))\n        .orderBy(desc(progressMetrics.recordedAt));\n    } else {\n      return await db\n        .select()\n        .from(progressMetrics)\n        .where(eq(progressMetrics.clientId, clientId))\n        .orderBy(desc(progressMetrics.recordedAt));\n    }\n  }\n\n  async createProgressMetric(metric: InsertProgressMetric): Promise<ProgressMetric> {\n    const [newMetric] = await db.insert(progressMetrics).values(metric).returning();\n    return newMetric;\n  }\n\n  async getProgressMetricsForRoutine(clientId: string, routineId: string): Promise<ProgressMetric[]> {\n    return await db\n      .select()\n      .from(progressMetrics)\n      .where(and(eq(progressMetrics.clientId, clientId), eq(progressMetrics.routineId, routineId)))\n      .orderBy(desc(progressMetrics.recordedAt));\n  }\n\n  // Event Client Enrollment operations\n  async getEventClients(eventId: string): Promise<Client[]> {\n    const result = await db\n      .select({\n        id: clients.id,\n        firstName: clients.firstName,\n        lastName: clients.lastName,\n        email: clients.email,\n        phone: clients.phone,\n        dateOfBirth: clients.dateOfBirth,\n        fitnessLevel: clients.fitnessLevel,\n        goals: clients.goals,\n        medicalConditions: clients.medicalConditions,\n        emergencyContact: clients.emergencyContact,\n        trainerId: clients.trainerId,\n        isActive: clients.isActive,\n        createdAt: clients.createdAt,\n        updatedAt: clients.updatedAt,\n      })\n      .from(clients)\n      .innerJoin(eventClients, eq(clients.id, eventClients.clientId))\n      .where(eq(eventClients.eventId, eventId));\n    \n    return result;\n  }\n\n  async enrollClientInEvent(eventId: string, clientId: string): Promise<void> {\n    await db\n      .insert(eventClients)\n      .values({ eventId, clientId })\n      .onConflictDoNothing();\n  }\n\n  async unenrollClientFromEvent(eventId: string, clientId: string): Promise<void> {\n    await db\n      .delete(eventClients)\n      .where(and(eq(eventClients.eventId, eventId), eq(eventClients.clientId, clientId)));\n  }\n\n  async getClientEnrolledEvents(clientId: string): Promise<CalendarEvent[]> {\n    // Get event IDs that the client is enrolled in\n    const enrolledEventIds = await db\n      .select({ eventId: eventClients.eventId })\n      .from(eventClients)\n      .where(eq(eventClients.clientId, clientId));\n\n    if (enrolledEventIds.length === 0) {\n      return [];\n    }\n\n    // Get the actual events\n    const eventIds = enrolledEventIds.map(row => row.eventId);\n    const events: CalendarEvent[] = [];\n    \n    for (const eventId of eventIds) {\n      const event = await db\n        .select()\n        .from(calendarEvents)\n        .where(eq(calendarEvents.id, eventId))\n        .limit(1);\n      \n      if (event[0]) {\n        events.push(event[0]);\n      }\n    }\n\n    return events.sort((a, b) => new Date(b.startDatetime).getTime() - new Date(a.startDatetime).getTime());\n  }\n\n  // Coach Console operations\n  async getEventConsoleData(eventId: string, userId: string): Promise<any> {\n    // Get event details\n    const [event] = await db\n      .select()\n      .from(calendarEvents)\n      .where(and(eq(calendarEvents.id, eventId), eq(calendarEvents.userId, userId)));\n\n    if (!event) return null;\n\n    // Get routine with exercises if attached\n    let routine = null;\n    if (event.routineId) {\n      routine = await this.getRoutineWithExercises(event.routineId);\n    }\n\n    // Get enrolled clients\n    const enrolledClients = await this.getEventClients(eventId);\n\n    // Get attendance records for this event\n    const attendanceRecords = await this.getAttendanceForEvent(eventId);\n\n    return {\n      event,\n      routine,\n      enrolledClients,\n      attendanceRecords,\n    };\n  }\n\n  async startEventSession(eventId: string, userId: string): Promise<CalendarEvent> {\n    const [updatedEvent] = await db\n      .update(calendarEvents)\n      .set({\n        sessionStatus: \"in_progress\",\n        sessionStartedAt: new Date(),\n      })\n      .where(and(eq(calendarEvents.id, eventId), eq(calendarEvents.userId, userId)))\n      .returning();\n\n    return updatedEvent;\n  }\n\n  async completeEventSession(eventId: string, userId: string, sessionNotes?: string): Promise<any> {\n    // Update event status\n    const [updatedEvent] = await db\n      .update(calendarEvents)\n      .set({\n        sessionStatus: \"completed\",\n        sessionCompletedAt: new Date(),\n        sessionNotes: sessionNotes || null,\n      })\n      .where(and(eq(calendarEvents.id, eventId), eq(calendarEvents.userId, userId)))\n      .returning();\n\n    // Generate session summary\n    const attendanceRecords = await this.getAttendanceForEvent(eventId);\n    const enrolledClients = await this.getEventClients(eventId);\n    \n    const summary = {\n      event: updatedEvent,\n      totalEnrolled: enrolledClients.length,\n      totalAttended: attendanceRecords.filter(r => r.status === \"present\").length,\n      attendanceRate: enrolledClients.length > 0 \n        ? Math.round((attendanceRecords.filter(r => r.status === \"present\").length / enrolledClients.length) * 100) \n        : 0,\n      attendanceRecords,\n      sessionNotes: sessionNotes,\n    };\n\n    return summary;\n  }\n\n  async recordAttendance(eventId: string, clientId: string, status: string): Promise<void> {\n    // Check if attendance record already exists\n    const [existing] = await db\n      .select()\n      .from(attendance)\n      .where(and(eq(attendance.eventId, eventId), eq(attendance.clientId, clientId)));\n\n    if (existing) {\n      // Update existing record\n      await db\n        .update(attendance)\n        .set({ status, checkedInAt: new Date() })\n        .where(and(eq(attendance.eventId, eventId), eq(attendance.clientId, clientId)));\n    } else {\n      // Create new record\n      await db\n        .insert(attendance)\n        .values({\n          eventId,\n          clientId,\n          status,\n          checkedInAt: new Date(),\n        });\n    }\n  }\n\n  async recordSessionMetrics(eventId: string, metrics: any[]): Promise<void> {\n    // Insert multiple metrics in a batch\n    if (metrics.length > 0) {\n      await db.insert(progressMetrics).values(\n        metrics.map(metric => ({\n          ...metric,\n          eventId,\n          recordedAt: new Date(),\n        }))\n      );\n    }\n  }\n\n  // Program Management operations\n  async getPrograms(userId: string): Promise<(Program & { classType?: ClassType; enrollmentCount: number })[]> {\n    const result = await db\n      .select({\n        program: programs,\n        classType: classTypes,\n        enrollmentCount: sql<number>`count(${programEnrollments.id})`.as('enrollmentCount'),\n      })\n      .from(programs)\n      .leftJoin(classTypes, eq(programs.classTypeId, classTypes.id))\n      .leftJoin(programEnrollments, eq(programs.id, programEnrollments.programId))\n      .where(eq(programs.createdBy, userId))\n      .groupBy(programs.id, classTypes.id);\n\n    return result.map(row => ({\n      ...row.program,\n      classType: row.classType,\n      enrollmentCount: row.enrollmentCount,\n    }));\n  }\n\n  async getProgram(id: string): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.id, id));\n    return program;\n  }\n\n  async getProgramWithSessions(id: string): Promise<(Program & { \n    classType?: ClassType; \n    sessions: (ProgramSession & { routine?: Routine })[] \n  }) | undefined> {\n    const [program] = await db\n      .select()\n      .from(programs)\n      .leftJoin(classTypes, eq(programs.classTypeId, classTypes.id))\n      .where(eq(programs.id, id));\n\n    if (!program.programs) return undefined;\n\n    const sessions = await db\n      .select()\n      .from(programSessions)\n      .leftJoin(routines, eq(programSessions.routineId, routines.id))\n      .where(eq(programSessions.programId, id))\n      .orderBy(programSessions.weekNumber, programSessions.dayOfWeek);\n\n    return {\n      ...program.programs,\n      classType: program.class_types,\n      sessions: sessions.map(session => ({\n        ...session.program_sessions,\n        routine: session.routines,\n      })),\n    };\n  }\n\n  async createProgram(program: InsertProgram): Promise<Program> {\n    const [created] = await db.insert(programs).values(program).returning();\n    return created;\n  }\n\n  async updateProgram(id: string, program: Partial<InsertProgram>): Promise<Program> {\n    const [updated] = await db\n      .update(programs)\n      .set({ ...program, updatedAt: new Date() })\n      .where(eq(programs.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProgram(id: string): Promise<void> {\n    await db.delete(programs).where(eq(programs.id, id));\n  }\n\n  // Program Session operations\n  async getProgramSessions(programId: string): Promise<(ProgramSession & { routine?: Routine })[]> {\n    const sessions = await db\n      .select()\n      .from(programSessions)\n      .leftJoin(routines, eq(programSessions.routineId, routines.id))\n      .where(eq(programSessions.programId, programId))\n      .orderBy(programSessions.weekNumber, programSessions.dayOfWeek);\n\n    return sessions.map(session => ({\n      ...session.program_sessions,\n      routine: session.routines,\n    }));\n  }\n\n  async createProgramSession(session: InsertProgramSession): Promise<ProgramSession> {\n    const [created] = await db.insert(programSessions).values(session).returning();\n    return created;\n  }\n\n  async updateProgramSession(id: string, session: Partial<InsertProgramSession>): Promise<ProgramSession> {\n    const [updated] = await db\n      .update(programSessions)\n      .set(session)\n      .where(eq(programSessions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProgramSession(id: string): Promise<void> {\n    await db.delete(programSessions).where(eq(programSessions.id, id));\n  }\n\n  async generateScheduleForProgram(programId: string, weeks: number): Promise<CalendarEvent[]> {\n    const program = await this.getProgram(programId);\n    if (!program) throw new Error(\"Program not found\");\n\n    const sessions = await this.getProgramSessions(programId);\n    const events: CalendarEvent[] = [];\n    const startDate = new Date();\n\n    for (let week = 1; week <= weeks; week++) {\n      for (const session of sessions.filter(s => s.weekNumber === week)) {\n        const eventDate = new Date(startDate);\n        eventDate.setDate(startDate.getDate() + ((week - 1) * 7) + session.dayOfWeek);\n        \n        const event = await db.insert(calendarEvents).values({\n          title: `${program.name} - ${session.sessionName || 'Session'}`,\n          description: `Week ${week} - Auto-generated from program`,\n          startDatetime: eventDate,\n          endDatetime: new Date(eventDate.getTime() + 60 * 60 * 1000), // 1 hour default\n          userId: program.createdBy,\n          classTypeId: program.classTypeId,\n          routineId: session.routineId,\n          location: \"Studio\",\n          sessionStatus: \"scheduled\",\n        }).returning();\n\n        // Generate event targets if routine exists\n        if (session.routineId && session.baseParams) {\n          const routineExercises = await this.getRoutineExercises(session.routineId);\n          const targets = routineExercises.map(re => ({\n            eventId: event[0].id,\n            routineExerciseId: re.id,\n            targets: session.baseParams,\n            isGenerated: true,\n          }));\n          await this.createEventTargets(targets);\n        }\n\n        events.push(event[0]);\n      }\n    }\n\n    return events;\n  }\n\n  // Program Enrollment operations\n  async getProgramEnrollments(programId: string): Promise<(ProgramEnrollment & { client?: Client; classType?: ClassType })[]> {\n    const enrollments = await db\n      .select()\n      .from(programEnrollments)\n      .leftJoin(clients, eq(programEnrollments.clientId, clients.id))\n      .leftJoin(classTypes, eq(programEnrollments.classTypeId, classTypes.id))\n      .where(eq(programEnrollments.programId, programId));\n\n    return enrollments.map(enrollment => ({\n      ...enrollment.program_enrollments,\n      client: enrollment.clients,\n      classType: enrollment.class_types,\n    }));\n  }\n\n  async enrollInProgram(enrollment: InsertProgramEnrollment): Promise<ProgramEnrollment> {\n    const [created] = await db.insert(programEnrollments).values(enrollment).returning();\n    return created;\n  }\n\n  async updateProgramEnrollment(id: string, enrollment: Partial<InsertProgramEnrollment>): Promise<ProgramEnrollment> {\n    const [updated] = await db\n      .update(programEnrollments)\n      .set(enrollment)\n      .where(eq(programEnrollments.id, id))\n      .returning();\n    return updated;\n  }\n\n  async unenrollFromProgram(id: string): Promise<void> {\n    await db.delete(programEnrollments).where(eq(programEnrollments.id, id));\n  }\n\n  // Event Targets operations\n  async getEventTargets(eventId: string): Promise<(EventTarget & { routineExercise?: RoutineExercise & { exercise: Exercise } })[]> {\n    const targets = await db\n      .select()\n      .from(eventTargets)\n      .leftJoin(routineExercises, eq(eventTargets.routineExerciseId, routineExercises.id))\n      .leftJoin(exercises, eq(routineExercises.exerciseId, exercises.id))\n      .where(eq(eventTargets.eventId, eventId));\n\n    return targets.map(target => ({\n      ...target.event_targets,\n      routineExercise: target.routine_exercises ? {\n        ...target.routine_exercises,\n        exercise: target.exercises!,\n      } : undefined,\n    }));\n  }\n\n  async createEventTargets(targets: InsertEventTarget[]): Promise<EventTarget[]> {\n    const created = await db.insert(eventTargets).values(targets).returning();\n    return created;\n  }\n\n  async updateEventTarget(id: string, target: Partial<InsertEventTarget>): Promise<EventTarget> {\n    const [updated] = await db\n      .update(eventTargets)\n      .set(target)\n      .where(eq(eventTargets.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Readiness Check operations\n  async getClientReadiness(clientId: string, date?: Date): Promise<ReadinessCheck[]> {\n    let query = db.select().from(readinessChecks).where(eq(readinessChecks.clientId, clientId));\n    \n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      query = query.where(and(\n        eq(readinessChecks.clientId, clientId),\n        sql`${readinessChecks.date} >= ${startOfDay}`,\n        sql`${readinessChecks.date} <= ${endOfDay}`\n      ));\n    }\n\n    return await query.orderBy(desc(readinessChecks.date));\n  }\n\n  async createReadinessCheck(check: InsertReadinessCheck): Promise<ReadinessCheck> {\n    // Calculate readiness score (simple average of sleep, soreness inverted, stress inverted)\n    const readinessScore = Math.round((check.sleep + (6 - check.soreness) + (6 - check.stress)) / 3);\n    \n    const [created] = await db.insert(readinessChecks).values({\n      ...check,\n      readinessScore,\n    }).returning();\n    return created;\n  }\n\n  async getLatestReadiness(clientId: string): Promise<ReadinessCheck | undefined> {\n    const [latest] = await db\n      .select()\n      .from(readinessChecks)\n      .where(eq(readinessChecks.clientId, clientId))\n      .orderBy(desc(readinessChecks.date))\n      .limit(1);\n    return latest;\n  }\n\n  // Performance Record operations\n  async getPerformanceRecords(eventId: string, clientId?: string): Promise<(PerformanceRecord & { exercise: Exercise })[]> {\n    let query = db\n      .select()\n      .from(performanceRecords)\n      .innerJoin(exercises, eq(performanceRecords.exerciseId, exercises.id))\n      .where(eq(performanceRecords.eventId, eventId));\n\n    if (clientId) {\n      query = query.where(and(\n        eq(performanceRecords.eventId, eventId),\n        eq(performanceRecords.clientId, clientId)\n      ));\n    }\n\n    const records = await query;\n    return records.map(record => ({\n      ...record.performance_records,\n      exercise: record.exercises,\n    }));\n  }\n\n  async createPerformanceRecord(record: InsertPerformanceRecord): Promise<PerformanceRecord> {\n    const [created] = await db.insert(performanceRecords).values(record).returning();\n    return created;\n  }\n\n  async applyProgression(eventId: string): Promise<any> {\n    // Get event and its targets\n    const event = await db.select().from(calendarEvents).where(eq(calendarEvents.id, eventId)).limit(1);\n    if (!event.length) return null;\n\n    const targets = await this.getEventTargets(eventId);\n    const performanceRecords = await this.getPerformanceRecords(eventId);\n\n    // Simple progression logic: adjust targets based on average RPE\n    for (const target of targets) {\n      if (!target.routineExercise) continue;\n\n      const exerciseRecords = performanceRecords.filter(r => r.exerciseId === target.routineExercise!.exerciseId);\n      if (exerciseRecords.length === 0) continue;\n\n      const avgRpe = exerciseRecords.reduce((sum, r) => sum + (r.actual?.rpe || 5), 0) / exerciseRecords.length;\n      const currentTargets = target.targets as any || {};\n\n      // Apply progression based on RPE\n      if (avgRpe < 6) {\n        // Too easy, increase intensity\n        if (currentTargets.reps) currentTargets.reps = Math.min(currentTargets.reps + 1, 20);\n        if (currentTargets.time) currentTargets.time = Math.min(currentTargets.time + 5, 120);\n      } else if (avgRpe > 8) {\n        // Too hard, decrease intensity\n        if (currentTargets.reps) currentTargets.reps = Math.max(currentTargets.reps - 1, 5);\n        if (currentTargets.time) currentTargets.time = Math.max(currentTargets.time - 5, 15);\n      }\n\n      // Update the target for next session\n      await this.updateEventTarget(target.id, { targets: currentTargets });\n    }\n\n    return { message: \"Progression applied successfully\" };\n  }\n\n  // Data seeding operations\n  async seedDefaultData(userId: string): Promise<void> {\n    try {\n      console.log(`Starting default data seeding for user: ${userId}`);\n      \n      // Get existing class types\n      const existingClassTypes = await this.getClassTypes(userId);\n      console.log(`Found ${existingClassTypes.length} existing class types for user: ${userId}`);\n      \n      // First, remove any exercises that don't have a class type assigned\n      const orphanedExercises = await this.getExercises({ userId });\n      let orphanedCount = 0;\n      for (const exercise of orphanedExercises) {\n        if (!exercise.classType) {\n          await this.deleteExercise(exercise.id);\n          orphanedCount++;\n        }\n      }\n      if (orphanedCount > 0) {\n        console.log(`Removed ${orphanedCount} orphaned exercises without class types for user: ${userId}`);\n      }\n\n    // Define the top 10 popular class types\n    const defaultClassTypes = [\n      {\n        name: \"Yoga\",\n        description: \"A mind-body practice combining physical postures, breathing techniques, and meditation to improve flexibility, strength, and mental well-being.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Zumba\",\n        description: \"High-energy dance fitness class combining Latin rhythms with easy-to-follow dance moves for a fun, effective cardio workout.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"HIIT\",\n        description: \"High-Intensity Interval Training featuring short bursts of intense exercise followed by recovery periods for maximum calorie burn.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Pilates\",\n        description: \"Low-impact exercise focusing on core strength, flexibility, and body alignment through controlled movements and breathing.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"CrossFit\",\n        description: \"Varied functional movements performed at high intensity to improve overall fitness, strength, and conditioning.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Barre\",\n        description: \"Ballet-inspired workout combining isometric movements, stretching, and strengthening exercises for lean muscle development.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Spinning\",\n        description: \"Indoor cycling class with motivating music and varying intensity levels for cardiovascular fitness and endurance.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Kickboxing\",\n        description: \"Martial arts-inspired cardio workout combining punches, kicks, and defensive moves for strength and stress relief.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Strength Training\",\n        description: \"Resistance-based exercises using weights and equipment to build muscle mass, bone density, and metabolic health.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n      {\n        name: \"Aqua Fitness\",\n        description: \"Water-based exercise program providing low-impact cardiovascular and strength training with joint-friendly resistance.\",\n        isDefault: true,\n        createdByUserId: userId,\n      },\n    ];\n\n    // Create class types first (faster batch operation)\n    console.log(`Creating ${defaultClassTypes.length} default class types for user: ${userId}`);\n    const createdClassTypes = [];\n    \n    for (const classTypeData of defaultClassTypes) {\n      try {\n        console.log(`Creating class type: ${classTypeData.name} for user: ${userId}`);\n        const classType = await this.createClassType(classTypeData);\n        createdClassTypes.push(classType);\n        console.log(`Created class type: ${classType.name} with ID: ${classType.id}`);\n      } catch (error) {\n        console.error(`Error creating class type ${classTypeData.name}:`, error);\n      }\n    }\n    \n    // Create exercises for newly created class types\n    console.log(`Creating exercises for ${createdClassTypes.length} newly created class types`);\n    for (const classType of createdClassTypes) {\n      try {\n        await this.createDefaultExercisesForClass(classType, userId);\n        console.log(`Created default exercises for class type: ${classType.name}`);\n      } catch (error) {\n        console.error(`Error creating exercises for ${classType.name}:`, error);\n      }\n    }\n    \n    // Now ensure ALL class types (existing + new) have exercises\n    const allUserClassTypes = await this.getClassTypes(userId);\n    console.log(`Ensuring exercises exist for all ${allUserClassTypes.length} class types`);\n    \n    for (const classType of allUserClassTypes) {\n      try {\n        const existingExercises = await this.getExercises({ classType: classType.id, userId });\n        if (existingExercises.length === 0) {\n          console.log(`Creating missing exercises for class type: ${classType.name} (user: ${userId})`);\n          await this.createDefaultExercisesForClass(classType, userId);\n        } else {\n          console.log(`Class type ${classType.name} already has ${existingExercises.length} exercises`);\n        }\n      } catch (error) {\n        console.error(`Error ensuring exercises for ${classType.name}:`, error);\n      }\n    }\n    \n    console.log(`Completed default data seeding for user: ${userId}`);\n    } catch (error) {\n      console.error(`Error in seedDefaultData for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db.select().from(users);\n    return allUsers;\n  }\n\n  // Cleanup duplicate class types\n  async cleanupDuplicateClassTypes(): Promise<{ \n    report: string[], \n    duplicatesFound: number, \n    duplicatesRemoved: number \n  }> {\n    const report: string[] = [];\n    let duplicatesRemoved = 0;\n    \n    try {\n      // Find duplicate class types by name\n      const duplicateGroups = await db\n        .select({\n          name: classTypes.name,\n          ids: sql<string[]>`array_agg(${classTypes.id} ORDER BY ${classTypes.createdAt})`,\n          count: sql<number>`count(*)::int`\n        })\n        .from(classTypes)\n        .groupBy(classTypes.name)\n        .having(sql`count(*) > 1`);\n      \n      report.push(`Found ${duplicateGroups.length} class types with duplicates`);\n      \n      for (const group of duplicateGroups) {\n        const [keepId, ...duplicateIds] = group.ids;\n        report.push(`Processing ${group.name}: keeping ${keepId}, removing ${duplicateIds.length} duplicates`);\n        \n        // Move exercises from duplicates to the keeper\n        const exercisesUpdated = await db\n          .update(exercises)\n          .set({ classTypeId: keepId })\n          .where(sql`${exercises.classTypeId} = ANY(${duplicateIds})`);\n        \n        // Move calendar events from duplicates to the keeper  \n        const eventsUpdated = await db\n          .update(calendarEvents)\n          .set({ classTypeId: keepId })\n          .where(sql`${calendarEvents.classTypeId} = ANY(${duplicateIds})`);\n        \n        // Move routines from duplicates to the keeper\n        const routinesUpdated = await db\n          .update(routines)\n          .set({ classTypeId: keepId })\n          .where(sql`${routines.classTypeId} = ANY(${duplicateIds})`);\n        \n        // Move programs from duplicates to the keeper\n        const programsUpdated = await db\n          .update(programs)\n          .set({ classTypeId: keepId })\n          .where(sql`${programs.classTypeId} = ANY(${duplicateIds})`);\n        \n        // Delete the duplicate class types\n        await db\n          .delete(classTypes)\n          .where(sql`${classTypes.id} = ANY(${duplicateIds})`);\n        \n        duplicatesRemoved += duplicateIds.length;\n        report.push(`- Consolidated ${group.name}: moved data and removed ${duplicateIds.length} duplicates`);\n      }\n      \n      report.push(`✅ Cleanup completed! Removed ${duplicatesRemoved} duplicate class types`);\n      \n    } catch (error) {\n      report.push(`❌ Error during cleanup: ${error}`);\n      console.error('Cleanup error:', error);\n    }\n    \n    return {\n      report,\n      duplicatesFound: duplicateGroups.length,\n      duplicatesRemoved\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":95673},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for email/password auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  passwordHash: varchar(\"password_hash\"), // Made optional for migration\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  emailVerified: boolean(\"email_verified\").default(false),\n  emailVerificationToken: varchar(\"email_verification_token\"),\n  passwordResetToken: varchar(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enums\nexport const difficultyLevelEnum = pgEnum(\"difficulty_level\", [\"Beginner\", \"Intermediate\", \"Advanced\"]);\nexport const exerciseCategoryEnum = pgEnum(\"exercise_category\", [\"strength\", \"cardio\", \"flexibility\", \"balance\"]);\n\n// Class Types\nexport const classTypes = pgTable(\"class_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdByUserId: varchar(\"created_by_user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Exercises\nexport const exercises = pgTable(\"exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  difficultyLevel: difficultyLevelEnum(\"difficulty_level\").notNull(),\n  equipmentNeeded: text(\"equipment_needed\"),\n  primaryMuscles: text(\"primary_muscles\"),\n  secondaryMuscles: text(\"secondary_muscles\"),\n  category: exerciseCategoryEnum(\"category\").notNull(),\n  caloriesPerMinute: integer(\"calories_per_minute\"),\n  modifications: text(\"modifications\"),\n  safetyNotes: text(\"safety_notes\"),\n  imageUrl: varchar(\"image_url\"),\n  videoUrl: varchar(\"video_url\"),\n  classTypeId: varchar(\"class_type_id\").references(() => classTypes.id),\n  createdByUserId: varchar(\"created_by_user_id\").references(() => users.id),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Routines\nexport const routines = pgTable(\"routines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  classTypeId: varchar(\"class_type_id\").references(() => classTypes.id),\n  createdByUserId: varchar(\"created_by_user_id\").notNull().references(() => users.id),\n  isPublic: boolean(\"is_public\").default(false),\n  totalDuration: integer(\"total_duration\").default(0), // in seconds\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Routine Exercises (junction table)\nexport const routineExercises = pgTable(\"routine_exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  routineId: varchar(\"routine_id\").notNull().references(() => routines.id, { onDelete: \"cascade\" }),\n  exerciseId: varchar(\"exercise_id\").notNull().references(() => exercises.id),\n  orderIndex: integer(\"order_index\").notNull(),\n  durationSeconds: integer(\"duration_seconds\"),\n  repetitions: integer(\"repetitions\"),\n  sets: integer(\"sets\"),\n  restSeconds: integer(\"rest_seconds\"),\n  musicTitle: varchar(\"music_title\"),\n  musicNotes: text(\"music_notes\"),\n  notes: text(\"notes\"),\n});\n\n// Calendar Events\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  classTypeId: varchar(\"class_type_id\").references(() => classTypes.id),\n  routineId: varchar(\"routine_id\").references(() => routines.id),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  startDatetime: timestamp(\"start_datetime\").notNull(),\n  endDatetime: timestamp(\"end_datetime\").notNull(),\n  location: varchar(\"location\"),\n  notes: text(\"notes\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurrencePattern: text(\"recurrence_pattern\"),\n  capacity: integer(\"capacity\"),\n  allowWaitlist: boolean(\"allow_waitlist\").default(false),\n  sessionStatus: varchar(\"session_status\").default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  sessionStartedAt: timestamp(\"session_started_at\"),\n  sessionCompletedAt: timestamp(\"session_completed_at\"),\n  sessionNotes: text(\"session_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Saved Routines\nexport const userSavedRoutines = pgTable(\"user_saved_routines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  routineId: varchar(\"routine_id\").notNull().references(() => routines.id),\n  savedAt: timestamp(\"saved_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  classTypes: many(classTypes),\n  exercises: many(exercises),\n  routines: many(routines),\n  calendarEvents: many(calendarEvents),\n  savedRoutines: many(userSavedRoutines),\n}));\n\nexport const classTypesRelations = relations(classTypes, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [classTypes.createdByUserId],\n    references: [users.id],\n  }),\n  exercises: many(exercises),\n  routines: many(routines),\n  calendarEvents: many(calendarEvents),\n}));\n\nexport const exercisesRelations = relations(exercises, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [exercises.createdByUserId],\n    references: [users.id],\n  }),\n  classType: one(classTypes, {\n    fields: [exercises.classTypeId],\n    references: [classTypes.id],\n  }),\n  routineExercises: many(routineExercises),\n}));\n\nexport const routinesRelations = relations(routines, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [routines.createdByUserId],\n    references: [users.id],\n  }),\n  classType: one(classTypes, {\n    fields: [routines.classTypeId],\n    references: [classTypes.id],\n  }),\n  routineExercises: many(routineExercises),\n  calendarEvents: many(calendarEvents),\n  savedByUsers: many(userSavedRoutines),\n}));\n\nexport const routineExercisesRelations = relations(routineExercises, ({ one }) => ({\n  routine: one(routines, {\n    fields: [routineExercises.routineId],\n    references: [routines.id],\n  }),\n  exercise: one(exercises, {\n    fields: [routineExercises.exerciseId],\n    references: [exercises.id],\n  }),\n}));\n\nexport const calendarEventsRelations = relations(calendarEvents, ({ one }) => ({\n  user: one(users, {\n    fields: [calendarEvents.userId],\n    references: [users.id],\n  }),\n  classType: one(classTypes, {\n    fields: [calendarEvents.classTypeId],\n    references: [classTypes.id],\n  }),\n  routine: one(routines, {\n    fields: [calendarEvents.routineId],\n    references: [routines.id],\n  }),\n}));\n\nexport const userSavedRoutinesRelations = relations(userSavedRoutines, ({ one }) => ({\n  user: one(users, {\n    fields: [userSavedRoutines.userId],\n    references: [users.id],\n  }),\n  routine: one(routines, {\n    fields: [userSavedRoutines.routineId],\n    references: [routines.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassTypeSchema = createInsertSchema(classTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExerciseSchema = createInsertSchema(exercises).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoutineSchema = createInsertSchema(routines).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoutineExerciseSchema = createInsertSchema(routineExercises).omit({\n  id: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSavedRoutineSchema = createInsertSchema(userSavedRoutines).omit({\n  id: true,\n  savedAt: true,\n});\n\n// Client Management Tables\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  trainerId: varchar(\"trainer_id\").notNull().references(() => users.id),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  emergencyContact: varchar(\"emergency_contact\"),\n  emergencyPhone: varchar(\"emergency_phone\"),\n  goals: varchar(\"goals\"),\n  medicalConditions: varchar(\"medical_conditions\"),\n  injuries: varchar(\"injuries\"),\n  fitnessLevel: varchar(\"fitness_level\"), // Beginner, Intermediate, Advanced\n  preferredClassTypes: varchar(\"preferred_class_types\").array(),\n  notes: varchar(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const clientNotes = pgTable(\"client_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: \"cascade\" }),\n  trainerId: varchar(\"trainer_id\").notNull().references(() => users.id),\n  note: varchar(\"note\").notNull(),\n  noteType: varchar(\"note_type\").notNull(), // general, progress, injury, goal\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: \"cascade\" }),\n  eventId: varchar(\"event_id\").notNull().references(() => calendarEvents.id, { onDelete: \"cascade\" }),\n  status: varchar(\"status\").notNull(), // checked_in, no_show, cancelled\n  checkedInAt: timestamp(\"checked_in_at\"),\n  notes: varchar(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_attendance_client\").on(table.clientId),\n  index(\"idx_attendance_event\").on(table.eventId),\n]);\n\nexport const progressMetrics = pgTable(\"progress_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: \"cascade\" }),\n  exerciseId: varchar(\"exercise_id\").references(() => exercises.id),\n  routineId: varchar(\"routine_id\").references(() => routines.id),\n  eventId: varchar(\"event_id\").references(() => calendarEvents.id), // Links to specific class session\n  routineExerciseId: varchar(\"routine_exercise_id\").references(() => routineExercises.id), // Links to specific exercise in routine\n  metricType: varchar(\"metric_type\").notNull(), // weight, reps, time, distance, rpe, body_weight\n  value: varchar(\"value\").notNull(), // Stored as string to handle different units\n  unit: varchar(\"unit\"), // kg, lbs, seconds, minutes, meters, km, etc.\n  rpe: integer(\"rpe\"), // Rate of Perceived Exertion (1-10)\n  notes: varchar(\"notes\"),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_progress_client_date\").on(table.clientId, table.recordedAt),\n  index(\"idx_progress_exercise\").on(table.exerciseId),\n  index(\"idx_progress_event\").on(table.eventId),\n]);\n\nexport const eventClients = pgTable(\"event_clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => calendarEvents.id, { onDelete: \"cascade\" }),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: \"cascade\" }),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_event_clients_event\").on(table.eventId),\n  index(\"idx_event_clients_client\").on(table.clientId),\n  // Unique constraint to prevent duplicate enrollments\n  index(\"idx_event_client_unique\").on(table.eventId, table.clientId),\n]);\n\n// Client Management Relations\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  trainer: one(users, {\n    fields: [clients.trainerId],\n    references: [users.id],\n  }),\n  notes: many(clientNotes),\n  attendance: many(attendance),\n  progressMetrics: many(progressMetrics),\n}));\n\nexport const clientNotesRelations = relations(clientNotes, ({ one }) => ({\n  client: one(clients, {\n    fields: [clientNotes.clientId],\n    references: [clients.id],\n  }),\n  trainer: one(users, {\n    fields: [clientNotes.trainerId],\n    references: [users.id],\n  }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  client: one(clients, {\n    fields: [attendance.clientId],\n    references: [clients.id],\n  }),\n  event: one(calendarEvents, {\n    fields: [attendance.eventId],\n    references: [calendarEvents.id],\n  }),\n}));\n\nexport const progressMetricsRelations = relations(progressMetrics, ({ one }) => ({\n  client: one(clients, {\n    fields: [progressMetrics.clientId],\n    references: [clients.id],\n  }),\n  exercise: one(exercises, {\n    fields: [progressMetrics.exerciseId],\n    references: [exercises.id],\n  }),\n  routine: one(routines, {\n    fields: [progressMetrics.routineId],\n    references: [routines.id],\n  }),\n  event: one(calendarEvents, {\n    fields: [progressMetrics.eventId],\n    references: [calendarEvents.id],\n  }),\n  routineExercise: one(routineExercises, {\n    fields: [progressMetrics.routineExerciseId],\n    references: [routineExercises.id],\n  }),\n}));\n\nexport const eventClientsRelations = relations(eventClients, ({ one }) => ({\n  event: one(calendarEvents, {\n    fields: [eventClients.eventId],\n    references: [calendarEvents.id],\n  }),\n  client: one(clients, {\n    fields: [eventClients.clientId],\n    references: [clients.id],\n  }),\n}));\n\n// Client Management Insert Schemas\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientNoteSchema = createInsertSchema(clientNotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProgressMetricSchema = createInsertSchema(progressMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Auth schemas\nexport const registerSchema = createInsertSchema(users)\n  .pick({ email: true, firstName: true, lastName: true })\n  .extend({\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type RegisterInput = z.infer<typeof registerSchema>;\nexport type LoginInput = z.infer<typeof loginSchema>;\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ClassType = typeof classTypes.$inferSelect;\nexport type Exercise = typeof exercises.$inferSelect;\nexport type Routine = typeof routines.$inferSelect;\nexport type RoutineExercise = typeof routineExercises.$inferSelect;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type UserSavedRoutine = typeof userSavedRoutines.$inferSelect;\n\nexport type Client = typeof clients.$inferSelect;\nexport type ClientNote = typeof clientNotes.$inferSelect;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type ProgressMetric = typeof progressMetrics.$inferSelect;\n\nexport type InsertClassType = z.infer<typeof insertClassTypeSchema>;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\nexport type InsertRoutine = z.infer<typeof insertRoutineSchema>;\nexport type InsertRoutineExercise = z.infer<typeof insertRoutineExerciseSchema>;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type InsertUserSavedRoutine = z.infer<typeof insertUserSavedRoutineSchema>;\n\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type InsertClientNote = z.infer<typeof insertClientNoteSchema>;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type InsertProgressMetric = z.infer<typeof insertProgressMetricSchema>;\n\n// Program Management Tables - Adaptive Program Builder\nexport const programs = pgTable(\"programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: varchar(\"description\"),\n  goal: varchar(\"goal\"), // \"strength\", \"endurance\", \"weight_loss\", \"flexibility\"\n  durationWeeks: integer(\"duration_weeks\").notNull(),\n  classTypeId: varchar(\"class_type_id\").references(() => classTypes.id),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const programSessions = pgTable(\"program_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  programId: varchar(\"program_id\").notNull().references(() => programs.id, { onDelete: \"cascade\" }),\n  weekNumber: integer(\"week_number\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday-Saturday)\n  routineId: varchar(\"routine_id\").references(() => routines.id),\n  sessionName: varchar(\"session_name\"),\n  baseParams: jsonb(\"base_params\"), // {reps: 10, time: 60, weight: 50}\n  progressionRule: jsonb(\"progression_rule\"), // {type: \"linear\", param: \"reps\", increment: 1, floor: 8, ceiling: 15, deloadEvery: 4, deloadPct: 0.1}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const programEnrollments = pgTable(\"program_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  programId: varchar(\"program_id\").notNull().references(() => programs.id, { onDelete: \"cascade\" }),\n  clientId: varchar(\"client_id\").references(() => clients.id),\n  classTypeId: varchar(\"class_type_id\").references(() => classTypes.id), // For group enrollments\n  startDate: timestamp(\"start_date\").notNull(),\n  currentWeek: integer(\"current_week\").default(1),\n  isActive: boolean(\"is_active\").default(true),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n});\n\nexport const eventTargets = pgTable(\"event_targets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => calendarEvents.id, { onDelete: \"cascade\" }),\n  routineExerciseId: varchar(\"routine_exercise_id\").references(() => routineExercises.id),\n  targets: jsonb(\"targets\"), // {reps: 12, time: 45, weight: 60, rpe: 7}\n  isGenerated: boolean(\"is_generated\").default(false), // true if auto-generated from program\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const readinessChecks = pgTable(\"readiness_checks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  eventId: varchar(\"event_id\").references(() => calendarEvents.id),\n  date: timestamp(\"date\").notNull(),\n  sleep: integer(\"sleep\").notNull(), // 1-5 scale\n  soreness: integer(\"soreness\").notNull(), // 1-5 scale\n  stress: integer(\"stress\").notNull(), // 1-5 scale\n  readinessScore: integer(\"readiness_score\"), // calculated score 1-5\n  notes: varchar(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const performanceRecords = pgTable(\"performance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => calendarEvents.id),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id),\n  exerciseId: varchar(\"exercise_id\").notNull().references(() => exercises.id),\n  routineExerciseId: varchar(\"routine_exercise_id\").references(() => routineExercises.id),\n  actual: jsonb(\"actual\"), // {reps: 10, time: 55, weight: 65, rpe: 8}\n  notes: varchar(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations for program management tables\nexport const programsRelations = relations(programs, ({ many, one }) => ({\n  sessions: many(programSessions),\n  enrollments: many(programEnrollments),\n  classType: one(classTypes, {\n    fields: [programs.classTypeId],\n    references: [classTypes.id],\n  }),\n  createdByUser: one(users, {\n    fields: [programs.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const programSessionsRelations = relations(programSessions, ({ one }) => ({\n  program: one(programs, {\n    fields: [programSessions.programId],\n    references: [programs.id],\n  }),\n  routine: one(routines, {\n    fields: [programSessions.routineId],\n    references: [routines.id],\n  }),\n}));\n\nexport const programEnrollmentsRelations = relations(programEnrollments, ({ one }) => ({\n  program: one(programs, {\n    fields: [programEnrollments.programId],\n    references: [programs.id],\n  }),\n  client: one(clients, {\n    fields: [programEnrollments.clientId],\n    references: [clients.id],\n  }),\n  classType: one(classTypes, {\n    fields: [programEnrollments.classTypeId],\n    references: [classTypes.id],\n  }),\n}));\n\nexport const eventTargetsRelations = relations(eventTargets, ({ one }) => ({\n  event: one(calendarEvents, {\n    fields: [eventTargets.eventId],\n    references: [calendarEvents.id],\n  }),\n  routineExercise: one(routineExercises, {\n    fields: [eventTargets.routineExerciseId],\n    references: [routineExercises.id],\n  }),\n}));\n\nexport const readinessChecksRelations = relations(readinessChecks, ({ one }) => ({\n  client: one(clients, {\n    fields: [readinessChecks.clientId],\n    references: [clients.id],\n  }),\n  event: one(calendarEvents, {\n    fields: [readinessChecks.eventId],\n    references: [calendarEvents.id],\n  }),\n}));\n\nexport const performanceRecordsRelations = relations(performanceRecords, ({ one }) => ({\n  event: one(calendarEvents, {\n    fields: [performanceRecords.eventId],\n    references: [calendarEvents.id],\n  }),\n  client: one(clients, {\n    fields: [performanceRecords.clientId],\n    references: [clients.id],\n  }),\n  exercise: one(exercises, {\n    fields: [performanceRecords.exerciseId],\n    references: [exercises.id],\n  }),\n  routineExercise: one(routineExercises, {\n    fields: [performanceRecords.routineExerciseId],\n    references: [routineExercises.id],\n  }),\n}));\n\n// Program Management Insert Schemas\nexport const insertProgramSchema = createInsertSchema(programs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProgramSessionSchema = createInsertSchema(programSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProgramEnrollmentSchema = createInsertSchema(programEnrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertEventTargetSchema = createInsertSchema(eventTargets).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReadinessCheckSchema = createInsertSchema(readinessChecks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPerformanceRecordSchema = createInsertSchema(performanceRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Program Management Types\nexport type Program = typeof programs.$inferSelect;\nexport type ProgramSession = typeof programSessions.$inferSelect;\nexport type ProgramEnrollment = typeof programEnrollments.$inferSelect;\nexport type EventTarget = typeof eventTargets.$inferSelect;\nexport type ReadinessCheck = typeof readinessChecks.$inferSelect;\nexport type PerformanceRecord = typeof performanceRecords.$inferSelect;\n\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type InsertProgramSession = z.infer<typeof insertProgramSessionSchema>;\nexport type InsertProgramEnrollment = z.infer<typeof insertProgramEnrollmentSchema>;\nexport type InsertEventTarget = z.infer<typeof insertEventTargetSchema>;\nexport type InsertReadinessCheck = z.infer<typeof insertReadinessCheckSchema>;\nexport type InsertPerformanceRecord = z.infer<typeof insertPerformanceRecordSchema>;\n\n\n","size_bytes":24712},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/navigation\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Classes from \"@/pages/classes\";\nimport Routines from \"@/pages/routines\";\nimport Exercises from \"@/pages/exercises\";\nimport Calendar from \"@/pages/calendar\";\nimport Clients from \"@/pages/clients\";\nimport Programs from \"@/pages/programs\";\nimport Presentation from \"@/pages/presentation\";\nimport CoachConsole from \"@/pages/coach-console\";\nimport CoachConsoleDemo from \"@/pages/coach-console-demo\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const [currentTab, setCurrentTab] = useState(\"dashboard\");\n  const [location] = useLocation();\n\n  // Handle URL-based navigation\n  useEffect(() => {\n    if (location.startsWith(\"/routines\")) {\n      setCurrentTab(\"routines\");\n    } else if (location === \"/classes\") {\n      setCurrentTab(\"classes\");\n    } else if (location === \"/exercises\") {\n      setCurrentTab(\"exercises\");\n    } else if (location === \"/calendar\") {\n      setCurrentTab(\"calendar\");\n    } else if (location === \"/clients\") {\n      setCurrentTab(\"clients\");\n    } else if (location === \"/programs\") {\n      setCurrentTab(\"programs\");\n    } else if (location.startsWith(\"/presentation\")) {\n      setCurrentTab(\"presentation\");\n    } else {\n      setCurrentTab(\"dashboard\");\n    }\n  }, [location]);\n\n  const renderCurrentView = () => {\n    switch (currentTab) {\n      case \"dashboard\":\n        return <Dashboard />;\n      case \"classes\":\n        return <Classes />;\n      case \"routines\":\n        return <Routines />;\n      case \"exercises\":\n        return <Exercises />;\n      case \"calendar\":\n        return <Calendar />;\n      case \"clients\":\n        return <Clients />;\n      case \"programs\":\n        return <Programs />;\n      case \"presentation\":\n        return <Presentation />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navigation currentTab={currentTab} onTabChange={setCurrentTab} />\n      <main>\n        {renderCurrentView()}\n      </main>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading FitFlow...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/landing\" component={Landing} />\n          <Route path=\"/\" component={Landing} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/landing\" component={Landing} />\n          <Route path=\"/\" component={AuthenticatedApp} />\n          <Route path=\"/routines/:id\" component={AuthenticatedApp} />\n          <Route path=\"/routines\" component={AuthenticatedApp} />\n          <Route path=\"/classes\" component={AuthenticatedApp} />\n          <Route path=\"/exercises\" component={AuthenticatedApp} />\n          <Route path=\"/programs\" component={AuthenticatedApp} />\n          <Route path=\"/calendar\" component={AuthenticatedApp} />\n          <Route path=\"/clients\" component={AuthenticatedApp} />\n          <Route path=\"/presentation\" component={AuthenticatedApp} />\n          <Route path=\"/presentation/:routineId\" component={AuthenticatedApp} />\n          <Route path=\"/coach-console/:eventId\" component={CoachConsole} />\n          <Route path=\"/demo/coach-console\" component={CoachConsoleDemo} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4488},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(217 91% 60%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --fitness: hsl(160 84% 39%);\n  --fitness-foreground: hsl(0 0% 100%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 2px 4px -1px hsl(217 91% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 4px 6px -1px hsl(217 91% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 8px 10px -1px hsl(217 91% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(217 91% 60%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --fitness: hsl(160 84% 39%);\n  --fitness-foreground: hsl(0 0% 100%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 2px 4px -1px hsl(217 91% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 4px 6px -1px hsl(217 91% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 8px 10px -1px hsl(217 91% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: Inter, sans-serif;\n  }\n}\n","size_bytes":4628},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/calendar-event-form.tsx":{"content":"import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { type ClassType, type Routine, type CalendarEvent } from \"@shared/schema\";\n\nconst eventFormSchema = z.object({\n  classTypeId: z.string().min(1, \"Class type is required\"),\n  routineId: z.string().optional(),\n  eventDate: z.string().min(1, \"Event date is required\"),\n  startHour: z.string().min(1, \"Start hour is required\"),\n  startMinute: z.string().min(1, \"Start minute is required\"),\n  duration: z.string().min(1, \"Duration is required\"),\n  location: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\ninterface CalendarEventFormProps {\n  classTypes: ClassType[] | undefined;\n  routines: Routine[] | undefined;\n  selectedDate: Date;\n  onSubmit: (data: EventFormData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n  editingEvent?: CalendarEvent | null;\n}\n\nexport function CalendarEventForm({ \n  classTypes, \n  routines, \n  selectedDate, \n  onSubmit, \n  onCancel, \n  isLoading = false,\n  editingEvent = null\n}: CalendarEventFormProps) {\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      classTypeId: \"\",\n      routineId: \"none\",\n      eventDate: `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')}`,\n      startHour: \"09\",\n      startMinute: \"00\",\n      duration: \"60\",\n      location: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Update form when editing event or date changes\n  React.useEffect(() => {\n    if (editingEvent) {\n      const startDate = new Date(editingEvent.startDatetime);\n      const endDate = new Date(editingEvent.endDatetime);\n      const duration = Math.round((endDate.getTime() - startDate.getTime()) / (60 * 1000));\n      \n      form.reset({\n        classTypeId: editingEvent.classTypeId || \"\",\n        routineId: editingEvent.routineId || \"none\",\n        eventDate: `${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}-${String(startDate.getDate()).padStart(2, '0')}`,\n        startHour: startDate.getHours().toString().padStart(2, '0'),\n        startMinute: startDate.getMinutes().toString().padStart(2, '0'),\n        duration: duration.toString(),\n        location: editingEvent.location || \"\",\n        notes: editingEvent.notes || \"\",\n      });\n    } else {\n      form.setValue('eventDate', `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')}`);\n    }\n  }, [selectedDate, editingEvent, form]);\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"classTypeId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Class Type *</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-class-type\">\n                    <SelectValue placeholder=\"Select class type\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {classTypes?.map((classType) => (\n                    <SelectItem key={classType.id} value={classType.id}>\n                      {classType.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"routineId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Routine (Optional)</FormLabel>\n              <Select \n                onValueChange={(value) => field.onChange(value === \"none\" ? \"\" : value)} \n                value={field.value || \"none\"}\n              >\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-routine\">\n                    <SelectValue placeholder=\"Select a routine\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"none\">No routine</SelectItem>\n                  {routines?.map((routine) => (\n                    <SelectItem key={routine.id} value={routine.id}>\n                      {routine.name} {routine.totalDuration ? `(${Math.round(routine.totalDuration / 60)} min)` : ''}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"eventDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Event Date</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"date\" \n                  {...field} \n                  data-testid=\"input-event-date\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"startHour\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Hour</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-start-hour\">\n                      <SelectValue placeholder=\"Hour\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {Array.from({ length: 24 }, (_, i) => (\n                      <SelectItem key={i} value={i.toString().padStart(2, '0')}>\n                        {i === 0 ? '12 AM' : i < 12 ? `${i} AM` : i === 12 ? '12 PM' : `${i - 12} PM`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"startMinute\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Minute</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-start-minute\">\n                      <SelectValue placeholder=\"Min\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {['00', '15', '30', '45'].map((minute) => (\n                      <SelectItem key={minute} value={minute}>\n                        {minute}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"duration\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Duration</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-duration\">\n                      <SelectValue placeholder=\"Duration\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"15\">15 min</SelectItem>\n                    <SelectItem value=\"30\">30 min</SelectItem>\n                    <SelectItem value=\"45\">45 min</SelectItem>\n                    <SelectItem value=\"60\">1 hour</SelectItem>\n                    <SelectItem value=\"75\">1h 15m</SelectItem>\n                    <SelectItem value=\"90\">1h 30m</SelectItem>\n                    <SelectItem value=\"105\">1h 45m</SelectItem>\n                    <SelectItem value=\"120\">2 hours</SelectItem>\n                    <SelectItem value=\"150\">2h 30m</SelectItem>\n                    <SelectItem value=\"180\">3 hours</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"location\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Location (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Studio A, Gym, Online, etc.\" \n                  {...field} \n                  data-testid=\"input-event-location\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Additional notes...\" \n                  {...field} \n                  data-testid=\"input-event-notes\" \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={onCancel}\n            data-testid=\"button-cancel-event\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={isLoading}\n            data-testid=\"button-create-event\"\n          >\n            {isLoading ? (editingEvent ? \"Updating...\" : \"Creating...\") : (editingEvent ? \"Update Event\" : \"Create Event\")}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default CalendarEventForm;","size_bytes":10541},"client/src/components/class-enrollment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, UserPlus, UserCheck, UserX } from \"lucide-react\";\n\ninterface ClassEnrollmentProps {\n  eventId: string;\n  eventTitle: string;\n}\n\nexport function ClassEnrollment({ eventId, eventTitle }: ClassEnrollmentProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all clients\n  const { data: allClients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n  });\n\n  // Fetch enrolled clients for this event\n  const { data: enrolledClients = [] } = useQuery({\n    queryKey: [\"/api/calendar/events\", eventId, \"clients\"],\n  });\n\n  // Enroll/unenroll mutation\n  const enrollmentMutation = useMutation({\n    mutationFn: async ({ clientId, action }: { clientId: string; action: \"enroll\" | \"unenroll\" }) => {\n      if (action === \"enroll\") {\n        const response = await apiRequest(\"POST\", `/api/calendar/events/${eventId}/clients`, {\n          clientId,\n        });\n        return await response.json();\n      } else {\n        const response = await apiRequest(\"DELETE\", `/api/calendar/events/${eventId}/clients/${clientId}`, {});\n        return await response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\", eventId, \"clients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Client enrollment updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update client enrollment.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEnrollmentToggle = (clientId: string, isEnrolled: boolean) => {\n    enrollmentMutation.mutate({\n      clientId,\n      action: isEnrolled ? \"unenroll\" : \"enroll\",\n    });\n  };\n\n  const enrolledClientIds = new Set(enrolledClients.map((client: any) => client.id));\n\n  return (\n    <div>\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-manage-enrollment\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Manage Clients ({enrolledClients.length})\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              Manage Client Enrollment - {eventTitle}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Enrolled clients summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <UserCheck className=\"w-4 h-4\" />\n                  Enrolled Clients ({enrolledClients.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {enrolledClients.length === 0 ? (\n                  <p className=\"text-sm text-gray-500\">No clients enrolled yet</p>\n                ) : (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {enrolledClients.map((client: any) => (\n                      <Badge key={client.id} variant=\"default\">\n                        {client.firstName} {client.lastName}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Client enrollment list */}\n            <div className=\"max-h-96 overflow-y-auto\">\n              <h4 className=\"font-medium mb-3\">Select Clients for This Class</h4>\n              <div className=\"space-y-2\">\n                {allClients.map((client: any) => {\n                  const isEnrolled = enrolledClientIds.has(client.id);\n                  return (\n                    <div\n                      key={client.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Checkbox\n                          checked={isEnrolled}\n                          onCheckedChange={() => handleEnrollmentToggle(client.id, isEnrolled)}\n                          disabled={enrollmentMutation.isPending}\n                          data-testid={`checkbox-client-${client.id}`}\n                        />\n                        <div>\n                          <p className=\"font-medium\">\n                            {client.firstName} {client.lastName}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">\n                            {client.email} • {client.fitnessLevel}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {isEnrolled ? (\n                          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                            <UserCheck className=\"w-3 h-3 mr-1\" />\n                            Enrolled\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\">\n                            <UserPlus className=\"w-3 h-3 mr-1\" />\n                            Available\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button onClick={() => setIsDialogOpen(false)}>\n                Done\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default ClassEnrollment;","size_bytes":6291},"client/src/components/exercise-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit, Plus, Trash2 } from \"lucide-react\";\nimport type { Exercise, ClassType } from \"@shared/schema\";\n\ninterface ExerciseCardProps {\n  exercise: Exercise & { classType?: ClassType | null };\n  onEdit?: (exercise: Exercise) => void;\n  onDelete?: (exercise: Exercise) => void;\n  onAddToRoutine?: (exercise: Exercise) => void;\n}\n\nconst difficultyColors = {\n  Beginner: \"bg-fitness-600/10 text-fitness-700\",\n  Intermediate: \"bg-primary/10 text-primary\",\n  Advanced: \"bg-red-500/10 text-red-700\",\n};\n\nconst categoryColors = {\n  strength: \"bg-red-500/10 text-red-700\",\n  cardio: \"bg-blue-500/10 text-blue-700\", \n  flexibility: \"bg-green-500/10 text-green-700\",\n  balance: \"bg-purple-500/10 text-purple-700\",\n};\n\nexport default function ExerciseCard({ exercise, onEdit, onDelete, onAddToRoutine }: ExerciseCardProps) {\n  const difficultyColor = difficultyColors[exercise.difficultyLevel] || \"bg-gray-100 text-gray-700\";\n  const categoryColor = categoryColors[exercise.category] || \"bg-gray-100 text-gray-700\";\n\n  return (\n    <Card className=\"overflow-hidden hover:shadow-md transition-shadow\" data-testid={`exercise-card-${exercise.id}`}>\n      {exercise.imageUrl && (\n        <img \n          src={exercise.imageUrl} \n          alt={exercise.name}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`exercise-image-${exercise.id}`}\n        />\n      )}\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\" data-testid={`exercise-name-${exercise.id}`}>\n            {exercise.name}\n          </h3>\n          <Badge className={difficultyColor} data-testid={`exercise-difficulty-${exercise.id}`}>\n            {exercise.difficultyLevel}\n          </Badge>\n        </div>\n        \n        {/* Class Type Badge */}\n        <div className=\"mb-3\">\n          <Badge \n            variant=\"secondary\" \n            className=\"bg-blue-50 text-blue-700 border-blue-200\"\n            data-testid={`exercise-class-type-${exercise.id}`}\n          >\n            {exercise.classType ? exercise.classType.name : \"None\"}\n          </Badge>\n        </div>\n        \n        {exercise.description && (\n          <p className=\"text-gray-600 text-sm mb-4\" data-testid={`exercise-description-${exercise.id}`}>\n            {exercise.description}\n          </p>\n        )}\n        \n        <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\n          <Badge variant=\"outline\" className={categoryColor} data-testid={`exercise-category-${exercise.id}`}>\n            {exercise.category}\n          </Badge>\n          {exercise.equipmentNeeded && (\n            <span data-testid={`exercise-equipment-${exercise.id}`}>\n              {exercise.equipmentNeeded}\n            </span>\n          )}\n          {exercise.primaryMuscles && (\n            <span data-testid={`exercise-muscles-${exercise.id}`}>\n              {exercise.primaryMuscles}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          {onEdit && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => onEdit(exercise)}\n              data-testid={`button-edit-exercise-${exercise.id}`}\n            >\n              <Edit className=\"w-4 h-4 mr-1\" />\n              Edit\n            </Button>\n          )}\n          {onDelete && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => onDelete(exercise)}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n              data-testid={`button-delete-exercise-${exercise.id}`}\n            >\n              <Trash2 className=\"w-4 h-4 mr-1\" />\n              Delete\n            </Button>\n          )}\n          {onAddToRoutine && (\n            <Button \n              size=\"sm\"\n              onClick={() => onAddToRoutine(exercise)}\n              data-testid={`button-add-exercise-${exercise.id}`}\n            >\n              <Plus className=\"w-4 h-4 mr-1\" />\n              Add to Routine\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4333},"client/src/components/export-routine.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Download, Share2, FileText, Link2, Mail, Copy, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ExportRoutineProps {\n  routineId: string;\n  routineName: string;\n  className?: string;\n  openOnMount?: boolean;\n}\n\ninterface Exercise {\n  id: string;\n  name: string;\n  description?: string;\n  duration: number;\n  sets?: number;\n  reps?: number;\n  category: string;\n  difficulty: string;\n  equipment?: string;\n}\n\ninterface Routine {\n  id: string;\n  name: string;\n  description?: string;\n  totalDuration: number;\n  exerciseCount: number;\n  classType?: {\n    name: string;\n  };\n  exercises: Exercise[];\n}\n\nexport default function ExportRoutine({ routineId, routineName, className, openOnMount = false }: ExportRoutineProps) {\n  const [isOpen, setIsOpen] = useState(openOnMount);\n  const [shareUrl, setShareUrl] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  const { data: routine, isLoading } = useQuery<Routine>({\n    queryKey: [\"/api/routines\", routineId],\n    enabled: isOpen && !!routineId,\n  });\n\n  const formatDuration = (minutes: number) => {\n    if (minutes < 60) return `${minutes}min`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return mins > 0 ? `${hours}h ${mins}min` : `${hours}h`;\n  };\n\n  const generateShareUrl = () => {\n    const baseUrl = window.location.origin;\n    const url = `${baseUrl}/shared/routine/${routineId}`;\n    setShareUrl(url);\n    return url;\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      toast({\n        title: \"Copied!\",\n        description: \"Link copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportToPDF = async () => {\n    if (!routine) {\n      toast({\n        title: \"Export Failed\",\n        description: \"No routine data available for export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    console.log(\"Starting PDF export for routine:\", routine);\n    setIsExporting(true);\n    try {\n      const pdf = new jsPDF();\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 20;\n      let yPosition = margin;\n\n      // Header - Routine Name\n      pdf.setFontSize(20);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(routine.name || \"Untitled Routine\", margin, yPosition);\n      yPosition += 12;\n\n      // Class Type\n      if (routine.classType?.name) {\n        pdf.setFontSize(14);\n        pdf.setFont(\"helvetica\", \"normal\");\n        pdf.text(`Class Type: ${routine.classType.name}`, margin, yPosition);\n        yPosition += 10;\n      }\n\n      // Routine Summary\n      pdf.setFontSize(12);\n      pdf.setFont(\"helvetica\", \"normal\");\n      const duration = routine.totalDuration ? formatDuration(routine.totalDuration) : \"0min\";\n      const exerciseCount = routine.exercises ? routine.exercises.length : 0;\n      pdf.text(`Duration: ${duration} | Exercises: ${exerciseCount}`, margin, yPosition);\n      yPosition += 8;\n\n      // Description\n      if (routine.description) {\n        const splitDescription = pdf.splitTextToSize(routine.description, pageWidth - 2 * margin);\n        pdf.text(splitDescription, margin, yPosition);\n        yPosition += splitDescription.length * 5 + 8;\n      }\n\n      yPosition += 5;\n\n      // Only create table if there are exercises\n      if (routine.exercises && routine.exercises.length > 0) {\n        // Table Header with more compact columns\n        const colWidths = [8, 35, 15, 12, 12, 18, 20, 25, 15]; // Condensed column widths\n        const rowHeight = 7; // Smaller row height\n        \n        // Draw header background\n        pdf.setFillColor(240, 240, 240);\n        pdf.rect(margin, yPosition - 2, pageWidth - 2 * margin, rowHeight + 4, 'F');\n        \n        // Header text\n        pdf.setFontSize(8); // Smaller font for headers\n        pdf.setFont(\"helvetica\", \"bold\");\n        let xPosition = margin + 1;\n        \n        const headers = ['#', 'Exercise Name', 'Time', 'Sets', 'Reps', 'Difficulty', 'Equipment', 'Music/Song', 'BPM'];\n        headers.forEach((header, index) => {\n          pdf.text(header, xPosition, yPosition + 4);\n          xPosition += colWidths[index];\n        });\n        \n        yPosition += rowHeight + 4;\n\n        // Table rows\n        pdf.setFont(\"helvetica\", \"normal\");\n        pdf.setFontSize(7); // Smaller font for data\n        \n        routine.exercises.forEach((routineExercise, index) => {\n          // Check if we need a new page\n          if (yPosition + rowHeight > pageHeight - 30) {\n            pdf.addPage();\n            yPosition = margin;\n            \n            // Redraw header on new page\n            pdf.setFillColor(240, 240, 240);\n            pdf.rect(margin, yPosition - 2, pageWidth - 2 * margin, rowHeight + 4, 'F');\n            \n            pdf.setFont(\"helvetica\", \"bold\");\n            pdf.setFontSize(8);\n            xPosition = margin + 1;\n            headers.forEach((header, idx) => {\n              pdf.text(header, xPosition, yPosition + 4);\n              xPosition += colWidths[idx];\n            });\n            \n            yPosition += rowHeight + 4;\n            pdf.setFont(\"helvetica\", \"normal\");\n            pdf.setFontSize(7);\n          }\n\n          // Draw row border\n          pdf.setDrawColor(200, 200, 200);\n          pdf.rect(margin, yPosition - 2, pageWidth - 2 * margin, rowHeight + 4);\n          \n          // Extract exercise data from nested structure\n          const exercise = routineExercise.exercise || routineExercise;\n          const exerciseName = exercise.name || 'Unnamed Exercise';\n          \n          // Format duration properly - show seconds if less than 60, otherwise minutes\n          let durationDisplay = '-';\n          if (routineExercise.durationSeconds) {\n            const seconds = routineExercise.durationSeconds;\n            if (seconds < 60) {\n              durationDisplay = `${seconds}s`;\n            } else {\n              const minutes = Math.round(seconds / 60);\n              durationDisplay = `${minutes}min`;\n            }\n          } else if (exercise.duration) {\n            durationDisplay = typeof exercise.duration === 'number' ? `${exercise.duration}min` : exercise.duration.toString();\n          }\n          \n          const sets = routineExercise.sets || exercise.sets || '-';\n          const reps = routineExercise.repetitions || exercise.reps || '-';\n          const difficulty = exercise.difficultyLevel || exercise.difficulty || '-';\n          const equipment = exercise.equipmentNeeded || exercise.equipment || '-';\n          const music = routineExercise.musicTitle || '-';\n          const bpm = routineExercise.musicNotes || '-';\n          \n          // Row data with truncation for long text\n          xPosition = margin + 1;\n          const rowData = [\n            (index + 1).toString(),\n            exerciseName.length > 20 ? exerciseName.substring(0, 17) + '...' : exerciseName,\n            durationDisplay,\n            sets.toString(),\n            reps.toString(),\n            difficulty.length > 10 ? difficulty.substring(0, 8) + '..' : difficulty,\n            equipment.length > 12 ? equipment.substring(0, 10) + '..' : equipment,\n            music.length > 15 ? music.substring(0, 13) + '..' : music,\n            bpm.toString()\n          ];\n          \n          rowData.forEach((data, idx) => {\n            pdf.text(data || '', xPosition, yPosition + 4);\n            xPosition += colWidths[idx];\n          });\n          \n          yPosition += rowHeight + 4;\n        });\n\n        // Add exercise descriptions section if any exist\n        const exercisesWithDescriptions = routine.exercises.filter(routineEx => {\n          const exercise = routineEx.exercise || routineEx;\n          return exercise.description;\n        });\n        \n        if (exercisesWithDescriptions.length > 0) {\n          yPosition += 10;\n          \n          // Check if we need a new page for descriptions\n          if (yPosition > pageHeight - 60) {\n            pdf.addPage();\n            yPosition = margin;\n          }\n          \n          pdf.setFontSize(10);\n          pdf.setFont(\"helvetica\", \"bold\");\n          pdf.text(\"Exercise Descriptions:\", margin, yPosition);\n          yPosition += 8;\n          \n          pdf.setFontSize(8);\n          pdf.setFont(\"helvetica\", \"normal\");\n          \n          exercisesWithDescriptions.forEach((routineExercise, descIndex) => {\n            const exercise = routineExercise.exercise || routineExercise;\n            const exerciseIndex = routine.exercises.findIndex(ex => \n              (ex.exercise?.id || ex.id) === (exercise.id || routineExercise.exerciseId)\n            ) + 1;\n            \n            if (yPosition > pageHeight - 25) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            \n            pdf.setFont(\"helvetica\", \"bold\");\n            pdf.text(`${exerciseIndex}. ${exercise.name || 'Unnamed Exercise'}:`, margin, yPosition);\n            yPosition += 5;\n            \n            pdf.setFont(\"helvetica\", \"normal\");\n            if (exercise.description) {\n              const splitDesc = pdf.splitTextToSize(exercise.description, pageWidth - 2 * margin - 5);\n              pdf.text(splitDesc, margin + 3, yPosition);\n              yPosition += splitDesc.length * 3.5 + 6;\n            }\n          });\n        }\n      } else {\n        // No exercises message\n        pdf.setFontSize(12);\n        pdf.setFont(\"helvetica\", \"normal\");\n        pdf.text(\"No exercises added to this routine yet.\", margin, yPosition);\n      }\n\n      // Footer\n      const now = new Date();\n      pdf.setFontSize(8);\n      pdf.setFont(\"helvetica\", \"italic\");\n      pdf.text(`Generated by FitFlow on ${now.toLocaleDateString()} at ${now.toLocaleTimeString()}`, \n        margin, pdf.internal.pageSize.getHeight() - 10);\n\n      // Generate safe filename\n      const safeFilename = routine.name ? \n        routine.name.replace(/[^a-z0-9\\s]/gi, '').replace(/\\s+/g, '_').toLowerCase() : \n        'routine_export';\n      \n      pdf.save(`${safeFilename}.pdf`);\n      \n      toast({\n        title: \"PDF Generated\",\n        description: \"Routine exported successfully with organized layout!\",\n      });\n    } catch (error) {\n      console.error(\"PDF generation error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: `Failed to generate PDF: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const shareViaEmail = () => {\n    const url = generateShareUrl();\n    const subject = encodeURIComponent(`Check out this workout routine: ${routineName}`);\n    const body = encodeURIComponent(`I'd like to share this workout routine with you:\\n\\n${routineName}\\n\\nView it here: ${url}\\n\\nGenerated by FitFlow`);\n    window.open(`mailto:?subject=${subject}&body=${body}`);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className={className} data-testid=\"export-routine-trigger\">\n          <Share2 className=\"w-4 h-4 mr-2\" />\n          Export & Share\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\" aria-describedby=\"export-routine-description\">\n        <DialogHeader>\n          <DialogTitle>Export & Share Routine</DialogTitle>\n          <DialogDescription id=\"export-routine-description\">\n            Export your routine as PDF or share it with others\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"export\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"export\" data-testid=\"tab-export\">Export PDF</TabsTrigger>\n            <TabsTrigger value=\"share\" data-testid=\"tab-share\">Share Routine</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"export\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  PDF Export\n                </CardTitle>\n                <CardDescription>\n                  Generate a professional PDF with organized spreadsheet-style layout\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isLoading ? (\n                  <div className=\"text-center py-4\">Loading routine details...</div>\n                ) : routine ? (\n                  <>\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold\">{routine.name}</h4>\n                      {routine.description && (\n                        <p className=\"text-sm text-gray-600\">{routine.description}</p>\n                      )}\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                        <span>{formatDuration(routine.totalDuration)}</span>\n                        <span>{routine.exerciseCount} exercises</span>\n                        {routine.classType && (\n                          <Badge variant=\"outline\">{routine.classType.name}</Badge>\n                        )}\n                      </div>\n                    </div>\n                    <Button\n                      onClick={exportToPDF}\n                      disabled={isExporting}\n                      className=\"w-full\"\n                      data-testid=\"button-export-pdf\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      {isExporting ? \"Generating PDF...\" : \"Download PDF\"}\n                    </Button>\n                  </>\n                ) : (\n                  <div className=\"text-center py-4 text-gray-500\">\n                    Failed to load routine details\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"share\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Link2 className=\"w-5 h-5 mr-2\" />\n                  Share Link\n                </CardTitle>\n                <CardDescription>\n                  Generate a shareable link for this routine\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"share-url\">Shareable URL</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      id=\"share-url\"\n                      value={shareUrl || generateShareUrl()}\n                      readOnly\n                      data-testid=\"input-share-url\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => copyToClipboard(shareUrl || generateShareUrl())}\n                      data-testid=\"button-copy-url\"\n                    >\n                      {copied ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={shareViaEmail}\n                    className=\"justify-start\"\n                    data-testid=\"button-share-email\"\n                  >\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    Share via Email\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Share Options</CardTitle>\n                <CardDescription>\n                  Additional ways to share your routine\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-gray-600\">\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <p>Share the link with clients or fellow trainers</p>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <p>Recipients can view the routine without an account</p>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0\"></div>\n                    <p>Combine with PDF export for complete workout packages</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":18075},"client/src/components/global-search.tsx":{"content":"import { useState, useEffect, useRef, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, X, Clock, ListCheck, Dumbbell, Zap } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\n\ninterface SearchResult {\n  id: string;\n  type: 'routine' | 'exercise';\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: string;\n  duration?: number;\n  exerciseCount?: number;\n  equipment?: string;\n}\n\ninterface GlobalSearchProps {\n  onClose?: () => void;\n}\n\nexport default function GlobalSearch({ onClose }: GlobalSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [, setLocation] = useLocation();\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Fetch routines and exercises for search\n  const { data: routines = [] } = useQuery({\n    queryKey: [\"/api/routines\"],\n  });\n\n  const { data: exercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\"],\n  });\n\n  // Combine and filter results\n  const searchResults: SearchResult[] = useMemo(() => {\n    if (!query.trim()) return [];\n\n    const searchTerm = query.toLowerCase();\n    const results: SearchResult[] = [];\n\n    // Search routines\n    (routines as any[]).forEach((routine: any) => {\n      if (\n        routine.name?.toLowerCase().includes(searchTerm) ||\n        routine.description?.toLowerCase().includes(searchTerm) ||\n        routine.classType?.name?.toLowerCase().includes(searchTerm)\n      ) {\n        results.push({\n          id: routine.id,\n          type: 'routine',\n          title: routine.name,\n          description: routine.description,\n          category: routine.classType?.name,\n          duration: routine.totalDuration,\n          exerciseCount: routine.exerciseCount,\n        });\n      }\n    });\n\n    // Search exercises\n    (exercises as any[]).forEach((exercise: any) => {\n      if (\n        exercise.name?.toLowerCase().includes(searchTerm) ||\n        exercise.description?.toLowerCase().includes(searchTerm) ||\n        exercise.category?.toLowerCase().includes(searchTerm) ||\n        exercise.equipment?.toLowerCase().includes(searchTerm)\n      ) {\n        results.push({\n          id: exercise.id,\n          type: 'exercise',\n          title: exercise.name,\n          description: exercise.description,\n          category: exercise.category,\n          difficulty: exercise.difficulty,\n          equipment: exercise.equipment,\n        });\n      }\n    });\n\n    return results.slice(0, 10); // Limit results\n  }, [query, routines, exercises]);\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Cmd/Ctrl + K to open search\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        setIsOpen(true);\n        setTimeout(() => inputRef.current?.focus(), 100);\n      }\n      \n      // Escape to close\n      if (e.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n        setQuery(\"\");\n        onClose?.();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onClose]);\n\n  // Click outside to close\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n        setQuery(\"\");\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [isOpen]);\n\n  const handleResultClick = (result: SearchResult) => {\n    if (result.type === 'routine') {\n      setLocation('/routines');\n    } else {\n      setLocation('/exercises');\n    }\n    setIsOpen(false);\n    setQuery(\"\");\n    onClose?.();\n  };\n\n  const formatDuration = (minutes: number) => {\n    if (minutes < 60) return `${minutes}min`;\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return mins > 0 ? `${hours}h ${mins}min` : `${hours}h`;\n  };\n\n  return (\n    <div className=\"relative\" ref={searchRef}>\n      {/* Search Trigger Button */}\n      <Button\n        variant=\"outline\"\n        onClick={() => {\n          setIsOpen(true);\n          setTimeout(() => inputRef.current?.focus(), 100);\n        }}\n        className=\"w-full md:w-80 justify-between text-gray-500 bg-white hover:bg-gray-50\"\n        data-testid=\"global-search-trigger\"\n      >\n        <div className=\"flex items-center\">\n          <Search className=\"w-4 h-4 mr-2\" />\n          <span>Search routines, exercises...</span>\n        </div>\n        <div className=\"hidden md:flex items-center space-x-1\">\n          <kbd className=\"px-2 py-0.5 text-xs bg-gray-100 rounded\">⌘</kbd>\n          <kbd className=\"px-2 py-0.5 text-xs bg-gray-100 rounded\">K</kbd>\n        </div>\n      </Button>\n\n      {/* Search Modal/Dropdown */}\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 bg-black/20 backdrop-blur-sm md:relative md:inset-auto md:bg-transparent md:backdrop-blur-none\">\n          <div className=\"fixed top-20 left-4 right-4 md:absolute md:top-full md:left-0 md:right-auto md:w-96 md:mt-2\">\n            <Card className=\"shadow-xl\">\n              <CardContent className=\"p-0\">\n                {/* Search Input */}\n                <div className=\"flex items-center border-b p-4\">\n                  <Search className=\"w-4 h-4 text-gray-400 mr-3\" />\n                  <Input\n                    ref={inputRef}\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    placeholder=\"Search routines, exercises...\"\n                    className=\"border-none shadow-none focus-visible:ring-0 p-0\"\n                    data-testid=\"global-search-input\"\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setIsOpen(false);\n                      setQuery(\"\");\n                      onClose?.();\n                    }}\n                    data-testid=\"global-search-close\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Search Results */}\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {query.trim() && searchResults.length === 0 ? (\n                    <div className=\"p-4 text-center text-gray-500\" data-testid=\"search-no-results\">\n                      <Search className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" />\n                      <p>No results found for \"{query}\"</p>\n                    </div>\n                  ) : query.trim() ? (\n                    <div className=\"py-2\">\n                      {searchResults.map((result) => (\n                        <button\n                          key={`${result.type}-${result.id}`}\n                          onClick={() => handleResultClick(result)}\n                          className=\"w-full text-left p-4 hover:bg-gray-50 transition-colors\"\n                          data-testid={`search-result-${result.type}-${result.id}`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <div className={`w-8 h-8 rounded-lg flex items-center justify-center mt-0.5 ${\n                              result.type === 'routine' \n                                ? 'bg-blue-100 text-blue-600' \n                                : 'bg-green-100 text-green-600'\n                            }`}>\n                              {result.type === 'routine' ? (\n                                <ListCheck className=\"w-4 h-4\" />\n                              ) : (\n                                <Dumbbell className=\"w-4 h-4\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-gray-900 truncate\">\n                                {result.title}\n                              </h4>\n                              {result.description && (\n                                <p className=\"text-sm text-gray-600 truncate mt-1\">\n                                  {result.description}\n                                </p>\n                              )}\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {result.type}\n                                </Badge>\n                                {result.category && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {result.category}\n                                  </Badge>\n                                )}\n                                {result.difficulty && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {result.difficulty}\n                                  </Badge>\n                                )}\n                                {result.duration && (\n                                  <span className=\"text-xs text-gray-500 flex items-center\">\n                                    <Clock className=\"w-3 h-3 mr-1\" />\n                                    {formatDuration(result.duration)}\n                                  </span>\n                                )}\n                                {result.exerciseCount && (\n                                  <span className=\"text-xs text-gray-500 flex items-center\">\n                                    <Zap className=\"w-3 h-3 mr-1\" />\n                                    {result.exerciseCount} exercises\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </button>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"p-4 text-center text-gray-500\">\n                      <Search className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" />\n                      <p className=\"text-sm\">Start typing to search routines and exercises</p>\n                      <p className=\"text-xs mt-1\">Use ⌘K to quickly open search</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10883},"client/src/components/navigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Dumbbell, Bell, LogOut } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport GlobalSearch from \"@/components/global-search\";\n\ninterface NavigationProps {\n  currentTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nconst navigation = [\n  { id: 'dashboard', name: 'Dashboard', icon: null },\n  { id: 'classes', name: 'Classes', icon: null },\n  { id: 'routines', name: 'Routines', icon: null },\n  { id: 'exercises', name: 'Exercises', icon: null },\n  { id: 'programs', name: 'Programs', icon: null },\n  { id: 'calendar', name: 'Calendar', icon: null },\n  { id: 'clients', name: 'Clients', icon: null },\n  { id: 'presentation', name: 'Present', icon: null },\n];\n\nexport default function Navigation({ currentTab, onTabChange }: NavigationProps) {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('/api/auth/logout', { method: 'POST' }),\n    onSuccess: () => {\n      localStorage.removeItem('auth_token');\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      window.location.href = '/';\n    },\n    onError: () => {\n      // Clear local data even if API call fails\n      localStorage.removeItem('auth_token');\n      queryClient.clear();\n      window.location.href = '/';\n    },\n  });\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    return `${firstName?.charAt(0) || ''}${lastName?.charAt(0) || ''}`.toUpperCase() || 'U';\n  };\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-border\" data-testid=\"navigation-main\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <button \n              className=\"flex-shrink-0 flex items-center hover:opacity-80 transition-opacity\"\n              onClick={() => {\n                // Create a special route for landing page that shows for authenticated users\n                window.location.href = '/landing';\n              }}\n              data-testid=\"button-logo-home\"\n            >\n              <Dumbbell className=\"text-primary text-xl mr-3\" />\n              <span className=\"text-xl font-bold text-gray-900\">FitFlow</span>\n            </button>\n            <div className=\"hidden md:block ml-10\">\n              <div className=\"flex items-baseline space-x-4\">\n                {navigation.map((item) => (\n                  <button\n                    key={item.id}\n                    onClick={() => {\n                      onTabChange(item.id);\n                      navigate(item.id === 'dashboard' ? '/' : `/${item.id}`);\n                    }}\n                    className={cn(\n                      \"px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                      currentTab === item.id\n                        ? \"bg-primary/10 text-primary\"\n                        : \"text-gray-500 hover:text-gray-700 hover:bg-gray-100\"\n                    )}\n                    data-testid={`nav-${item.id}`}\n                  >\n                    {item.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Global Search */}\n            <div className=\"hidden md:block\">\n              <GlobalSearch />\n            </div>\n\n\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"p-2\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={(user as any)?.profileImageUrl || ''} alt=\"Profile\" />\n                    <AvatarFallback>{getInitials((user as any)?.firstName, (user as any)?.lastName)}</AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n\n                <DropdownMenuItem \n                  className=\"w-full flex items-center cursor-pointer\"\n                  onClick={() => logoutMutation.mutate()}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5429},"client/src/components/routine-builder.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { ChevronUp, ChevronDown, Trash2, Plus, Search } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { insertExerciseSchema, type Exercise, type RoutineExercise, type ClassType } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst exerciseFormSchema = insertExerciseSchema;\n\ntype ExerciseFormData = z.infer<typeof exerciseFormSchema>;\n\ninterface RoutineBuilderProps {\n  exercises: Exercise[];\n  classTypes: ClassType[];\n  routineExercises: (RoutineExercise & { exercise: Exercise })[];\n  onAddExercise: (exerciseId: string, orderIndex: number) => void;\n  onUpdateExercise: (id: string, data: Partial<RoutineExercise>) => void;\n  onRemoveExercise: (id: string) => void;\n  onReorderExercises: (fromIndex: number, toIndex: number) => void;\n  routineName: string;\n  onRoutineNameChange: (name: string) => void;\n  totalDuration: number;\n  classTypeId?: string;\n  onClassTypeChange: (classTypeId: string) => void;\n}\n\nexport default function RoutineBuilder({\n  exercises,\n  classTypes,\n  routineExercises,\n  onAddExercise,\n  onUpdateExercise,\n  onRemoveExercise,\n  onReorderExercises,\n  routineName,\n  onRoutineNameChange,\n  totalDuration,\n  classTypeId,\n  onClassTypeChange,\n}: RoutineBuilderProps) {\n  // Debug logging - remove after testing\n  // console.log(\"RoutineBuilder classTypes:\", classTypes);\n  // console.log(\"RoutineBuilder classTypes length:\", classTypes?.length);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [draggedItem, setDraggedItem] = useState<string | null>(null);\n  const [isCreateExerciseDialogOpen, setIsCreateExerciseDialogOpen] = useState(false);\n  const [editingExercise, setEditingExercise] = useState<RoutineExercise | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  \n  // Local state for debounced input values\n  const [localValues, setLocalValues] = useState<Record<string, any>>({});\n  const [debounceTimeouts, setDebounceTimeouts] = useState<Record<string, NodeJS.Timeout>>({});\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Debounced update function\n  const debouncedUpdate = useCallback((exerciseId: string, field: string, value: any) => {\n    // Clear existing timeout for this field\n    if (debounceTimeouts[`${exerciseId}-${field}`]) {\n      clearTimeout(debounceTimeouts[`${exerciseId}-${field}`]);\n    }\n\n    // Set new timeout\n    const timeoutId = setTimeout(() => {\n      onUpdateExercise(exerciseId, { [field]: value });\n      // Clean up timeout reference\n      setDebounceTimeouts(prev => {\n        const newTimeouts = { ...prev };\n        delete newTimeouts[`${exerciseId}-${field}`];\n        return newTimeouts;\n      });\n    }, 500); // 500ms debounce\n\n    setDebounceTimeouts(prev => ({\n      ...prev,\n      [`${exerciseId}-${field}`]: timeoutId\n    }));\n  }, [onUpdateExercise, debounceTimeouts]);\n\n  // Handle local input changes\n  const handleLocalChange = useCallback((exerciseId: string, field: string, value: any) => {\n    // Update local state immediately for responsive UI\n    setLocalValues(prev => ({\n      ...prev,\n      [`${exerciseId}-${field}`]: value\n    }));\n    \n    // Trigger debounced API update\n    debouncedUpdate(exerciseId, field, value);\n  }, [debouncedUpdate]);\n\n  // Get current value (local or from props)\n  const getCurrentValue = useCallback((exerciseId: string, field: string, defaultValue: any) => {\n    const localKey = `${exerciseId}-${field}`;\n    return localValues[localKey] !== undefined ? localValues[localKey] : defaultValue;\n  }, [localValues]);\n\n  // Clean up timeouts on unmount\n  useEffect(() => {\n    return () => {\n      Object.values(debounceTimeouts).forEach(clearTimeout);\n    };\n  }, [debounceTimeouts]);\n\n  const exerciseForm = useForm<ExerciseFormData>({\n    resolver: zodResolver(exerciseFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      difficultyLevel: \"Beginner\",\n      equipmentNeeded: \"\",\n      primaryMuscles: \"\",\n      secondaryMuscles: \"\",\n      category: \"strength\",\n      caloriesPerMinute: 5,\n      modifications: \"\",\n      safetyNotes: \"\",\n      classTypeId: \"none\",\n    },\n  });\n\n  // Create exercise mutation\n  const createExercise = useMutation({\n    mutationFn: async (data: ExerciseFormData) => {\n      // Convert \"none\" to null for the API\n      const processedData = {\n        ...data,\n        classTypeId: data.classTypeId === \"none\" ? null : data.classTypeId\n      };\n      return await apiRequest(\"POST\", \"/api/exercises\", processedData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsCreateExerciseDialogOpen(false);\n      exerciseForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Exercise created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create exercise. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onExerciseSubmit = (data: ExerciseFormData) => {\n    createExercise.mutate(data);\n  };\n\n  const handleCloseExerciseDialog = () => {\n    setIsCreateExerciseDialogOpen(false);\n    exerciseForm.reset();\n  };\n\n  const filteredExercises = exercises.filter(exercise => {\n    const matchesSearch = exercise.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || exercise.category === selectedCategory;\n    // Filter by routine's class type if one is selected - show only exercises for that class\n    const matchesClassType = !classTypeId || exercise.classTypeId === classTypeId;\n    return matchesSearch && matchesCategory && matchesClassType;\n  });\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return remainingSeconds > 0 ? `${minutes}m ${remainingSeconds}s` : `${minutes}m`;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'strength':\n        return '💪';\n      case 'cardio':\n        return '❤️';\n      case 'flexibility':\n        return '🧘';\n      case 'balance':\n        return '⚖️';\n      default:\n        return '🏃';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'strength':\n        return 'bg-red-100 text-red-600';\n      case 'cardio':\n        return 'bg-blue-100 text-blue-600';\n      case 'flexibility':\n        return 'bg-green-100 text-green-600';\n      case 'balance':\n        return 'bg-purple-100 text-purple-600';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const handleDragStart = (e: React.DragEvent, exerciseId: string) => {\n    setDraggedItem(exerciseId);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggedItem) {\n      const exercise = exercises.find(ex => ex.id === draggedItem);\n      if (exercise) {\n        onAddExercise(exercise.id, routineExercises.length);\n      }\n      setDraggedItem(null);\n    }\n  };\n\n  const handleExerciseReorder = (fromIndex: number, toIndex: number) => {\n    onReorderExercises(fromIndex, toIndex);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\" data-testid=\"routine-builder\">\n      {/* Exercise Library */}\n      <div className=\"lg:col-span-1\">\n        <Card className=\"h-fit\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <CardTitle className=\"text-lg\">Exercise Library</CardTitle>\n                {classTypeId && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Showing exercises for: {classTypes.find(ct => ct.id === classTypeId)?.name || 'Selected class'}\n                  </p>\n                )}\n              </div>\n              <Dialog open={isCreateExerciseDialogOpen} onOpenChange={setIsCreateExerciseDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-new-exercise\">\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add New\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Exercise</DialogTitle>\n                    <DialogDescription>\n                      Add a new exercise to your library that you can use in routines.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...exerciseForm}>\n                    <form onSubmit={exerciseForm.handleSubmit(onExerciseSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={exerciseForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Exercise Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter exercise name\" {...field} data-testid=\"input-new-exercise-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={exerciseForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Describe the exercise...\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"input-new-exercise-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={exerciseForm.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-new-exercise-category\">\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"strength\">Strength</SelectItem>\n                                  <SelectItem value=\"cardio\">Cardio</SelectItem>\n                                  <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                                  <SelectItem value=\"balance\">Balance</SelectItem>\n                                  <SelectItem value=\"sports\">Sports</SelectItem>\n                                  <SelectItem value=\"rehabilitation\">Rehabilitation</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={exerciseForm.control}\n                          name=\"difficultyLevel\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Difficulty</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-new-exercise-difficulty\">\n                                    <SelectValue placeholder=\"Select difficulty\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                                  <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                                  <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={exerciseForm.control}\n                          name=\"classTypeId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Class Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value || \"none\"}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-new-exercise-class-type\">\n                                    <SelectValue placeholder=\"Select class type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"none\">No specific class</SelectItem>\n                                  {classTypes && classTypes.length > 0 ? (\n                                    classTypes.map((classType) => (\n                                      <SelectItem key={classType.id} value={classType.id}>\n                                        {classType.name}\n                                      </SelectItem>\n                                    ))\n                                  ) : (\n                                    <SelectItem value=\"no-types\" disabled>No class types available</SelectItem>\n                                  )}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={exerciseForm.control}\n                          name=\"equipmentNeeded\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Equipment Needed</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., Dumbbells, Mat\" {...field} value={field.value || \"\"} data-testid=\"input-new-exercise-equipment\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={exerciseForm.control}\n                          name=\"caloriesPerMinute\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Calories per Minute</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"5\" \n                                  {...field}\n                                  value={field.value || \"\"}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                  data-testid=\"input-new-exercise-calories\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={exerciseForm.control}\n                        name=\"primaryMuscles\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Primary Muscles</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Chest, Shoulders\" {...field} value={field.value || \"\"} data-testid=\"input-new-exercise-primary\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={exerciseForm.control}\n                        name=\"modifications\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Modifications (Optional)</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Alternative variations for beginners or advanced...\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"input-new-exercise-modifications\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={exerciseForm.control}\n                        name=\"safetyNotes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Safety Notes (Optional)</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Important safety considerations...\" \n                                {...field}\n                                value={field.value || \"\"}\n                                data-testid=\"input-new-exercise-safety\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={handleCloseExerciseDialog}\n                          data-testid=\"button-cancel-exercise\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createExercise.isPending}\n                          data-testid=\"button-create-exercise\"\n                        >\n                          {createExercise.isPending ? \"Creating...\" : \"Create Exercise\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search exercises...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-library\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  variant={selectedCategory === \"\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(\"\")}\n                  data-testid=\"filter-all\"\n                >\n                  All\n                </Button>\n                <Button\n                  variant={selectedCategory === \"cardio\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(\"cardio\")}\n                  data-testid=\"filter-cardio\"\n                >\n                  Cardio\n                </Button>\n                <Button\n                  variant={selectedCategory === \"strength\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(\"strength\")}\n                  data-testid=\"filter-strength\"\n                >\n                  Strength\n                </Button>\n                <Button\n                  variant={selectedCategory === \"flexibility\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(\"flexibility\")}\n                  data-testid=\"filter-flexibility\"\n                >\n                  Flexibility\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"max-h-96 overflow-y-auto\">\n            <div className=\"space-y-3\">\n              {filteredExercises.map((exercise) => (\n                <div\n                  key={exercise.id}\n                  draggable\n                  onDragStart={(e) => handleDragStart(e, exercise.id)}\n                  className=\"p-3 bg-gray-50 rounded-lg cursor-move hover:bg-gray-100 transition-colors\"\n                  data-testid={`exercise-library-${exercise.id}`}\n                >\n                  <div className=\"flex items-center\">\n                    <div className={`w-10 h-10 ${getCategoryColor(exercise.category)} rounded-lg flex items-center justify-center mr-3 flex-shrink-0`}>\n                      <span className=\"text-sm\">{getCategoryIcon(exercise.category)}</span>\n                    </div>\n                    <div className=\"min-w-0\">\n                      <h4 className=\"font-medium text-gray-900 text-sm\" data-testid={`exercise-name-${exercise.id}`}>\n                        {exercise.name}\n                      </h4>\n                      <p className=\"text-xs text-gray-600\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {exercise.category}\n                        </Badge>\n                        {' • '}\n                        <span>{exercise.primaryMuscles}</span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {filteredExercises.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-exercises-message\">\n                  <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  {classTypeId ? (\n                    <div>\n                      <p className=\"text-lg font-medium mb-2\">No exercises found for this class type</p>\n                      <p className=\"text-sm mb-4\">Try creating a new exercise for {classTypes.find(ct => ct.id === classTypeId)?.name || 'this class'}</p>\n                    </div>\n                  ) : (\n                    <div>\n                      <p className=\"text-lg font-medium mb-2\">No exercises found</p>\n                      <p className=\"text-sm mb-4\">Try adjusting your search or category filters</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Routine Builder */}\n      <div className=\"lg:col-span-2\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex-1\">\n                <Input\n                  value={routineName}\n                  onChange={(e) => onRoutineNameChange(e.target.value)}\n                  className=\"text-lg font-semibold border-none p-0 focus-visible:ring-0\"\n                  placeholder=\"Routine Name\"\n                  data-testid=\"input-routine-name\"\n                />\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Total Duration: <span className=\"font-medium\" data-testid=\"text-total-duration\">\n                    {formatDuration(totalDuration)}\n                  </span>\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Select value={classTypeId} onValueChange={onClassTypeChange}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-class-type\">\n                    <SelectValue placeholder=\"Class Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {classTypes.map((classType) => (\n                      <SelectItem key={classType.id} value={classType.id}>\n                        {classType.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            {/* Drop Zone */}\n            <div\n              onDragOver={handleDragOver}\n              onDrop={handleDrop}\n              className={`border-2 border-dashed rounded-lg p-8 text-center mb-6 min-h-32 flex items-center justify-center transition-colors ${\n                draggedItem ? 'border-primary bg-primary/5' : 'border-gray-300'\n              }`}\n              data-testid=\"routine-drop-zone\"\n            >\n              <div>\n                <Plus className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-lg font-medium text-gray-500\">\n                  {draggedItem ? 'Drop exercise here' : 'Drag exercises here to build your routine'}\n                </p>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Or click exercises to add them manually\n                </p>\n              </div>\n            </div>\n\n            {/* Routine Exercises - Card Layout */}\n            {routineExercises.length > 0 && (\n              <div className=\"space-y-4\">\n                {routineExercises.map((routineExercise, index) => (\n                  <Card \n                    key={routineExercise.id}\n                    className=\"border-l-4 border-l-primary\"\n                    data-testid={`routine-exercise-${routineExercise.id}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"bg-primary text-primary-foreground rounded-full w-8 h-8 flex items-center justify-center text-sm font-semibold mr-4\">\n                            {index + 1}\n                          </div>\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900\" data-testid={`exercise-name-${routineExercise.id}`}>\n                              {routineExercise.exercise.name}\n                            </h3>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {routineExercise.exercise.category}\n                              </Badge>\n                              {routineExercise.exercise.primaryMuscles && (\n                                <span className=\"text-sm text-gray-600\">{routineExercise.exercise.primaryMuscles}</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => {\n                              const currentIndex = routineExercises.findIndex(ex => ex.id === routineExercise.id);\n                              if (currentIndex > 0) {\n                                handleExerciseReorder(currentIndex, currentIndex - 1);\n                              }\n                            }}\n                            disabled={index === 0}\n                            data-testid={`button-move-up-${routineExercise.id}`}\n                          >\n                            <ChevronUp className=\"w-4 h-4 text-gray-400\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => {\n                              const currentIndex = routineExercises.findIndex(ex => ex.id === routineExercise.id);\n                              if (currentIndex < routineExercises.length - 1) {\n                                handleExerciseReorder(currentIndex, currentIndex + 1);\n                              }\n                            }}\n                            disabled={index === routineExercises.length - 1}\n                            data-testid={`button-move-down-${routineExercise.id}`}\n                          >\n                            <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => onRemoveExercise(routineExercise.id)}\n                            className=\"text-red-400 hover:text-red-600\"\n                            data-testid={`button-remove-${routineExercise.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700\">Duration</Label>\n                          <div className=\"flex items-center mt-1\">\n                            <Input\n                              type=\"number\"\n                              value={getCurrentValue(routineExercise.id, 'durationSeconds', routineExercise.durationSeconds || '')}\n                              onChange={(e) => handleLocalChange(routineExercise.id, 'durationSeconds', parseInt(e.target.value) || 0)}\n                              className=\"w-20 text-sm\"\n                              placeholder=\"60\"\n                              data-testid={`input-duration-${routineExercise.id}`}\n                            />\n                            <span className=\"text-sm text-gray-600 ml-2\">seconds</span>\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700\">Repetitions</Label>\n                          <Input\n                            type=\"number\"\n                            value={getCurrentValue(routineExercise.id, 'repetitions', routineExercise.repetitions || '')}\n                            onChange={(e) => handleLocalChange(routineExercise.id, 'repetitions', parseInt(e.target.value) || 0)}\n                            className=\"w-20 text-sm mt-1\"\n                            placeholder=\"15\"\n                            data-testid={`input-reps-${routineExercise.id}`}\n                          />\n                        </div>\n\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700\">Sets</Label>\n                          <Input\n                            type=\"number\"\n                            value={getCurrentValue(routineExercise.id, 'sets', routineExercise.sets || '')}\n                            onChange={(e) => handleLocalChange(routineExercise.id, 'sets', parseInt(e.target.value) || 0)}\n                            className=\"w-20 text-sm mt-1\"\n                            placeholder=\"3\"\n                            data-testid={`input-sets-${routineExercise.id}`}\n                          />\n                        </div>\n\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700\">Rest Time</Label>\n                          <div className=\"flex items-center mt-1\">\n                            <Input\n                              type=\"number\"\n                              value={getCurrentValue(routineExercise.id, 'restSeconds', routineExercise.restSeconds || '')}\n                              onChange={(e) => handleLocalChange(routineExercise.id, 'restSeconds', parseInt(e.target.value) || 0)}\n                              className=\"w-20 text-sm\"\n                              placeholder=\"30\"\n                              data-testid={`input-rest-${routineExercise.id}`}\n                            />\n                            <span className=\"text-sm text-gray-600 ml-2\">seconds</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Music Section - Much More Space */}\n                      <div className=\"border-t pt-4\">\n                        <Label className=\"text-sm font-medium text-gray-700 mb-2 block\">Music & Song Assignment</Label>\n                        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                          <div>\n                            <Input\n                              type=\"text\"\n                              value={getCurrentValue(routineExercise.id, 'musicTitle', routineExercise.musicTitle || '')}\n                              onChange={(e) => handleLocalChange(routineExercise.id, 'musicTitle', e.target.value)}\n                              className=\"w-full\"\n                              placeholder=\"Song Title - Artist Name\"\n                              data-testid={`input-music-${routineExercise.id}`}\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Example: \"Eye of the Tiger - Survivor\" or \"Pump It - Black Eyed Peas\"\n                            </p>\n                          </div>\n                          <div>\n                            <Input\n                              type=\"text\"\n                              value={getCurrentValue(routineExercise.id, 'musicNotes', routineExercise.musicNotes || '')}\n                              onChange={(e) => handleLocalChange(routineExercise.id, 'musicNotes', e.target.value)}\n                              className=\"w-full\"\n                              placeholder=\"Music notes (BPM, energy level, cues)\"\n                              data-testid={`input-music-notes-${routineExercise.id}`}\n                            />\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Example: \"130 BPM, High energy, Start at chorus\"\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":37574},"client/src/components/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor: string;\n  bgColor: string;\n}\n\nexport default function StatsCard({ title, value, icon: Icon, iconColor, bgColor }: StatsCardProps) {\n  return (\n    <Card className=\"border border-gray-100\" data-testid={`stats-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className={`p-3 rounded-lg ${bgColor}`}>\n            <Icon className={`${iconColor}`} />\n          </div>\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"text-2xl font-bold text-gray-900\" data-testid={`stats-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1011},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      try {\n        return await apiRequest(\"/api/auth/user\");\n      } catch (err: any) {\n        if (err.message?.includes('401')) {\n          return null; // Return null for unauthorized instead of throwing\n        }\n        throw err;\n      }\n    },\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    refetchOnMount: false,\n    refetchOnWindowFocus: false,\n    refetchInterval: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":723},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(url: string, options?: RequestInit): Promise<any> {\n  const token = localStorage.getItem('auth_token');\n  \n  // Ultra-aggressive cache busting for production\n  const cacheKillerUrl = url.includes('?') \n    ? `${url}&_cb=${Date.now()}&_r=${Math.random()}` \n    : `${url}?_cb=${Date.now()}&_r=${Math.random()}`;\n  \n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache, no-store, must-revalidate',\n    'Pragma': 'no-cache',\n    'Expires': '0',\n    ...((options?.headers as Record<string, string>) || {}),\n  };\n  \n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const res = await fetch(cacheKillerUrl, {\n    credentials: 'include',\n    ...options,\n    headers,\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\n// Legacy method for backward compatibility\nexport async function apiRequestLegacy(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('auth_token');\n  \n  const headers: Record<string, string> = {};\n  if (data) headers['Content-Type'] = 'application/json';\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('auth_token');\n    \n    const headers: Record<string, string> = {};\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: true, // Force refetch on focus\n      staleTime: 0, // Always consider data stale\n      gcTime: 0, // Don't cache anything\n      retry: false,\n      refetchOnMount: true, // Always refetch on mount\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2781},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar-broken.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar as CalendarIcon, MapPin, Clock, Edit, Trash2 } from \"lucide-react\";\nimport { ClassEnrollment } from \"@/components/class-enrollment\";\nimport { \n  type CalendarEvent, \n  type ClassType,\n  type Routine,\n} from \"@shared/schema\";\nimport { CalendarEventForm } from \"@/components/calendar-event-form\";\n\ntype EventFormData = {\n  classTypeId: string;\n  routineId?: string;\n  eventDate: string;\n  startHour: string;\n  startMinute: string;\n  duration: string;\n  location?: string;\n  notes?: string;\n};\n\nexport default function Calendar() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [editingEvent, setEditingEvent] = useState<CalendarEvent | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: events, isLoading: eventsLoading } = useQuery<(CalendarEvent & { classType?: ClassType; routine?: Routine })[]>({\n    queryKey: [\"/api/calendar/events\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: classTypes, isLoading: classTypesLoading } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: routines, isLoading: routinesLoading } = useQuery<Routine[]>({\n    queryKey: [\"/api/routines\"],\n    enabled: isAuthenticated,\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: EventFormData) => {\n      // Get the selected class type for the title\n      const selectedClassType = classTypes?.find(ct => ct.id === data.classTypeId);\n      const title = selectedClassType?.name || \"Fitness Class\";\n      \n      // Calculate start and end times\n      const startTime = `${data.startHour}:${data.startMinute}`;\n      const startDateTime = new Date(`${data.eventDate}T${startTime}`);\n      const endDateTime = new Date(startDateTime.getTime() + (parseInt(data.duration) * 60 * 1000));\n      \n      const eventData = {\n        title,\n        classTypeId: data.classTypeId || null,\n        routineId: (data.routineId && data.routineId !== \"none\") ? data.routineId : null,\n        startDatetime: startDateTime.toISOString(),\n        endDatetime: endDateTime.toISOString(),\n        location: data.location || null,\n        notes: data.notes || null,\n        isRecurring: false,\n        recurrencePattern: null,\n      };\n      const response = await apiRequest(\"POST\", \"/api/calendar/events\", eventData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFormSubmit = (data: EventFormData) => {\n    if (editingEvent) {\n      updateEventMutation.mutate({ id: editingEvent.id, data });\n    } else {\n      createEventMutation.mutate(data);\n    }\n  };\n\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: EventFormData }) => {\n      // Get the selected class type for the title\n      const selectedClassType = classTypes?.find(ct => ct.id === data.classTypeId);\n      const title = selectedClassType?.name || \"Fitness Class\";\n      \n      // Calculate start and end times\n      const startTime = `${data.startHour}:${data.startMinute}`;\n      const startDateTime = new Date(`${data.eventDate}T${startTime}`);\n      const endDateTime = new Date(startDateTime.getTime() + (parseInt(data.duration) * 60 * 1000));\n      \n      const eventData = {\n        title,\n        classTypeId: data.classTypeId || null,\n        routineId: (data.routineId && data.routineId !== \"none\") ? data.routineId : null,\n        startDatetime: startDateTime.toISOString(),\n        endDatetime: endDateTime.toISOString(),\n        location: data.location || null,\n        notes: data.notes || null,\n        isRecurring: false,\n        recurrencePattern: null,\n      };\n      const response = await apiRequest(\"PUT\", `/api/calendar/events/${id}`, eventData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      setIsEditDialogOpen(false);\n      setEditingEvent(null);\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/calendar/events/${id}`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setEditingEvent(event);\n    const startDate = new Date(event.startDatetime);\n    setSelectedDate(startDate);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteEvent = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this event?\")) {\n      deleteEventMutation.mutate(id);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const getEventsByDate = (date: Date) => {\n    if (!events) return [];\n    const dateStr = date.toDateString();\n    return events.filter(event => \n      new Date(event.startDatetime).toDateString() === dateStr\n    );\n  };\n\n  const getDayEvents = () => {\n    return getEventsByDate(selectedDate);\n  };\n\n  const getColorForIndex = (index: number) => {\n    const colors = [\n      'bg-primary/10 text-primary border-primary',\n      'bg-fitness-600/10 text-fitness-600 border-fitness-600',\n      'bg-red-500/10 text-red-600 border-red-500',\n      'bg-yellow-500/10 text-yellow-600 border-yellow-500',\n      'bg-purple-500/10 text-purple-600 border-purple-500',\n    ];\n    return colors[index % colors.length];\n  };\n\n  // Helper function for quick scheduling\n  const handleQuickSchedule = (date: Date, startHour: number = 9) => {\n    setSelectedDate(date);\n    setIsCreateDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <Skeleton className=\"h-96 w-full\" />\n          <Skeleton className=\"lg:col-span-2 h-96 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"calendar-page\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Calendar & Scheduling</h1>\n          <p className=\"text-gray-600 mt-1\">Manage your class schedule and events</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-event\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Schedule Class</DialogTitle>\n            </DialogHeader>\n            <CalendarEventForm\n              classTypes={classTypes}\n              routines={routines}\n              selectedDate={selectedDate}\n              onSubmit={handleFormSubmit}\n              onCancel={() => setIsCreateDialogOpen(false)}\n              isLoading={createEventMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Event Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Edit Event</DialogTitle>\n            </DialogHeader>\n            {editingEvent && (\n              <CalendarEventForm\n                classTypes={classTypes}\n                routines={routines}\n                selectedDate={selectedDate}\n                onSubmit={handleFormSubmit}\n                onCancel={() => {\n                  setIsEditDialogOpen(false);\n                  setEditingEvent(null);\n                }}\n                isLoading={updateEventMutation.isPending}\n                editingEvent={editingEvent}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* Mini Calendar */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <CalendarIcon className=\"w-5 h-5 mr-2\" />\n                Calendar\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {selectedDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                </h3>\n              </div>\n              <div className=\"grid grid-cols-7 gap-1 text-xs text-gray-500 mb-2\">\n                <div className=\"text-center p-1\">Su</div>\n                <div className=\"text-center p-1\">Mo</div>\n                <div className=\"text-center p-1\">Tu</div>\n                <div className=\"text-center p-1\">We</div>\n                <div className=\"text-center p-1\">Th</div>\n                <div className=\"text-center p-1\">Fr</div>\n                <div className=\"text-center p-1\">Sa</div>\n              </div>\n              <div className=\"grid grid-cols-7 gap-1\">\n                {Array.from({ length: 35 }, (_, i) => {\n                  const firstDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n                  const startDate = new Date(firstDay);\n                  startDate.setDate(startDate.getDate() - firstDay.getDay() + i);\n                  \n                  const isCurrentMonth = startDate.getMonth() === selectedDate.getMonth();\n                  const isToday = startDate.toDateString() === new Date().toDateString();\n                  const isSelected = startDate.toDateString() === selectedDate.toDateString();\n                  const hasEvents = getEventsByDate(startDate).length > 0;\n                  \n                  return (\n                    <button\n                      key={i}\n                      onClick={() => setSelectedDate(startDate)}\n                      onDoubleClick={() => handleQuickSchedule(startDate)}\n                      className={`\n                        p-1 text-xs rounded hover:bg-gray-100 transition-colors relative\n                        ${isCurrentMonth ? 'text-gray-900' : 'text-gray-400'}\n                        ${isToday ? 'bg-primary text-primary-foreground' : ''}\n                        ${isSelected && !isToday ? 'bg-gray-200' : ''}\n                      `}\n                      data-testid={`calendar-date-${startDate.toISOString().split('T')[0]}`}\n                      title=\"Double-click to quickly schedule a class\"\n                    >\n                      {startDate.getDate()}\n                      {hasEvents && (\n                        <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-fitness-600 rounded-full\"></div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Upcoming Classes List */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                <CalendarIcon className=\"w-5 h-5 mr-2 text-primary\" />\n                Upcoming Classes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {eventsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {events && events\n                    .filter(event => new Date(event.startDatetime) > new Date())\n                    .slice(0, 8)\n                    .map((event, index) => (\n                      <div \n                        key={event.id}\n                        className={`p-3 rounded-lg border-l-4 ${getColorForIndex(index)} hover:bg-gray-50 transition-colors cursor-pointer`}\n                        onClick={() => setSelectedDate(new Date(event.startDatetime))}\n                        data-testid={`upcoming-event-${event.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-sm\" data-testid={`event-title-${event.id}`}>\n                              {event.title}\n                            </h4>\n                            <div className=\"flex items-center space-x-2 text-xs text-gray-600 mt-1\">\n                              <span>\n                                {formatTime(event.startDatetime.toString())}\n                              </span>\n                              <span>•</span>\n                              <span>\n                                {formatDate(event.startDatetime.toString())}\n                              </span>\n                              {event.location && (\n                                <>\n                                  <span>•</span>\n                                  <span>{event.location}</span>\n                                </>\n                              )}\n                            </div>\n                            <div className=\"flex items-center space-x-1 mt-2\">\n                              {event.classType && (\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`event-class-type-${event.id}`}>\n                                  {event.classType.name}\n                                </Badge>\n                              )}\n                              {event.routine && (\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`event-routine-${event.id}`}>\n                                  {event.routine.name}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-1 ml-2\">\n                            <ClassEnrollment \n                              eventId={event.id} \n                              eventTitle={event.title}\n                            />\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleEditEvent(event);\n                              }}\n                              data-testid={`button-edit-upcoming-${event.id}`}\n                              className=\"h-7 w-7 p-0\"\n                            >\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteEvent(event.id);\n                              }}\n                              data-testid={`button-delete-upcoming-${event.id}`}\n                              className=\"h-7 w-7 p-0\"\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  }\n                  {events && events.filter(event => new Date(event.startDatetime) > new Date()).length === 0 && (\n                    <div className=\"text-center py-8\">\n                      <CalendarIcon className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                      <p className=\"text-gray-500\">No upcoming classes scheduled</p>\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-3\"\n                        onClick={() => setIsCreateDialogOpen(true)}\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Schedule Your First Class\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Selected Day Events */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900\">\n              {formatDate(selectedDate.toISOString())}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {eventsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-24 w-full\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {getDayEvents().length > 0 ? (\n                  getDayEvents().map((event, index) => (\n                    <div \n                      key={event.id}\n                      className={`p-4 rounded-lg border-l-4 ${getColorForIndex(index)}`}\n                      data-testid={`event-item-${event.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg mb-2\" data-testid={`event-title-${event.id}`}>\n                            {event.title}\n                          </h3>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                            <div className=\"flex items-center\">\n                              <Clock className=\"w-4 h-4 mr-1\" />\n                              <span data-testid={`event-time-${event.id}`}>\n                                {formatTime(event.startDatetime.toString())} - {formatTime(event.endDatetime.toString())}\n                              </span>\n                            </div>\n                            {event.location && (\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`event-location-${event.id}`}>\n                                  {event.location}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              {event.classType && (\n                                <Badge variant=\"outline\" data-testid={`event-class-type-${event.id}`}>\n                                  {event.classType.name}\n                                </Badge>\n                              )}\n                              {event.routine && (\n                                <Badge variant=\"outline\" data-testid={`event-routine-${event.id}`}>\n                                  {event.routine.name}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex space-x-1\">\n                              <ClassEnrollment \n                                eventId={event.id} \n                                eventTitle={event.title}\n                              />\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditEvent(event)}\n                                data-testid={`button-edit-event-${event.id}`}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDeleteEvent(event.id)}\n                                data-testid={`button-delete-event-${event.id}`}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CalendarIcon className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                    <p className=\"text-gray-500\">No events scheduled for this day</p>\n                    <Button \n                      variant=\"outline\" \n                      className=\"mt-3\"\n                      onClick={() => setIsCreateDialogOpen(true)}\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Event for {formatDate(selectedDate.toISOString())}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default Calendar;\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                {formatDate(selectedDate.toISOString())}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {eventsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-24 w-full\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {getDayEvents().length > 0 ? (\n                    getDayEvents().map((event, index) => (\n                      <div \n                        key={event.id}\n                        className={`p-4 rounded-lg border-l-4 ${getColorForIndex(index)}`}\n                        data-testid={`event-item-${event.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-lg mb-2\" data-testid={`event-title-${event.id}`}>\n                              {event.title}\n                            </h3>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                              <div className=\"flex items-center\">\n                                <Clock className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`event-time-${event.id}`}>\n                                  {formatTime(event.startDatetime.toString())} - {formatTime(event.endDatetime.toString())}\n                                </span>\n                              </div>\n                              {event.location && (\n                                <div className=\"flex items-center\">\n                                  <MapPin className=\"w-4 h-4 mr-1\" />\n                                  <span data-testid={`event-location-${event.id}`}>\n                                    {event.location}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2\">\n                                {event.classType && (\n                                  <Badge variant=\"outline\" data-testid={`event-class-type-${event.id}`}>\n                                    {event.classType.name}\n                                  </Badge>\n                                )}\n                                {event.routine && (\n                                  <Badge variant=\"outline\" data-testid={`event-routine-${event.id}`}>\n                                    {event.routine.name}\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"flex space-x-1\">\n                                <ClassEnrollment \n                                  eventId={event.id} \n                                  eventTitle={event.title}\n                                />\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleEditEvent(event)}\n                                  data-testid={`button-edit-event-${event.id}`}\n                                  className=\"h-8 w-8 p-0\"\n                                >\n                                  <Edit className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleDeleteEvent(event.id)}\n                                  data-testid={`button-delete-event-${event.id}`}\n                                  className=\"h-8 w-8 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-12\" data-testid=\"text-no-events\">\n                      <CalendarIcon className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                      <p className=\"text-lg text-gray-500\">No events scheduled</p>\n                      <p className=\"text-sm text-gray-400 mb-6\">Schedule a class for this day</p>\n                      \n                      <Button\n                        onClick={() => handleQuickSchedule(selectedDate)}\n                        className=\"bg-primary hover:bg-primary/90 mb-4\"\n                        data-testid=\"button-add-event-empty-day\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Event\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30659},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { CalendarIcon, Clock, MapPin, Plus, Edit, Trash2, PlayCircle, Monitor } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CalendarEvent, ClassType, Routine } from \"@shared/schema\";\nimport CalendarEventForm from \"@/components/calendar-event-form\";\nimport ClassEnrollment from \"@/components/class-enrollment\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Utility functions\nconst formatDate = (dateString: string) => {\n  return new Date(dateString).toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n};\n\nconst formatTime = (dateString: string) => {\n  return new Date(dateString).toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  });\n};\n\nfunction Calendar() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<CalendarEvent | null>(null);\n\n  // Fetch data\n  const { data: events = [], isLoading: eventsLoading } = useQuery<CalendarEvent[]>({\n    queryKey: [\"/api/calendar/events\"],\n    retry: false,\n  });\n\n  const { data: classTypes = [] } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    retry: false,\n  });\n\n  const { data: routines = [] } = useQuery<Routine[]>({\n    queryKey: [\"/api/routines\"],\n    retry: false,\n  });\n\n  // Mutations\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      return apiRequest(\"/api/calendar/events\", {\n        method: \"POST\",\n        body: JSON.stringify(eventData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      return apiRequest(`/api/calendar/events/${eventData.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(eventData),\n      });\n    },\n    onSuccess: () => {\n      // Force refetch of calendar events to ensure UI updates with new data\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/calendar/events\"] });\n      setIsEditDialogOpen(false);\n      setEditingEvent(null);\n      toast({\n        title: \"Success\",\n        description: \"Event updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      return apiRequest(`/api/calendar/events/${eventId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Event handlers\n  const handleFormSubmit = (formData: any) => {\n    // Process form data to create proper event data structure\n    const selectedClassType = classTypes?.find(ct => ct.id === formData.classTypeId);\n    const selectedRoutine = routines?.find(r => r.id === formData.routineId);\n    \n    // Create start datetime from form fields - avoid timezone issues\n    const [year, month, day] = formData.eventDate.split('-').map(Number);\n    const startDate = new Date(year, month - 1, day); // month is 0-indexed\n    startDate.setHours(parseInt(formData.startHour), parseInt(formData.startMinute), 0, 0);\n    \n    // Create end datetime based on duration\n    const endDate = new Date(startDate);\n    endDate.setMinutes(endDate.getMinutes() + parseInt(formData.duration));\n    \n    // Create title from class type and routine (if selected)\n    const title = selectedRoutine \n      ? `${selectedClassType?.name || 'Class'}: ${selectedRoutine.name}`\n      : selectedClassType?.name || 'Fitness Class';\n    \n    const eventData = {\n      title,\n      classTypeId: formData.classTypeId,\n      routineId: formData.routineId && formData.routineId !== \"none\" ? formData.routineId : null,\n      startDatetime: startDate.toISOString(),\n      endDatetime: endDate.toISOString(),\n      location: formData.location || \"\",\n      notes: formData.notes || \"\",\n    };\n\n    if (editingEvent) {\n      updateEventMutation.mutate({ ...eventData, id: editingEvent.id });\n    } else {\n      createEventMutation.mutate(eventData);\n    }\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setEditingEvent(event);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteEvent = (eventId: string) => {\n    if (confirm(\"Are you sure you want to delete this event?\")) {\n      deleteEventMutation.mutate(eventId);\n    }\n  };\n\n  // Utility functions\n  const getEventsByDate = (date: Date) => {\n    if (!events) return [];\n    return events.filter((event: CalendarEvent) => {\n      const eventDate = new Date(event.startDatetime);\n      return eventDate.toDateString() === date.toDateString();\n    });\n  };\n\n  const getDayEvents = () => {\n    return getEventsByDate(selectedDate);\n  };\n\n  const getColorForIndex = (index: number) => {\n    const colors = [\n      'border-primary bg-primary/10',\n      'border-fitness-600 bg-fitness-600/10',\n      'border-red-500 bg-red-500/10',\n      'border-yellow-500 bg-yellow-500/10',\n      'border-purple-500 bg-purple-500/10',\n    ];\n    return colors[index % colors.length];\n  };\n\n  // Helper function for quick scheduling\n  const handleQuickSchedule = (date: Date) => {\n    setSelectedDate(date);\n    setIsCreateDialogOpen(true);\n  };\n\n  const isLoading = eventsLoading || !classTypes || !routines;\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Skeleton className=\"h-96 w-full\" />\n          <Skeleton className=\"h-96 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"calendar-page\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Calendar & Scheduling</h1>\n          <p className=\"text-gray-600 mt-1\">Manage your class schedule and events</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-event\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Schedule Class</DialogTitle>\n            </DialogHeader>\n            <CalendarEventForm\n              classTypes={classTypes}\n              routines={routines}\n              selectedDate={selectedDate}\n              onSubmit={handleFormSubmit}\n              onCancel={() => setIsCreateDialogOpen(false)}\n              isLoading={createEventMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Event Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Edit Event</DialogTitle>\n            </DialogHeader>\n            {editingEvent && (\n              <CalendarEventForm\n                classTypes={classTypes}\n                routines={routines}\n                selectedDate={selectedDate}\n                onSubmit={handleFormSubmit}\n                onCancel={() => {\n                  setIsEditDialogOpen(false);\n                  setEditingEvent(null);\n                }}\n                isLoading={updateEventMutation.isPending}\n                editingEvent={editingEvent}\n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        {/* Mini Calendar */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <CalendarIcon className=\"w-5 h-5 mr-2\" />\n                Calendar\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {selectedDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                </h3>\n              </div>\n              <div className=\"grid grid-cols-7 gap-1 text-xs text-gray-500 mb-2\">\n                <div className=\"text-center p-1\">Su</div>\n                <div className=\"text-center p-1\">Mo</div>\n                <div className=\"text-center p-1\">Tu</div>\n                <div className=\"text-center p-1\">We</div>\n                <div className=\"text-center p-1\">Th</div>\n                <div className=\"text-center p-1\">Fr</div>\n                <div className=\"text-center p-1\">Sa</div>\n              </div>\n              <div className=\"grid grid-cols-7 gap-1\">\n                {Array.from({ length: 35 }, (_, i) => {\n                  const firstDay = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n                  const startDate = new Date(firstDay);\n                  startDate.setDate(startDate.getDate() - firstDay.getDay() + i);\n                  \n                  const isCurrentMonth = startDate.getMonth() === selectedDate.getMonth();\n                  const isToday = startDate.toDateString() === new Date().toDateString();\n                  const isSelected = startDate.toDateString() === selectedDate.toDateString();\n                  const hasEvents = getEventsByDate(startDate).length > 0;\n                  \n                  return (\n                    <button\n                      key={i}\n                      onClick={() => setSelectedDate(startDate)}\n                      onDoubleClick={() => handleQuickSchedule(startDate)}\n                      className={`\n                        p-1 text-xs rounded hover:bg-gray-100 transition-colors relative\n                        ${isCurrentMonth ? 'text-gray-900' : 'text-gray-400'}\n                        ${isToday ? 'bg-primary text-primary-foreground' : ''}\n                        ${isSelected && !isToday ? 'bg-gray-200' : ''}\n                      `}\n                      data-testid={`calendar-date-${startDate.toISOString().split('T')[0]}`}\n                      title=\"Double-click to quickly schedule a class\"\n                    >\n                      {startDate.getDate()}\n                      {hasEvents && (\n                        <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-fitness-600 rounded-full\"></div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Upcoming Classes List */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                <CalendarIcon className=\"w-5 h-5 mr-2 text-primary\" />\n                Upcoming Classes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {eventsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {events && events\n                    .filter((event: CalendarEvent) => new Date(event.startDatetime) > new Date())\n                    .slice(0, 8)\n                    .map((event: CalendarEvent, index: number) => (\n                      <div \n                        key={event.id}\n                        className={`p-3 rounded-lg border-l-4 ${getColorForIndex(index)} hover:bg-gray-50 transition-colors cursor-pointer`}\n                        onClick={() => setSelectedDate(new Date(event.startDatetime))}\n                        data-testid={`upcoming-event-${event.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-sm\" data-testid={`event-title-${event.id}`}>\n                              {event.title}\n                            </h4>\n                            <div className=\"flex items-center space-x-2 text-xs text-gray-600 mt-1\">\n                              <span>\n                                {formatTime(event.startDatetime.toString())}\n                              </span>\n                              <span>•</span>\n                              <span>\n                                {formatDate(event.startDatetime.toString())}\n                              </span>\n                              {event.location && (\n                                <>\n                                  <span>•</span>\n                                  <span>{event.location}</span>\n                                </>\n                              )}\n                            </div>\n                            <div className=\"flex items-center space-x-1 mt-2\">\n                              {event.classType && (\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`event-class-type-${event.id}`}>\n                                  {event.classType.name}\n                                </Badge>\n                              )}\n                              {event.routine && (\n                                <Badge variant=\"outline\" className=\"text-xs\" data-testid={`event-routine-${event.id}`}>\n                                  {event.routine.name}\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-1 ml-2\">\n                            <ClassEnrollment \n                              eventId={event.id} \n                              eventTitle={event.title}\n                            />\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                navigate(`/coach-console/${event.id}`);\n                              }}\n                              data-testid={`button-coach-console-upcoming-${event.id}`}\n                              className=\"h-7 bg-green-600 hover:bg-green-700 text-white px-2\"\n                              title=\"Start Class\"\n                            >\n                              <PlayCircle className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleEditEvent(event);\n                              }}\n                              data-testid={`button-edit-upcoming-${event.id}`}\n                              className=\"h-7 w-7 p-0\"\n                            >\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteEvent(event.id);\n                              }}\n                              data-testid={`button-delete-upcoming-${event.id}`}\n                              className=\"h-7 w-7 p-0\"\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  }\n                  {events && events.filter((event: CalendarEvent) => new Date(event.startDatetime) > new Date()).length === 0 && (\n                    <div className=\"text-center py-8\">\n                      <CalendarIcon className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                      <p className=\"text-gray-500\">No upcoming classes scheduled</p>\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-3\"\n                        onClick={() => setIsCreateDialogOpen(true)}\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Schedule Your First Class\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Selected Day Events */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900\">\n              {formatDate(selectedDate.toISOString())}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {eventsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-24 w-full\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {getDayEvents().length > 0 ? (\n                  getDayEvents().map((event, index) => (\n                    <div \n                      key={event.id}\n                      className={`p-4 rounded-lg border-l-4 ${getColorForIndex(index)}`}\n                      data-testid={`event-item-${event.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg mb-2\" data-testid={`event-title-${event.id}`}>\n                            {event.title}\n                          </h3>\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                            <div className=\"flex items-center\">\n                              <Clock className=\"w-4 h-4 mr-1\" />\n                              <span data-testid={`event-time-${event.id}`}>\n                                {formatTime(event.startDatetime.toString())} - {formatTime(event.endDatetime.toString())}\n                              </span>\n                            </div>\n                            {event.location && (\n                              <div className=\"flex items-center\">\n                                <MapPin className=\"w-4 h-4 mr-1\" />\n                                <span data-testid={`event-location-${event.id}`}>\n                                  {event.location}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              {event.classType && (\n                                <Badge variant=\"outline\" data-testid={`event-class-type-${event.id}`}>\n                                  {event.classType.name}\n                                </Badge>\n                              )}\n                              {event.routine && (\n                                <Badge variant=\"outline\" data-testid={`event-routine-${event.id}`}>\n                                  {event.routine.name}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex space-x-1\">\n                              <ClassEnrollment \n                                eventId={event.id} \n                                eventTitle={event.title}\n                              />\n                              <Button\n                                size=\"sm\"\n                                variant=\"default\"\n                                onClick={() => navigate(`/coach-console/${event.id}`)}\n                                data-testid={`button-coach-console-event-${event.id}`}\n                                className=\"h-8 bg-green-600 hover:bg-green-700 text-white px-3\"\n                                title=\"Start Class\"\n                              >\n                                <Monitor className=\"w-3 h-3 mr-1\" />\n                                Coach Console\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditEvent(event)}\n                                data-testid={`button-edit-event-${event.id}`}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDeleteEvent(event.id)}\n                                data-testid={`button-delete-event-${event.id}`}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <CalendarIcon className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                    <p className=\"text-gray-500\">No events scheduled for this day</p>\n                    <Button \n                      variant=\"outline\" \n                      className=\"mt-3\"\n                      onClick={() => setIsCreateDialogOpen(true)}\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Event for {formatDate(selectedDate.toISOString())}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default Calendar;","size_bytes":24400},"client/src/pages/classes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, Users, Calendar, Dumbbell, Zap, ArrowLeft, Clock, Activity, ChevronRight, Search, Filter, SortAsc, SortDesc } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertClassTypeSchema, type ClassType, type InsertClassType, type Routine } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst classTypeFormSchema = insertClassTypeSchema.omit({ \n  id: true, \n  createdByUserId: true, \n  createdAt: true, \n  updatedAt: true,\n  isDefault: true \n});\n\ntype ClassTypeFormData = z.infer<typeof classTypeFormSchema>;\n\nexport default function Classes() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<ClassType | null>(null);\n  const [selectedClass, setSelectedClass] = useState<ClassType | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n\n\n  const form = useForm<ClassTypeFormData>({\n    resolver: zodResolver(classTypeFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n\n\n  // Fetch class types\n  const { data: classTypes = [], isLoading } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    retry: false,\n  });\n\n  // Filter and sort class types\n  const filteredAndSortedClassTypes = classTypes\n    .filter((classType) => {\n      if (!searchQuery) return true;\n      return (\n        classType.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (classType.description && classType.description.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    })\n    .sort((a, b) => {\n      let comparison = 0;\n      if (sortBy === \"name\") {\n        comparison = a.name.localeCompare(b.name);\n      } else if (sortBy === \"created\") {\n        comparison = new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\n      } else if (sortBy === \"type\") {\n        // Sort by default status (default classes first)\n        comparison = (b.isDefault ? 1 : 0) - (a.isDefault ? 1 : 0);\n      }\n      return sortOrder === \"asc\" ? comparison : -comparison;\n    });\n\n  // Fetch routines for selected class\n  const { data: classRoutines = [], isLoading: routinesLoading } = useQuery<(Routine & { exerciseCount: number })[]>({\n    queryKey: [\"/api/routines\"],\n    enabled: !!selectedClass,\n    select: (data) => selectedClass ? data.filter(routine => routine.classTypeId === selectedClass.id) : [],\n  });\n\n  // Create class type mutation\n  const createClassType = useMutation({\n    mutationFn: async (data: ClassTypeFormData) => {\n      return await apiRequest(\"POST\", \"/api/class-types\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/class-types\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Class type created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create class type. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update class type mutation\n  const updateClassType = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ClassTypeFormData> }) => {\n      return await apiRequest(\"PATCH\", `/api/class-types/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/class-types\"] });\n      setEditingClass(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Class type updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update class type. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete class type mutation\n  const deleteClassType = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/class-types/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/class-types\"] });\n      toast({\n        title: \"Success\",\n        description: \"Class type deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete class type. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const onSubmit = (data: ClassTypeFormData) => {\n    if (editingClass) {\n      updateClassType.mutate({ id: editingClass.id, data });\n    } else {\n      createClassType.mutate(data);\n    }\n  };\n\n  const handleEdit = (classType: ClassType) => {\n    setEditingClass(classType);\n    form.reset({\n      name: classType.name,\n      description: classType.description || null,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    deleteClassType.mutate(id);\n  };\n\n  const handleCloseDialog = () => {\n    setIsCreateDialogOpen(false);\n    setEditingClass(null);\n    form.reset();\n  };\n\n\n\n  const getClassIcon = (className: string) => {\n    const name = className.toLowerCase();\n    if (name.includes('hiit') || name.includes('cardio')) return <Zap className=\"w-5 h-5\" />;\n    if (name.includes('strength') || name.includes('weight')) return <Dumbbell className=\"w-5 h-5\" />;\n    if (name.includes('yoga') || name.includes('pilates')) return <Users className=\"w-5 h-5\" />;\n    return <Calendar className=\"w-5 h-5\" />;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-sm text-muted-foreground\">Loading classes...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // If a class is selected, show class detail view\n  if (selectedClass) {\n    return (\n      <div className=\"p-6 space-y-6\" data-testid=\"class-detail-page\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setSelectedClass(null)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-back-to-classes\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              Back to Classes\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\" data-testid={`text-class-name-${selectedClass.id}`}>\n                {selectedClass.name}\n              </h1>\n              {selectedClass.description && (\n                <p className=\"text-gray-600 mt-1\">{selectedClass.description}</p>\n              )}\n            </div>\n          </div>\n          <Button \n            className=\"flex items-center gap-2\" \n            onClick={() => {\n              // Store class type info for the routine builder\n              localStorage.setItem('newRoutineClassType', JSON.stringify({\n                id: selectedClass.id,\n                name: selectedClass.name\n              }));\n              navigate('/routines');\n            }}\n            data-testid=\"button-add-routine-to-class\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Add New Routine\n          </Button>\n        </div>\n\n        {/* Routines for this class */}\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Routines for {selectedClass.name}</h2>\n          {routinesLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-20 bg-gray-200 animate-pulse rounded-lg\" />\n              ))}\n            </div>\n          ) : classRoutines.length > 0 ? (\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"divide-y\">\n                  {classRoutines.map((routine, index) => (\n                    <div \n                      key={routine.id} \n                      className=\"p-4 hover:bg-gray-50 cursor-pointer transition-colors group\"\n                      onClick={() => {\n                        // Store the routine ID in localStorage for the routines tab to pick up\n                        localStorage.setItem('selectedRoutineId', routine.id);\n                        navigate('/routines');\n                      }}\n                      data-testid={`routine-item-${routine.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <Dumbbell className=\"w-4 h-4 text-primary\" />\n                            </div>\n                            <div className=\"min-w-0 flex-1\">\n                              <h3 className=\"font-medium text-gray-900 group-hover:text-primary transition-colors\" data-testid={`routine-name-${routine.id}`}>\n                                {routine.name}\n                              </h3>\n                              {routine.description && (\n                                <p className=\"text-sm text-gray-500 truncate\">{routine.description}</p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-6 text-sm text-gray-500 ml-4\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span data-testid={`routine-date-${routine.id}`}>\n                              {routine.createdAt ? new Date(routine.createdAt).toLocaleDateString() : 'N/A'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Activity className=\"w-4 h-4\" />\n                            <span data-testid={`routine-exercises-${routine.id}`}>\n                              {routine.exerciseCount || 0} exercises\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span data-testid={`routine-duration-${routine.id}`}>\n                              {Math.round((routine.totalDuration || 0) / 60)} min\n                            </span>\n                          </div>\n                          <ChevronRight className=\"w-4 h-4 text-gray-400 group-hover:text-primary transition-colors\" />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"text-no-routines-for-class\">\n              <div className=\"text-gray-500\">\n                <Dumbbell className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p className=\"text-lg\">No routines yet for {selectedClass.name}</p>\n                <p className=\"text-sm\">Create your first routine for this class!</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-classes-title\">\n            Class Types\n          </h1>\n          <p className=\"mt-2 text-gray-600\" data-testid=\"text-classes-description\">\n            Create and manage different types of fitness classes. Each class type can have multiple routines.\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen || !!editingClass} onOpenChange={(open) => {\n          if (!open) handleCloseDialog();\n          else setIsCreateDialogOpen(true);\n        }}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\" data-testid=\"button-create-class\">\n              <Plus className=\"w-4 h-4\" />\n              Create Class Type\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-dialog-title\">\n                {editingClass ? \"Edit Class Type\" : \"Create New Class Type\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingClass \n                  ? \"Update the details of your class type.\" \n                  : \"Create a new class type to organize your routines.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., HIIT, Yoga, Strength Training\"\n                          data-testid=\"input-class-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe this class type, target audience, and key benefits...\"\n                          className=\"min-h-[100px]\"\n                          data-testid=\"textarea-class-description\"\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCloseDialog}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createClassType.isPending || updateClassType.isPending}\n                    data-testid=\"button-save-class\"\n                  >\n                    {createClassType.isPending || updateClassType.isPending\n                      ? (editingClass ? \"Updating...\" : \"Creating...\")\n                      : (editingClass ? \"Update Class\" : \"Create Class\")\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search and Filter Controls */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search class types...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-classes\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-[140px]\" data-testid=\"select-sort-by\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"name\">Name</SelectItem>\n              <SelectItem value=\"created\">Date Created</SelectItem>\n              <SelectItem value=\"type\">Type</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\n            data-testid=\"button-sort-order\"\n          >\n            {sortOrder === \"asc\" ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Results Count */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n          {searchQuery ? `${filteredAndSortedClassTypes.length} of ${classTypes.length} class types` : `${classTypes.length} class types`}\n        </p>\n      </div>\n\n      {/* Class Types Grid */}\n      {filteredAndSortedClassTypes.length === 0 && searchQuery ? (\n        <Card className=\"border-dashed\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n              <Search className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-no-results-title\">\n              No Classes Found\n            </h3>\n            <p className=\"text-muted-foreground text-center max-w-sm mb-4\" data-testid=\"text-no-results-description\">\n              No class types match your search \"{searchQuery}\". Try adjusting your search terms.\n            </p>\n            <Button \n              variant=\"outline\" \n              onClick={() => setSearchQuery(\"\")}\n              data-testid=\"button-clear-search\"\n            >\n              Clear Search\n            </Button>\n          </CardContent>\n        </Card>\n      ) : classTypes.length === 0 ? (\n        <Card className=\"border-dashed\">\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n              <Dumbbell className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-empty-title\">\n              No Class Types Created\n            </h3>\n            <p className=\"text-muted-foreground text-center max-w-sm mb-4\" data-testid=\"text-empty-description\">\n              Get started by creating your first class type. This will help you organize your routines by different fitness styles.\n            </p>\n            <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-first-class\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Class Type\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredAndSortedClassTypes.map((classType: ClassType) => (\n            <Card key={classType.id} className=\"hover:shadow-md transition-shadow cursor-pointer\" onClick={() => setSelectedClass(classType)} data-testid={`card-class-${classType.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center text-primary\">\n                      {getClassIcon(classType.name)}\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg\" data-testid={`text-class-name-${classType.id}`}>\n                        {classType.name}\n                      </CardTitle>\n                      {classType.isDefault && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">\n                          Default\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\" onClick={(e) => e.stopPropagation()}>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit(classType);\n                      }}\n                      data-testid={`button-edit-class-${classType.id}`}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    {!classType.isDefault && (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={(e) => e.stopPropagation()}\n                            data-testid={`button-delete-class-${classType.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Class Type</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete \"{classType.name}\"? This action cannot be undone and will affect any routines associated with this class type.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(classType.id)}\n                              data-testid={`button-confirm-delete-${classType.id}`}\n                            >\n                              Delete Class Type\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              {classType.description && (\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-class-description-${classType.id}`}>\n                    {classType.description}\n                  </p>\n                </CardContent>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":25584},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertClientSchema, type Client, type InsertClient } from \"@shared/schema\";\nimport { Plus, User, Phone, Mail, Calendar, Target, AlertTriangle, Users, Search } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Attendance Tab Component\nfunction AttendanceTab({ clientId }: { clientId: string }) {\n  const queryClient = useQueryClient();\n  \n  const { data: attendance = [], isLoading } = useQuery({\n    queryKey: [\"/api/attendance/client\", clientId],\n  });\n\n  // Get only events where this client is enrolled\n  const { data: enrolledEvents = [] } = useQuery({\n    queryKey: [`/api/calendar/events/client/${clientId}`],\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async (data: { eventId: string; status: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/attendance\", {\n        clientId,\n        eventId: data.eventId,\n        status: data.status,\n        checkedInAt: new Date(),\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/client\", clientId] });\n    },\n  });\n\n  if (isLoading) {\n    return <div>Loading attendance...</div>;\n  }\n\n  const upcomingForClient = enrolledEvents.filter((event: any) => \n    new Date(event.startDatetime) > new Date()\n  ).slice(0, 5);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Check-in Section */}\n      <div>\n        <h4 className=\"font-medium mb-3\">Enrolled Classes</h4>\n        {upcomingForClient.length === 0 ? (\n          <p className=\"text-gray-500 text-sm\">Not enrolled in any upcoming classes</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {upcomingForClient.map((event: any) => (\n              <div key={event.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div>\n                  <p className=\"font-medium\">{event.title}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {format(new Date(event.startDatetime), \"MMM d, yyyy 'at' h:mm a\")}\n                  </p>\n                </div>\n                <Button\n                  size=\"sm\"\n                  onClick={() => checkInMutation.mutate({ \n                    eventId: event.id, \n                    status: \"checked_in\" \n                  })}\n                  disabled={checkInMutation.isPending}\n                  data-testid={`button-checkin-${event.id}`}\n                >\n                  Check In\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Attendance History */}\n      <div>\n        <h4 className=\"font-medium mb-3\">Attendance History</h4>\n        {attendance.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Calendar className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n            <p className=\"text-gray-500\">No attendance records yet</p>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {attendance.map((record: any) => (\n              <div key={record.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div>\n                  <p className=\"font-medium\">{record.event?.title || 'Class'}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {record.checkedInAt ? \n                      format(new Date(record.checkedInAt), \"MMM d, yyyy 'at' h:mm a\") :\n                      format(new Date(record.createdAt), \"MMM d, yyyy\")\n                    }\n                  </p>\n                </div>\n                <Badge \n                  variant={record.status === \"checked_in\" ? \"default\" : \n                          record.status === \"no_show\" ? \"destructive\" : \"secondary\"}\n                >\n                  {record.status.replace('_', ' ')}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function Clients() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch clients\n  const { data: clients = [], isLoading: clientsLoading } = useQuery({\n    queryKey: [\"/api/clients\"],\n    enabled: isAuthenticated && !isLoading,\n  });\n\n  // Create client form\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema.omit({ trainerId: true })),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      goals: \"\",\n      medicalConditions: \"\",\n      injuries: \"\",\n      fitnessLevel: \"Beginner\",\n      notes: \"\",\n    },\n  });\n\n  // Create client mutation\n  const createClientMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      const response = await apiRequest(\"POST\", \"/api/clients\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Client created\",\n        description: \"New client has been added successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create client. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateClient = (data: InsertClient) => {\n    createClientMutation.mutate(data);\n  };\n\n  // Filter clients based on search  \n  const filteredClients = Array.isArray(clients) ? clients.filter((client: Client) =>\n    `${client.firstName} ${client.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) : [];\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isAuthenticated) {\n    return <div>Please log in to access clients.</div>;\n  }\n\n  return (\n    <main className=\"flex-1 p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Client Management</h1>\n          <p className=\"text-gray-600 mt-1\">Manage your clients and track their progress</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-client\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Client</DialogTitle>\n              <DialogDescription>\n                Create a new client profile with their personal information and fitness goals.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(handleCreateClient)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    {...form.register(\"firstName\")}\n                    placeholder=\"John\"\n                    data-testid=\"input-first-name\"\n                  />\n                  {form.formState.errors.firstName && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    {...form.register(\"lastName\")}\n                    placeholder=\"Doe\"\n                    data-testid=\"input-last-name\"\n                  />\n                  {form.formState.errors.lastName && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    {...form.register(\"email\")}\n                    type=\"email\"\n                    placeholder=\"john.doe@email.com\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    {...form.register(\"phone\")}\n                    placeholder=\"(555) 123-4567\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"fitnessLevel\">Fitness Level</Label>\n                <Select onValueChange={(value) => form.setValue(\"fitnessLevel\", value)}>\n                  <SelectTrigger data-testid=\"select-fitness-level\">\n                    <SelectValue placeholder=\"Select fitness level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"goals\">Goals</Label>\n                <Textarea\n                  {...form.register(\"goals\")}\n                  placeholder=\"What are their fitness goals?\"\n                  data-testid=\"input-goals\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"medicalConditions\">Medical Conditions</Label>\n                <Textarea\n                  {...form.register(\"medicalConditions\")}\n                  placeholder=\"Any medical conditions to be aware of?\"\n                  data-testid=\"input-medical-conditions\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"injuries\">Injuries or Limitations</Label>\n                <Textarea\n                  {...form.register(\"injuries\")}\n                  placeholder=\"Any injuries or physical limitations?\"\n                  data-testid=\"input-injuries\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Additional Notes</Label>\n                <Textarea\n                  {...form.register(\"notes\")}\n                  placeholder=\"Any additional notes about this client?\"\n                  data-testid=\"input-notes\"\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createClientMutation.isPending}\n                  data-testid=\"button-save\"\n                >\n                  {createClientMutation.isPending ? \"Creating...\" : \"Create Client\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search and filter */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search clients by name or email...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-clients\"\n          />\n        </div>\n      </div>\n\n      {/* Clients grid */}\n      {clientsLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredClients.length === 0 ? (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No clients found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {searchQuery ? \"No clients match your search criteria.\" : \"Get started by adding your first client.\"}\n            </p>\n            {!searchQuery && (\n              <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-add-first-client\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Client\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredClients.map((client: Client) => (\n            <Card key={client.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\" \n                  onClick={() => setSelectedClient(client)}\n                  data-testid={`card-client-${client.id}`}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"h-5 w-5\" />\n                  {client.firstName} {client.lastName}\n                </CardTitle>\n                <CardDescription>\n                  <Badge variant=\"secondary\">{client.fitnessLevel}</Badge>\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  {client.email && (\n                    <div className=\"flex items-center gap-2 text-gray-600\">\n                      <Mail className=\"h-4 w-4\" />\n                      {client.email}\n                    </div>\n                  )}\n                  {client.phone && (\n                    <div className=\"flex items-center gap-2 text-gray-600\">\n                      <Phone className=\"h-4 w-4\" />\n                      {client.phone}\n                    </div>\n                  )}\n                  {client.goals && (\n                    <div className=\"flex items-start gap-2 text-gray-600\">\n                      <Target className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span className=\"line-clamp-2\">{client.goals}</span>\n                    </div>\n                  )}\n                  {(client.medicalConditions || client.injuries) && (\n                    <div className=\"flex items-center gap-2 text-orange-600\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Medical notes</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-2 text-gray-500 text-xs\">\n                    <Calendar className=\"h-3 w-3\" />\n                    Added {client.createdAt ? format(new Date(client.createdAt), \"MMM d, yyyy\") : \"Recently\"}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Client detail modal */}\n      {selectedClient && (\n        <Dialog open={!!selectedClient} onOpenChange={() => setSelectedClient(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                {selectedClient.firstName} {selectedClient.lastName}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <Tabs defaultValue=\"profile\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n                <TabsTrigger value=\"progress\">Progress</TabsTrigger>\n                <TabsTrigger value=\"attendance\">Attendance</TabsTrigger>\n                <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"profile\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Contact Information</Label>\n                    <div className=\"space-y-2 mt-1\">\n                      {selectedClient.email && (\n                        <div className=\"flex items-center gap-2\">\n                          <Mail className=\"h-4 w-4 text-gray-400\" />\n                          <span>{selectedClient.email}</span>\n                        </div>\n                      )}\n                      {selectedClient.phone && (\n                        <div className=\"flex items-center gap-2\">\n                          <Phone className=\"h-4 w-4 text-gray-400\" />\n                          <span>{selectedClient.phone}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <Label>Fitness Level</Label>\n                    <div className=\"mt-1\">\n                      <Badge variant=\"secondary\">{selectedClient.fitnessLevel}</Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                {selectedClient.goals && (\n                  <div>\n                    <Label>Goals</Label>\n                    <p className=\"mt-1 text-sm text-gray-600\">{selectedClient.goals}</p>\n                  </div>\n                )}\n                \n                {selectedClient.medicalConditions && (\n                  <div>\n                    <Label>Medical Conditions</Label>\n                    <p className=\"mt-1 text-sm text-gray-600\">{selectedClient.medicalConditions}</p>\n                  </div>\n                )}\n                \n                {selectedClient.injuries && (\n                  <div>\n                    <Label>Injuries & Limitations</Label>\n                    <p className=\"mt-1 text-sm text-gray-600\">{selectedClient.injuries}</p>\n                  </div>\n                )}\n                \n                {selectedClient.notes && (\n                  <div>\n                    <Label>Additional Notes</Label>\n                    <p className=\"mt-1 text-sm text-gray-600\">{selectedClient.notes}</p>\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"progress\">\n                <ProgressTab clientId={selectedClient.id} />\n              </TabsContent>\n              \n              <TabsContent value=\"attendance\">\n                <AttendanceTab clientId={selectedClient.id} />\n              </TabsContent>\n              \n              <TabsContent value=\"notes\">\n                <NotesTab clientId={selectedClient.id} />\n              </TabsContent>\n            </Tabs>\n          </DialogContent>\n        </Dialog>\n      )}\n    </main>\n  );\n}\n\n// Progress Tab Component\nfunction ProgressTab({ clientId }: { clientId: string }) {\n  const [selectedExercise, setSelectedExercise] = useState<string>(\"all\");\n  const { data: progress = [], isLoading } = useQuery({\n    queryKey: [\"/api/progress-metrics/client\", clientId],\n  });\n\n  const { data: exercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\"],\n  });\n\n  const [isAddingProgress, setIsAddingProgress] = useState(false);\n  const queryClient = useQueryClient();\n\n  const progressForm = useForm({\n    defaultValues: {\n      exerciseId: \"\",\n      metricType: \"weight\",\n      value: \"\",\n      unit: \"kg\",\n      rpe: 5,\n      notes: \"\",\n    },\n  });\n\n  const addProgressMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/progress-metrics\", {\n        clientId,\n        ...data,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/progress-metrics/client\", clientId] });\n      setIsAddingProgress(false);\n      progressForm.reset();\n    },\n  });\n\n  const handleAddProgress = (data: any) => {\n    addProgressMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return <div>Loading progress...</div>;\n  }\n\n  const exerciseOptions = exercises.map((ex: any) => ({ \n    id: ex.id, \n    name: ex.name \n  }));\n\n  const filteredProgress = selectedExercise && selectedExercise !== \"all\"\n    ? progress.filter((p: any) => p.exerciseId === selectedExercise)\n    : progress;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Add Progress Section */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h4 className=\"font-medium\">Progress Tracking</h4>\n          <p className=\"text-sm text-gray-500\">Track client's performance metrics</p>\n        </div>\n        <Button \n          onClick={() => setIsAddingProgress(true)}\n          size=\"sm\"\n          data-testid=\"button-add-progress\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Progress\n        </Button>\n      </div>\n\n      {/* Exercise Filter */}\n      <div>\n        <Label>Filter by Exercise</Label>\n        <Select value={selectedExercise} onValueChange={setSelectedExercise}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"All exercises\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All exercises</SelectItem>\n            {exerciseOptions.map((exercise: any) => (\n              <SelectItem key={exercise.id} value={exercise.id}>\n                {exercise.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Progress Records */}\n      {filteredProgress.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <Target className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n          <p className=\"text-gray-500\">No progress records yet</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {filteredProgress.map((record: any) => (\n            <Card key={record.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium\">{record.exercise?.name || 'Exercise'}</p>\n                    <p className=\"text-sm text-gray-500 capitalize\">{record.metricType}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{record.value} {record.unit}</p>\n                    {record.rpe && (\n                      <p className=\"text-sm text-gray-500\">RPE: {record.rpe}/10</p>\n                    )}\n                  </div>\n                </div>\n                {record.notes && (\n                  <p className=\"text-sm text-gray-600 mt-2\">{record.notes}</p>\n                )}\n                <p className=\"text-xs text-gray-400 mt-1\">\n                  {format(new Date(record.recordedAt), \"MMM d, yyyy 'at' h:mm a\")}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Add Progress Dialog */}\n      <Dialog open={isAddingProgress} onOpenChange={setIsAddingProgress}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Progress Record</DialogTitle>\n            <DialogDescription>\n              Record a new performance metric for this client\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={progressForm.handleSubmit(handleAddProgress)} className=\"space-y-4\">\n            <div>\n              <Label>Exercise</Label>\n              <Select onValueChange={(value) => progressForm.setValue(\"exerciseId\", value)} required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select exercise\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {exerciseOptions.map((exercise: any) => (\n                    <SelectItem key={exercise.id} value={exercise.id}>\n                      {exercise.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Metric Type</Label>\n                <Select onValueChange={(value) => progressForm.setValue(\"metricType\", value)} defaultValue=\"weight\">\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"weight\">Weight</SelectItem>\n                    <SelectItem value=\"reps\">Reps</SelectItem>\n                    <SelectItem value=\"time\">Time</SelectItem>\n                    <SelectItem value=\"distance\">Distance</SelectItem>\n                    <SelectItem value=\"body_weight\">Body Weight</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>Unit</Label>\n                <Select onValueChange={(value) => progressForm.setValue(\"unit\", value)} defaultValue=\"kg\">\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select unit\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"kg\">kg</SelectItem>\n                    <SelectItem value=\"lbs\">lbs</SelectItem>\n                    <SelectItem value=\"seconds\">seconds</SelectItem>\n                    <SelectItem value=\"minutes\">minutes</SelectItem>\n                    <SelectItem value=\"meters\">meters</SelectItem>\n                    <SelectItem value=\"km\">km</SelectItem>\n                    <SelectItem value=\"reps\">reps</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Value</Label>\n                <Input\n                  {...progressForm.register(\"value\")}\n                  placeholder=\"e.g., 100\"\n                  data-testid=\"input-progress-value\"\n                />\n              </div>\n              <div>\n                <Label>RPE (1-10)</Label>\n                <Input\n                  {...progressForm.register(\"rpe\", { valueAsNumber: true })}\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  placeholder=\"5\"\n                  data-testid=\"input-progress-rpe\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label>Notes</Label>\n              <Textarea\n                {...progressForm.register(\"notes\")}\n                placeholder=\"Any additional notes...\"\n                data-testid=\"input-progress-notes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsAddingProgress(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={addProgressMutation.isPending}\n                data-testid=\"button-save-progress\"\n              >\n                {addProgressMutation.isPending ? \"Saving...\" : \"Save Progress\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Notes Tab Component\nfunction NotesTab({ clientId }: { clientId: string }) {\n  const [isAddingNote, setIsAddingNote] = useState(false);\n  const { data: notes = [], isLoading } = useQuery({\n    queryKey: [\"/api/client-notes\", clientId],\n  });\n\n  const queryClient = useQueryClient();\n\n  const noteForm = useForm({\n    defaultValues: {\n      note: \"\",\n      noteType: \"general\",\n    },\n  });\n\n  const addNoteMutation = useMutation({\n    mutationFn: async (data: { note: string; noteType: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/client-notes\", {\n        clientId,\n        ...data,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/client-notes\", clientId] });\n      setIsAddingNote(false);\n      noteForm.reset();\n    },\n  });\n\n  const handleAddNote = (data: { note: string; noteType: string }) => {\n    addNoteMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return <div>Loading notes...</div>;\n  }\n\n  const noteTypeColors = {\n    general: \"bg-gray-100 text-gray-800\",\n    progress: \"bg-blue-100 text-blue-800\", \n    injury: \"bg-red-100 text-red-800\",\n    goal: \"bg-green-100 text-green-800\",\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Add Note Section */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h4 className=\"font-medium\">Client Notes</h4>\n          <p className=\"text-sm text-gray-500\">Track important information and communications</p>\n        </div>\n        <Button \n          onClick={() => setIsAddingNote(true)}\n          size=\"sm\"\n          data-testid=\"button-add-note\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Note\n        </Button>\n      </div>\n\n      {/* Notes List */}\n      {notes.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <User className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n          <p className=\"text-gray-500\">No notes yet</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {notes.map((note: any) => (\n            <Card key={note.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <Badge \n                    className={noteTypeColors[note.noteType as keyof typeof noteTypeColors] || noteTypeColors.general}\n                    variant=\"secondary\"\n                  >\n                    {note.noteType}\n                  </Badge>\n                  <p className=\"text-xs text-gray-400\">\n                    {format(new Date(note.createdAt), \"MMM d, yyyy 'at' h:mm a\")}\n                  </p>\n                </div>\n                <p className=\"text-sm text-gray-700\">{note.note}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Add Note Dialog */}\n      <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Client Note</DialogTitle>\n            <DialogDescription>\n              Add a note about this client for future reference\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={noteForm.handleSubmit(handleAddNote)} className=\"space-y-4\">\n            <div>\n              <Label>Note Type</Label>\n              <Select onValueChange={(value) => noteForm.setValue(\"noteType\", value)} defaultValue=\"general\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select note type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"general\">General</SelectItem>\n                  <SelectItem value=\"progress\">Progress</SelectItem>\n                  <SelectItem value=\"injury\">Injury/Medical</SelectItem>\n                  <SelectItem value=\"goal\">Goal Setting</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>Note</Label>\n              <Textarea\n                {...noteForm.register(\"note\", { required: \"Note is required\" })}\n                placeholder=\"Enter your note here...\"\n                rows={4}\n                data-testid=\"input-note-content\"\n              />\n              {noteForm.formState.errors.note && (\n                <p className=\"text-sm text-red-600\">{noteForm.formState.errors.note.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsAddingNote(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={addNoteMutation.isPending}\n                data-testid=\"button-save-note\"\n              >\n                {addNoteMutation.isPending ? \"Saving...\" : \"Save Note\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":34226},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport StatsCard from \"@/components/stats-card\";\nimport { Plus, Play, Edit, ListCheck, CalendarDays, Clock, Users2, TrendingUp, BarChart3, PieChart, Zap, Search, Calendar, BookOpen, Target, Timer, Users } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, LineChart, Line, Area, AreaChart, Pie } from 'recharts';\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Routine {\n  id: string;\n  name: string;\n  description?: string;\n  totalDuration: number;\n  exerciseCount: number;\n  classType?: {\n    name: string;\n  };\n}\n\ninterface DashboardStats {\n  totalRoutines: number;\n  totalExercises: number;\n  weeklyClasses: number;\n  avgDuration: number;\n  classTypes: number;\n}\n\ninterface AnalyticsData {\n  weeklyActivity: Array<{ week: string; routines: number; classes: number }>;\n  popularExercises: Array<{ name: string; count: number; category: string }>;\n  classTypeDistribution: Array<{ name: string; count: number; percentage: number }>;\n  monthlyTrends: Array<{ month: string; totalMinutes: number; avgDuration: number }>;\n}\n\ninterface ClassType {\n  id: string;\n  name: string;\n  description?: string;\n}\n\ninterface TodayClass {\n  id: string;\n  title: string;\n  startDatetime: string;\n  location?: string;\n  classType?: {\n    name: string;\n  };\n}\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  const [isNewRoutineOpen, setIsNewRoutineOpen] = useState(false);\n  const [routineName, setRoutineName] = useState(\"\");\n  const [routineDescription, setRoutineDescription] = useState(\"\");\n  const [selectedClassTypeId, setSelectedClassTypeId] = useState<string>(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: routines, isLoading: routinesLoading } = useQuery<Routine[]>({\n    queryKey: [\"/api/routines\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: allEvents, isLoading: eventsLoading } = useQuery<TodayClass[]>({\n    queryKey: [\"/api/calendar/events\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/dashboard/analytics\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: classTypes, isLoading: classTypesLoading } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: [\"/api/clients\"],\n    enabled: isAuthenticated,\n  });\n\n  // Create routine mutation\n  const createRoutineMutation = useMutation({\n    mutationFn: async (routineData: { name: string; description?: string; classTypeId?: string }) => {\n      return await apiRequest(\"/api/routines\", \"POST\", routineData);\n    },\n    onSuccess: (newRoutine) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/analytics\"] });\n      setIsNewRoutineOpen(false);\n      setRoutineName(\"\");\n      setRoutineDescription(\"\");\n      setSelectedClassTypeId(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Routine created successfully!\",\n      });\n      // Navigate to the routine builder\n      setLocation(`/routines`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create routine. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get upcoming 5 events\n  const upcomingEvents = allEvents\n    ?.filter(event => new Date(event.startDatetime) >= new Date())\n    ?.sort((a, b) => new Date(a.startDatetime).getTime() - new Date(b.startDatetime).getTime())\n    ?.slice(0, 5) || [];\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes}m`;\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const getColorForIndex = (index: number) => {\n    const colors = [\n      { bg: 'bg-primary/10', icon: 'text-primary' },\n      { bg: 'bg-fitness-600/10', icon: 'text-fitness-600' },\n      { bg: 'bg-red-500/10', icon: 'text-red-600' },\n      { bg: 'bg-yellow-500/10', icon: 'text-yellow-600' },\n      { bg: 'bg-purple-500/10', icon: 'text-purple-600' },\n    ];\n    return colors[index % colors.length];\n  };\n\n  const getBorderColorForIndex = (index: number) => {\n    const colors = [\n      'border-primary',\n      'border-fitness-600',\n      'border-red-500',\n      'border-yellow-500',\n      'border-purple-500',\n    ];\n    return colors[index % colors.length];\n  };\n\n  const COLORS = ['#3b82f6', '#f59e0b', '#ef4444', '#8b5cf6', '#10b981', '#f97316', '#06b6d4'];\n  \n  const getCategoryColor = (category: string) => {\n    const categoryColors: { [key: string]: string } = {\n      'Cardio': '#ef4444',\n      'Strength': '#3b82f6', \n      'Flexibility': '#10b981',\n      'Balance': '#f59e0b',\n      'HIIT': '#8b5cf6',\n      'Yoga': '#06b6d4',\n      'General': '#6b7280'\n    };\n    return categoryColors[category] || '#6b7280';\n  };\n\n  const handleCreateRoutine = () => {\n    if (!routineName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a routine name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRoutineMutation.mutate({\n      name: routineName.trim(),\n      description: routineDescription.trim() || undefined,\n      classTypeId: selectedClassTypeId && selectedClassTypeId !== \"none\" ? selectedClassTypeId : undefined,\n    });\n  };\n\n  const handleRoutineClick = (routineId: string) => {\n    setLocation(`/routines`);\n  };\n\n  const quickActions = [\n    {\n      title: \"Quick Workout\",\n      description: \"Start a 15-min routine\",\n      icon: Zap,\n      color: \"bg-orange-500\",\n      action: () => setLocation('/presentation')\n    },\n    {\n      title: \"Find Exercise\",\n      description: \"Search exercise database\",\n      icon: Search,\n      color: \"bg-blue-500\", \n      action: () => setLocation('/exercises')\n    },\n    {\n      title: \"Schedule Class\",\n      description: \"Add to calendar\",\n      icon: Calendar,\n      color: \"bg-green-500\",\n      action: () => setLocation('/calendar')\n    },\n    {\n      title: \"Browse Routines\",\n      description: \"View all workouts\",\n      icon: BookOpen,\n      color: \"bg-purple-500\",\n      action: () => setLocation('/routines')\n    },\n    {\n      title: \"Create Class Type\",\n      description: \"Add new class category\",\n      icon: Target,\n      color: \"bg-pink-500\",\n      action: () => setLocation('/classes')\n    },\n    {\n      title: \"Manage Clients\",\n      description: \"Track client progress\",\n      icon: Users,\n      color: \"bg-teal-500\",\n      action: () => setLocation('/clients')\n    },\n    {\n      title: \"Quick Timer\",\n      description: \"Start interval timer\",\n      icon: Timer,\n      color: \"bg-indigo-500\",\n      action: () => {\n        // Show a timer notification with countdown\n        toast({\n          title: \"30-Second Timer\",\n          description: \"Get ready for your next exercise!\",\n        });\n        \n        // Start countdown\n        let countdown = 30;\n        const interval = setInterval(() => {\n          countdown--;\n          if (countdown === 15) {\n            toast({\n              title: \"15 seconds left\",\n              description: \"Almost there!\",\n            });\n          } else if (countdown === 5) {\n            toast({\n              title: \"5 seconds left\",\n              description: \"Final countdown!\",\n            });\n          } else if (countdown === 0) {\n            toast({\n              title: \"Time's up!\",\n              description: \"Great work! Rest or move to next exercise.\",\n            });\n            clearInterval(interval);\n          }\n        }, 1000);\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"dashboard-page\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-welcome\">\n          Welcome back!\n        </h1>\n        <p className=\"text-gray-600 mt-1\">Ready to create amazing workouts today?</p>\n      </div>\n\n      {/* Top Priority: Upcoming Schedule with Quick Actions */}\n      <div className=\"grid gap-6 lg:grid-cols-4 mb-8\">\n        {/* Upcoming Schedule - Takes up 3/4 width */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                <CalendarDays className=\"w-5 h-5 mr-2 text-primary\" />\n                Upcoming Schedule\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {eventsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : upcomingEvents && upcomingEvents.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {upcomingEvents.slice(0, 5).map((event, index) => {\n                    const borderColor = getBorderColorForIndex(index);\n                    const colorClasses = getColorForIndex(index);\n                    \n                    return (\n                      <div\n                        key={event.id}\n                        className={`flex items-center justify-between p-4 rounded-lg border-2 ${borderColor} bg-white hover:shadow-md transition-all duration-200 cursor-pointer`}\n                        onClick={() => setLocation(`/coach-console/${event.id}`)}\n                        data-testid={`event-${event.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`w-12 h-12 ${colorClasses.bg} rounded-lg flex items-center justify-center`}>\n                            <CalendarDays className={`w-6 h-6 ${colorClasses.icon}`} />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg text-gray-900\">{event.title}</h3>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-600 mt-1\">\n                              <span className=\"flex items-center\">\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {new Date(event.startTime).toLocaleDateString()}\n                              </span>\n                              <span className=\"flex items-center\">\n                                <Clock className=\"w-4 h-4 mr-1\" />\n                                {new Date(event.startTime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}\n                              </span>\n                              {event.duration && (\n                                <span className=\"flex items-center\">\n                                  <Timer className=\"w-4 h-4 mr-1\" />\n                                  {event.duration}min\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setLocation(`/presentation/${event.routineId}`);\n                            }}\n                            data-testid={`present-${event.id}`}\n                          >\n                            <Play className=\"w-4 h-4 mr-1\" />\n                            Present\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setLocation(`/coach-console/${event.id}`);\n                            }}\n                            data-testid={`console-${event.id}`}\n                          >\n                            Console\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <CalendarDays className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                  <p className=\"text-lg font-medium mb-2\">No upcoming classes</p>\n                  <p className=\"text-sm mb-4\">Schedule your first fitness class to get started</p>\n                  <Button onClick={() => setLocation(\"/calendar\")} data-testid=\"button-schedule-first\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Schedule a Class\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions - Right side */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                <Zap className=\"w-5 h-5 mr-2 text-orange-600\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button\n                onClick={() => setLocation(\"/calendar\")}\n                className=\"w-full justify-start\"\n                data-testid=\"button-quick-schedule\"\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Schedule Class\n              </Button>\n              <Button\n                onClick={() => setLocation(\"/routines\")}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                data-testid=\"button-quick-routine\"\n              >\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                Create Routine\n              </Button>\n              <Button\n                onClick={() => setLocation(\"/clients\")}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                data-testid=\"button-quick-clients\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                Manage Clients\n              </Button>\n              <Button\n                onClick={() => setLocation(\"/exercises\")}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                data-testid=\"button-quick-exercises\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                Add Exercise\n              </Button>\n              <Button\n                onClick={() => setLocation(\"/presentation\")}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                data-testid=\"button-quick-workout\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Quick Workout\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Stats Cards - Moved below schedule */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <StatsCard\n          title=\"Total Routines\"\n          value={stats?.totalRoutines ?? 0}\n          icon={ListCheck}\n          iconColor=\"text-primary\"\n          bgColor=\"bg-primary/10\"\n        />\n        <StatsCard\n          title=\"This Week\"\n          value={stats?.weeklyClasses ?? 0}\n          icon={CalendarDays}\n          iconColor=\"text-fitness-600\"\n          bgColor=\"bg-fitness-600/10\"\n        />\n        <StatsCard\n          title=\"Avg Duration\"\n          value={`${stats?.avgDuration ?? 0}m`}\n          icon={Clock}\n          iconColor=\"text-yellow-600\"\n          bgColor=\"bg-yellow-500/10\"\n        />\n        <StatsCard\n          title=\"Class Types\"\n          value={stats?.classTypes ?? 0}\n          icon={Users2}\n          iconColor=\"text-purple-600\"\n          bgColor=\"bg-purple-500/10\"\n        />\n      </div>\n\n      {/* Top Section with Upcoming Schedule and Charts */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-8 mb-8\">\n        {/* Upcoming Schedule - Now prominently positioned */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <CalendarDays className=\"w-5 h-5 mr-2 text-primary\" />\n              Upcoming Schedule\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {eventsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            ) : upcomingEvents && upcomingEvents.length > 0 ? (\n              <div className=\"space-y-4\">\n                {upcomingEvents.slice(0, 5).map((event, index) => {\n                  const borderColor = getBorderColorForIndex(index);\n                  return (\n                    <div \n                      key={event.id} \n                      className={`border-l-4 ${borderColor} pl-4`}\n                      data-testid={`event-item-${event.id}`}\n                    >\n                      <p className={`text-sm font-medium ${getBorderColorForIndex(index).replace('border-', 'text-')}`}>\n                        {new Date(event.startDatetime).toLocaleDateString('en-US', {\n                          month: 'short',\n                          day: 'numeric'\n                        })} - {formatTime(event.startDatetime)}\n                      </p>\n                      <h4 className=\"font-semibold text-gray-900\" data-testid={`event-title-${event.id}`}>\n                        {event.title}\n                      </h4>\n                      {event.location && (\n                        <p className=\"text-sm text-gray-600\" data-testid={`event-location-${event.id}`}>\n                          {event.location}\n                        </p>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\" data-testid=\"text-no-events\">\n                <CalendarDays className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>No upcoming classes scheduled.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Weekly Activity Chart */}\n        <Card className=\"xl:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                <TrendingUp className=\"w-5 h-5 mr-2 text-primary\" />\n                Weekly Activity\n              </CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {analyticsLoading ? (\n              <Skeleton className=\"h-64 w-full\" />\n            ) : analyticsData?.weeklyActivity ? (\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <AreaChart data={analyticsData.weeklyActivity}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"week\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area type=\"monotone\" dataKey=\"routines\" stackId=\"1\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.6} />\n                  <Area type=\"monotone\" dataKey=\"classes\" stackId=\"1\" stroke=\"#f59e0b\" fill=\"#f59e0b\" fillOpacity={0.6} />\n                </AreaChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <TrendingUp className=\"w-12 h-12 mb-4 text-gray-300\" />\n                <p>No activity data yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Analytics Charts Row */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8 mb-8\">\n        {/* Monthly Trends */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <BarChart3 className=\"w-5 h-5 mr-2 text-fitness-600\" />\n              Monthly Workout Minutes\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {analyticsLoading ? (\n              <Skeleton className=\"h-64 w-full\" />\n            ) : analyticsData?.monthlyTrends ? (\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <LineChart data={analyticsData.monthlyTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"totalMinutes\" stroke=\"#f59e0b\" strokeWidth={3} dot={{ fill: '#f59e0b' }} />\n                </LineChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <BarChart3 className=\"w-12 h-12 mb-4 text-gray-300\" />\n                <p>No trend data yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Class Type Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <PieChart className=\"w-5 h-5 mr-2 text-purple-600\" />\n              Class Types\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {analyticsLoading ? (\n              <Skeleton className=\"h-48 w-full\" />\n            ) : analyticsData?.classTypeDistribution && analyticsData.classTypeDistribution.length > 0 ? (\n              <>\n                <ResponsiveContainer width=\"100%\" height={150}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={analyticsData.classTypeDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={20}\n                      outerRadius={60}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {analyticsData.classTypeDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n                <div className=\"space-y-2 mt-4\">\n                  {analyticsData.classTypeDistribution.map((item, index) => (\n                    <div key={item.name} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center\">\n                        <div \n                          className=\"w-3 h-3 rounded-full mr-2\" \n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        />\n                        <span className=\"text-gray-600\">{item.name}</span>\n                      </div>\n                      <span className=\"font-medium text-gray-900\">{item.percentage}%</span>\n                    </div>\n                  ))}\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <PieChart className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>No class data yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Popular Exercises - Full Width */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <BarChart3 className=\"w-5 h-5 mr-2 text-primary\" />\n              Popular Exercises\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {analyticsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {[...Array(6)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-16 w-full\" />\n                ))}\n              </div>\n            ) : analyticsData?.popularExercises && analyticsData.popularExercises.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {analyticsData.popularExercises.slice(0, 9).map((exercise, index) => (\n                  <div key={exercise.name} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center min-w-0\">\n                      <div \n                        className=\"w-3 h-3 rounded-full mr-3 flex-shrink-0\" \n                        style={{ backgroundColor: getCategoryColor(exercise.category) }}\n                      />\n                      <div className=\"min-w-0\">\n                        <p className=\"font-medium text-gray-900 truncate\" data-testid={`popular-exercise-${index}`}>\n                          {exercise.name}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">{exercise.category}</p>\n                      </div>\n                    </div>\n                    <span className=\"text-lg font-bold text-gray-700 ml-4\" data-testid={`exercise-count-${index}`}>\n                      {exercise.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <BarChart3 className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>No exercise data yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Routines - Full Width */}\n      <div className=\"mt-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">Recent Routines</CardTitle>\n              <Dialog open={isNewRoutineOpen} onOpenChange={setIsNewRoutineOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-new-routine\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Routine\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[425px]\" aria-describedby=\"create-routine-description\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Routine</DialogTitle>\n                  </DialogHeader>\n                  <p id=\"create-routine-description\" className=\"text-sm text-gray-600 mb-4\">\n                    Create a new workout routine with exercises and timing.\n                  </p>\n                  <div className=\"space-y-4 py-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"routine-name\">Routine Name</Label>\n                      <Input\n                        id=\"routine-name\"\n                        placeholder=\"Enter routine name...\"\n                        value={routineName}\n                        onChange={(e) => setRoutineName(e.target.value)}\n                        data-testid=\"input-routine-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"routine-description\">Description (Optional)</Label>\n                      <Textarea\n                        id=\"routine-description\"\n                        placeholder=\"Describe your routine...\"\n                        value={routineDescription}\n                        onChange={(e) => setRoutineDescription(e.target.value)}\n                        data-testid=\"input-routine-description\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"class-type\">Class Type (Optional)</Label>\n                      <Select value={selectedClassTypeId} onValueChange={setSelectedClassTypeId}>\n                        <SelectTrigger data-testid=\"select-class-type\">\n                          <SelectValue placeholder=\"Select a class type...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No Class Type</SelectItem>\n                          {classTypes?.map((classType) => (\n                            <SelectItem key={classType.id} value={classType.id}>\n                              {classType.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsNewRoutineOpen(false)}\n                      data-testid=\"button-cancel-routine\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleCreateRoutine}\n                      disabled={createRoutineMutation.isPending}\n                      data-testid=\"button-create-routine\"\n                    >\n                      {createRoutineMutation.isPending ? \"Creating...\" : \"Create Routine\"}\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {routinesLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {[...Array(6)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-20 w-full\" />\n                ))}\n              </div>\n            ) : routines && routines.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n                {routines.slice(0, 6).map((routine, index) => {\n                  const colors = getColorForIndex(index);\n                  return (\n                    <div\n                      key={routine.id}\n                      className=\"flex items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer\"\n                      data-testid={`routine-item-${routine.id}`}\n                      onClick={() => handleRoutineClick(routine.id)}\n                    >\n                      <div className={`w-12 h-12 ${colors.bg} rounded-lg flex items-center justify-center mr-4`}>\n                        <ListCheck className={`${colors.icon}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-gray-900 truncate\" data-testid={`routine-name-${routine.id}`}>\n                          {routine.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-600\">\n                          <span data-testid={`routine-duration-${routine.id}`}>\n                            {formatDuration(routine.totalDuration)}\n                          </span>\n                          {' • '}\n                          <span data-testid={`routine-exercises-${routine.id}`}>\n                            {routine.exerciseCount} exercises\n                          </span>\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-1 ml-2\" onClick={(e) => e.stopPropagation()}>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          data-testid={`button-play-${routine.id}`}\n                          onClick={() => setLocation('/presentation')}\n                        >\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          data-testid={`button-edit-${routine.id}`}\n                          onClick={() => handleRoutineClick(routine.id)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\" data-testid=\"text-no-routines\">\n                <ListCheck className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>No routines yet. Create your first routine to get started!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":35546},"client/src/pages/exercises-broken.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport ExerciseCard from \"@/components/exercise-card\";\nimport { Plus, Search } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertExerciseSchema, type Exercise, type InsertExercise, type ClassType } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst exerciseFormSchema = z.object({\n  name: z.string().min(1, \"Exercise name is required\"),\n  description: z.string().optional(),\n  difficultyLevel: z.enum([\"Beginner\", \"Intermediate\", \"Advanced\"]),\n  category: z.enum([\"strength\", \"cardio\", \"flexibility\", \"balance\", \"sports\", \"rehabilitation\"]),\n  equipmentNeeded: z.string().nullable().optional(),\n  primaryMuscles: z.string().nullable().optional(),\n  secondaryMuscles: z.string().nullable().optional(),\n  modifications: z.string().optional(),\n  safetyNotes: z.string().optional(),\n  classTypeId: z.string().optional(),\n  isPublic: z.boolean().optional(),\n});\n\ntype ExerciseFormData = z.infer<typeof exerciseFormSchema>;\n\nexport default function Exercises() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [filters, setFilters] = useState({\n    search: \"\",\n    category: \"all\",\n    difficulty: \"all\",\n    equipment: \"all\",\n  });\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedExercise, setSelectedExercise] = useState<Exercise | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: exercises, isLoading: exercisesLoading } = useQuery<Exercise[]>({\n    queryKey: [\"/api/exercises\", filters],\n    queryFn: async () => {\n      const searchParams = new URLSearchParams();\n      if (filters.search) searchParams.append('search', filters.search);\n      if (filters.category && filters.category !== 'all') searchParams.append('category', filters.category);\n      if (filters.difficulty && filters.difficulty !== 'all') searchParams.append('difficulty', filters.difficulty);\n      if (filters.equipment && filters.equipment !== 'all') searchParams.append('equipment', filters.equipment);\n      \n      const url = `/api/exercises${searchParams.toString() ? '?' + searchParams.toString() : ''}`;\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`${response.status}: ${response.statusText}`);\n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  const { data: classTypes, isLoading: classTypesLoading } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<ExerciseFormData>({\n    resolver: zodResolver(exerciseFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      difficultyLevel: \"Beginner\",\n      category: \"strength\",\n      equipmentNeeded: \"\",\n      primaryMuscles: \"\",\n      secondaryMuscles: \"\",\n      modifications: \"\",\n      safetyNotes: \"\",\n      classTypeId: \"none\",\n      isPublic: false,\n    },\n  });\n\n  const createExerciseMutation = useMutation({\n    mutationFn: async (data: ExerciseFormData) => {\n      // Convert \"none\" to null for the API\n      const processedData = {\n        ...data,\n        classTypeId: data.classTypeId === \"none\" ? null : data.classTypeId\n      };\n      const response = await apiRequest(\"POST\", \"/api/exercises\", processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Exercise created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create exercise\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateExerciseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ExerciseFormData }) => {\n      // Convert \"none\" to null for the API\n      const processedData = {\n        ...data,\n        classTypeId: data.classTypeId === \"none\" ? null : data.classTypeId\n      };\n      const response = await apiRequest(\"PUT\", `/api/exercises/${id}`, processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsEditDialogOpen(false);\n      setSelectedExercise(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Exercise updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update exercise\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteExerciseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/exercises/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsDeleteDialogOpen(false);\n      setSelectedExercise(null);\n      toast({\n        title: \"Success\",\n        description: \"Exercise deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete exercise\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ExerciseFormData) => {\n    if (selectedExercise) {\n      updateExerciseMutation.mutate({ id: selectedExercise.id, data });\n    } else {\n      createExerciseMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (exercise: Exercise) => {\n    setSelectedExercise(exercise);\n    // Pre-populate form with exercise data\n    form.reset({\n      name: exercise.name,\n      description: exercise.description || \"\",\n      difficultyLevel: exercise.difficultyLevel,\n      category: exercise.category,\n      equipmentNeeded: exercise.equipmentNeeded || \"\",\n      primaryMuscles: exercise.primaryMuscles || \"\",\n      secondaryMuscles: exercise.secondaryMuscles || \"\",\n      modifications: exercise.modifications || \"\",\n      safetyNotes: exercise.safetyNotes || \"\",\n      classTypeId: exercise.classTypeId || \"none\",\n      isPublic: exercise.isPublic || false,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (exercise: Exercise) => {\n    setSelectedExercise(exercise);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedExercise) {\n      deleteExerciseMutation.mutate(selectedExercise.id);\n    }\n  };\n\n  const handleAddToRoutine = (exercise: Exercise) => {\n    // TODO: Implement add to routine functionality\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"Add to routine functionality will be available soon\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <Skeleton className=\"h-32 w-full mb-8\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"exercises-page\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Exercise Database</h1>\n          <p className=\"text-gray-600 mt-1\">Browse and manage your exercise library</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-exercise\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Exercise\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Create New Exercise</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exercise Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter exercise name\" {...field} data-testid=\"input-exercise-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe the exercise...\" \n                          {...field} \n                          data-testid=\"input-exercise-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-exercise-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"strength\">Strength</SelectItem>\n                            <SelectItem value=\"cardio\">Cardio</SelectItem>\n                            <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                            <SelectItem value=\"balance\">Balance</SelectItem>\n                            <SelectItem value=\"sports\">Sports</SelectItem>\n                            <SelectItem value=\"rehabilitation\">Rehabilitation</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"classTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || \"none\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-exercise-class-type\">\n                              <SelectValue placeholder=\"Select class type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"none\">No specific class</SelectItem>\n                            {classTypes && classTypes.length > 0 ? (\n                              classTypes.map((classType) => (\n                                <SelectItem key={classType.id} value={classType.id}>\n                                  {classType.name}\n                                </SelectItem>\n                              ))\n                            ) : (\n                              <SelectItem value=\"no-types\" disabled>No class types available</SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"difficultyLevel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Difficulty Level</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-exercise-difficulty\">\n                              <SelectValue placeholder=\"Select difficulty\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                            <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                            <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"equipmentNeeded\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Equipment Needed</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. Dumbbells, No Equipment\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-exercise-equipment\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"primaryMuscles\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Primary Muscles</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. Chest, Shoulders\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-exercise-muscles\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel-exercise\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createExerciseMutation.isPending}\n                    data-testid=\"button-save-exercise\"\n                  >\n                    {createExerciseMutation.isPending ? \"Creating...\" : \"Create Exercise\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Filters and Search */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search exercises...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-exercises\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={filters.category} onValueChange={(value) => setFilters({ ...filters, category: value })}>\n                <SelectTrigger data-testid=\"select-filter-category\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"cardio\">Cardio</SelectItem>\n                  <SelectItem value=\"strength\">Strength</SelectItem>\n                  <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                  <SelectItem value=\"balance\">Balance</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"difficulty\">Difficulty</Label>\n              <Select value={filters.difficulty} onValueChange={(value) => setFilters({ ...filters, difficulty: value })}>\n                <SelectTrigger data-testid=\"select-filter-difficulty\">\n                  <SelectValue placeholder=\"All Levels\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                  <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                  <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"equipment\">Equipment</Label>\n              <Select value={filters.equipment} onValueChange={(value) => setFilters({ ...filters, equipment: value })}>\n                <SelectTrigger data-testid=\"select-filter-equipment\">\n                  <SelectValue placeholder=\"Any Equipment\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Any Equipment</SelectItem>\n                  <SelectItem value=\"No Equipment\">No Equipment</SelectItem>\n                  <SelectItem value=\"Dumbbells\">Dumbbells</SelectItem>\n                  <SelectItem value=\"Resistance Bands\">Resistance Bands</SelectItem>\n                  <SelectItem value=\"Mat\">Mat</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Exercise Grid */}\n      {exercisesLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-96 w-full\" />\n          ))}\n        </div>\n      ) : exercises && exercises.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"exercises-grid\">\n          {exercises.map((exercise) => (\n            <ExerciseCard\n              key={exercise.id}\n              exercise={exercise}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n              onAddToRoutine={handleAddToRoutine}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\" data-testid=\"text-no-exercises\">\n          <div className=\"text-gray-500\">\n            <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-lg\">No exercises found</p>\n            <p className=\"text-sm\">Try adjusting your search filters or create a new exercise.</p>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Exercise Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Edit Exercise</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Exercise Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter exercise name\" {...field} data-testid=\"input-edit-exercise-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the exercise...\" \n                        {...field} \n                        data-testid=\"input-edit-exercise-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"strength\">Strength</SelectItem>\n                          <SelectItem value=\"cardio\">Cardio</SelectItem>\n                          <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                          <SelectItem value=\"balance\">Balance</SelectItem>\n                          <SelectItem value=\"sports\">Sports</SelectItem>\n                          <SelectItem value=\"rehabilitation\">Rehabilitation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"classTypeId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || \"none\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-class-type\">\n                            <SelectValue placeholder=\"Select class type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No specific class</SelectItem>\n                          {classTypes && classTypes.length > 0 ? (\n                            classTypes.map((classType) => (\n                              <SelectItem key={classType.id} value={classType.id}>\n                                {classType.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-types\" disabled>No class types available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"difficultyLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Difficulty Level</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-difficulty\">\n                            <SelectValue placeholder=\"Select difficulty\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                          <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                          <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"equipmentNeeded\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Equipment Needed</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g. Dumbbells, No Equipment\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-edit-exercise-equipment\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setSelectedExercise(null);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-edit-exercise\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateExerciseMutation.isPending}\n                  data-testid=\"button-update-exercise\"\n                >\n                  {updateExerciseMutation.isPending ? \"Updating...\" : \"Update Exercise\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Exercise</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{selectedExercise?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => {\n                setIsDeleteDialogOpen(false);\n                setSelectedExercise(null);\n              }}\n              data-testid=\"button-cancel-delete-exercise\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              disabled={deleteExerciseMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete-exercise\"\n            >\n              {deleteExerciseMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":30644},"client/src/pages/exercises.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertExerciseSchema, type Exercise, type ClassType } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Search } from \"lucide-react\";\nimport ExerciseCard from \"@/components/exercise-card\";\n\nconst exerciseFormSchema = z.object({\n  name: z.string().min(1, \"Exercise name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  difficultyLevel: z.string().min(1, \"Difficulty level is required\"),\n  equipmentNeeded: z.string().optional(),\n  classTypeId: z.string().optional(),\n  primaryMuscles: z.string().optional(),\n  secondaryMuscles: z.string().optional(),\n});\n\ntype ExerciseFormData = z.infer<typeof exerciseFormSchema>;\n\nexport default function Exercises() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  \n  const [filters, setFilters] = useState({\n    search: \"\",\n    category: \"all\",\n    difficulty: \"all\",\n    equipment: \"all\",\n    classType: \"all\",\n  });\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedExercise, setSelectedExercise] = useState<Exercise | null>(null);\n  const [isFixing, setIsFixing] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch exercises with filters - force fresh data for production\n  const { data: exercises, isLoading: exercisesLoading, refetch: refetchExercises } = useQuery({\n    queryKey: [\"/api/exercises\", filters],\n    enabled: isAuthenticated,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    staleTime: 0,\n    gcTime: 0,\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (filters.search) params.append(\"search\", filters.search);\n      if (filters.category !== \"all\") params.append(\"category\", filters.category);\n      if (filters.difficulty !== \"all\") params.append(\"difficulty\", filters.difficulty);\n      if (filters.equipment !== \"all\") params.append(\"equipment\", filters.equipment);\n      if (filters.classType !== \"all\") params.append(\"classType\", filters.classType);\n      // Force cache-busting for production\n      params.append(\"_t\", Date.now().toString());\n      \n      return fetch(`/api/exercises?${params.toString()}`, {\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      }).then(res => res.json());\n    },\n  });\n\n  // Fetch class types for the dropdown - force fresh data\n  const { data: classTypes = [] } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    enabled: isAuthenticated,\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  const form = useForm<ExerciseFormData>({\n    resolver: zodResolver(exerciseFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      difficultyLevel: \"Beginner\",\n      category: \"strength\",\n      equipmentNeeded: \"\",\n      classTypeId: \"none\",\n      primaryMuscles: \"\",\n      secondaryMuscles: \"\",\n    },\n  });\n\n  const createExerciseMutation = useMutation({\n    mutationFn: async (data: ExerciseFormData) => {\n      const processedData = {\n        name: data.name,\n        description: data.description || null,\n        category: data.category,\n        difficultyLevel: data.difficultyLevel,\n        equipmentNeeded: data.equipmentNeeded || null,\n        primaryMuscles: data.primaryMuscles || null,\n        secondaryMuscles: data.secondaryMuscles || null,\n        modifications: null,\n        safetyNotes: null,\n        classTypeId: data.classTypeId === \"none\" ? null : data.classTypeId,\n        isPublic: false,\n      };\n      return await apiRequest(\"/api/exercises\", { \n        method: \"POST\", \n        body: JSON.stringify(processedData), \n        headers: { \"Content-Type\": \"application/json\" } \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Exercise created successfully!\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Exercise creation error:\", error);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create exercise. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateExerciseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ExerciseFormData }) => {\n      const processedData = {\n        name: data.name,\n        description: data.description || null,\n        category: data.category,\n        difficultyLevel: data.difficultyLevel,\n        equipmentNeeded: data.equipmentNeeded || null,\n        primaryMuscles: data.primaryMuscles || null,\n        secondaryMuscles: data.secondaryMuscles || null,\n        modifications: null,\n        safetyNotes: null,\n        classTypeId: data.classTypeId === \"none\" ? null : data.classTypeId,\n        isPublic: false,\n      };\n      return await apiRequest(`/api/exercises/${id}`, { \n        method: \"PUT\", \n        body: JSON.stringify(processedData), \n        headers: { \"Content-Type\": \"application/json\" } \n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsEditDialogOpen(false);\n      setSelectedExercise(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Exercise updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update exercise\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteExerciseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem('auth_token');\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      const response = await fetch(`/api/exercises/${id}`, {\n        method: \"DELETE\",\n        credentials: 'include',\n        headers,\n      });\n\n      if (!response.ok) {\n        const text = (await response.text()) || response.statusText;\n        throw new Error(`${response.status}: ${text}`);\n      }\n      \n      // DELETE returns 204 No Content, no JSON to parse\n      return null;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      setIsDeleteDialogOpen(false);\n      setSelectedExercise(null);\n      toast({\n        title: \"Success\",\n        description: \"Exercise deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Delete exercise error:\", error);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete exercise. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fix exercises mutation for production\n  const fixExercisesMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/fix-exercises\", {\n      method: \"POST\",\n    }),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setIsFixing(false);\n      toast({\n        title: \"Success\",\n        description: data.message || \"Exercises fixed successfully!\",\n      });\n    },\n    onError: (error) => {\n      setIsFixing(false);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to fix exercises\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFixExercises = () => {\n    setIsFixing(true);\n    fixExercisesMutation.mutate();\n  };\n\n  const onSubmit = (data: ExerciseFormData) => {\n    if (selectedExercise) {\n      updateExerciseMutation.mutate({ id: selectedExercise.id, data });\n    } else {\n      createExerciseMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (exercise: Exercise) => {\n    setSelectedExercise(exercise);\n    form.reset({\n      name: exercise.name,\n      description: exercise.description || \"\",\n      difficultyLevel: exercise.difficultyLevel,\n      category: exercise.category,\n      equipmentNeeded: exercise.equipmentNeeded || \"\",\n      primaryMuscles: exercise.primaryMuscles || \"\",\n      secondaryMuscles: exercise.secondaryMuscles || \"\",\n      classTypeId: exercise.classTypeId || \"none\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (exercise: Exercise) => {\n    setSelectedExercise(exercise);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedExercise) {\n      deleteExerciseMutation.mutate(selectedExercise.id);\n    }\n  };\n\n  const handleAddToRoutine = (exercise: Exercise) => {\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"Add to routine functionality will be available soon\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <Skeleton className=\"h-32 w-full mb-8\" />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"exercises-page\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Exercise Database</h1>\n            <p className=\"text-gray-600 mt-1\">Browse and manage your exercise library</p>\n          </div>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-add-exercise\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Exercise\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Exercise</DialogTitle>\n                <DialogDescription>\n                  Fill out the details below to create a new exercise for your library.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Exercise Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter exercise name\" {...field} data-testid=\"input-exercise-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-exercise-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"strength\">Strength</SelectItem>\n                              <SelectItem value=\"cardio\">Cardio</SelectItem>\n                              <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                              <SelectItem value=\"balance\">Balance</SelectItem>\n                              <SelectItem value=\"sports\">Sports</SelectItem>\n                              <SelectItem value=\"rehabilitation\">Rehabilitation</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"difficultyLevel\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Difficulty</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-exercise-difficulty\">\n                                <SelectValue placeholder=\"Select difficulty\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                              <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                              <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"classTypeId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Class Type</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-exercise-class-type\">\n                                <SelectValue placeholder=\"Select class type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">No specific class</SelectItem>\n                              {classTypes && classTypes.length > 0 ? (\n                                classTypes.map((classType: ClassType) => (\n                                  <SelectItem key={classType.id} value={classType.id}>\n                                    {classType.name}\n                                  </SelectItem>\n                                ))\n                              ) : (\n                                <SelectItem value=\"no-types\" disabled>No class types available</SelectItem>\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"equipmentNeeded\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Equipment</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g. Dumbbells\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"input-exercise-equipment\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"primaryMuscles\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Primary Muscles</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g. Chest, Shoulders\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"input-exercise-primary-muscles\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"secondaryMuscles\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Secondary Muscles</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"e.g. Triceps, Core\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"input-exercise-secondary-muscles\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Brief description of the exercise...\" \n                            {...field} \n                            value={field.value || \"\"}\n                            rows={2}\n                            data-testid=\"input-exercise-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                      data-testid=\"button-cancel-exercise\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createExerciseMutation.isPending}\n                      data-testid=\"button-save-exercise\"\n                    >\n                      {createExerciseMutation.isPending ? \"Creating...\" : \"Create Exercise\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters and Search */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n              <div>\n                <Label htmlFor=\"search\">Search</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Search exercises...\"\n                    value={filters.search}\n                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-exercises\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <Select value={filters.category} onValueChange={(value) => setFilters({ ...filters, category: value })}>\n                  <SelectTrigger data-testid=\"select-filter-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"cardio\">Cardio</SelectItem>\n                    <SelectItem value=\"strength\">Strength</SelectItem>\n                    <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                    <SelectItem value=\"balance\">Balance</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"difficulty\">Difficulty</Label>\n                <Select value={filters.difficulty} onValueChange={(value) => setFilters({ ...filters, difficulty: value })}>\n                  <SelectTrigger data-testid=\"select-filter-difficulty\">\n                    <SelectValue placeholder=\"All Levels\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Levels</SelectItem>\n                    <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"equipment\">Equipment</Label>\n                <Select value={filters.equipment} onValueChange={(value) => setFilters({ ...filters, equipment: value })}>\n                  <SelectTrigger data-testid=\"select-filter-equipment\">\n                    <SelectValue placeholder=\"Any Equipment\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Any Equipment</SelectItem>\n                    <SelectItem value=\"No Equipment\">No Equipment</SelectItem>\n                    <SelectItem value=\"Dumbbells\">Dumbbells</SelectItem>\n                    <SelectItem value=\"Resistance Bands\">Resistance Bands</SelectItem>\n                    <SelectItem value=\"Mat\">Mat</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"classType\">Class Type</Label>\n                <Select value={filters.classType} onValueChange={(value) => setFilters({ ...filters, classType: value })}>\n                  <SelectTrigger data-testid=\"select-filter-class-type\">\n                    <SelectValue placeholder=\"All Class Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Class Types</SelectItem>\n                    <SelectItem value=\"none\">None</SelectItem>\n                    {classTypes && classTypes.length > 0 ? (\n                      classTypes.map((classType: ClassType) => (\n                        <SelectItem key={classType.id} value={classType.id}>\n                          {classType.name}\n                        </SelectItem>\n                      ))\n                    ) : null}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exercise Grid */}\n        {exercisesLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-96 w-full\" />\n            ))}\n          </div>\n        ) : exercises && exercises.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"exercises-grid\">\n            {exercises.map((exercise: Exercise) => (\n              <ExerciseCard\n                key={exercise.id}\n                exercise={exercise}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n                onAddToRoutine={handleAddToRoutine}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"text-no-exercises\">\n            <div className=\"text-gray-500\">\n              <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-lg\">No exercises found</p>\n              <p className=\"text-sm\">Try adjusting your search filters or create a new exercise.</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Edit Exercise Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Edit Exercise</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Exercise Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter exercise name\" {...field} data-testid=\"input-edit-exercise-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"strength\">Strength</SelectItem>\n                          <SelectItem value=\"cardio\">Cardio</SelectItem>\n                          <SelectItem value=\"flexibility\">Flexibility</SelectItem>\n                          <SelectItem value=\"balance\">Balance</SelectItem>\n                          <SelectItem value=\"sports\">Sports</SelectItem>\n                          <SelectItem value=\"rehabilitation\">Rehabilitation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"difficultyLevel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Difficulty</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-difficulty\">\n                            <SelectValue placeholder=\"Select difficulty\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Beginner\">Beginner</SelectItem>\n                          <SelectItem value=\"Intermediate\">Intermediate</SelectItem>\n                          <SelectItem value=\"Advanced\">Advanced</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"classTypeId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class Type</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || \"none\"}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-edit-exercise-class-type\">\n                            <SelectValue placeholder=\"Select class type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No specific class</SelectItem>\n                          {classTypes && classTypes.length > 0 ? (\n                            classTypes.map((classType: ClassType) => (\n                              <SelectItem key={classType.id} value={classType.id}>\n                                {classType.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-types\" disabled>No class types available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"equipmentNeeded\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Equipment</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. Dumbbells\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-edit-exercise-equipment\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"primaryMuscles\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Primary Muscles</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. Chest, Shoulders\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-edit-exercise-primary-muscles\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"secondaryMuscles\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Secondary Muscles</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g. Triceps, Core\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-edit-exercise-secondary-muscles\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Brief description of the exercise...\" \n                        {...field} \n                        value={field.value || \"\"}\n                        rows={2}\n                        data-testid=\"input-edit-exercise-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setSelectedExercise(null);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-edit-exercise\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateExerciseMutation.isPending}\n                  data-testid=\"button-update-exercise\"\n                >\n                  {updateExerciseMutation.isPending ? \"Updating...\" : \"Update Exercise\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Exercise</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{selectedExercise?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => {\n                setIsDeleteDialogOpen(false);\n                setSelectedExercise(null);\n              }}\n              data-testid=\"button-cancel-delete-exercise\"\n            >\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              disabled={deleteExerciseMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete-exercise\"\n            >\n              {deleteExerciseMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":37761},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Header } from \"@/components/header\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { ServicesSection } from \"@/components/services-section\";\nimport { PricingSection } from \"@/components/pricing-section\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      <main>\n        <HeroSection />\n        <ServicesSection />\n        <PricingSection />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":567},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/presentation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward, \n  Square, \n  Plus,\n  Maximize2,\n  Minimize2\n} from \"lucide-react\";\nimport type { Routine, RoutineExercise, Exercise } from \"@shared/schema\";\n\nexport default function Presentation() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { routineId } = useParams<{ routineId?: string }>();\n  const [location] = useLocation();\n  \n  const [selectedRoutineId, setSelectedRoutineId] = useState<string>(\"\");\n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [hasStarted, setHasStarted] = useState(false);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: routines, isLoading: routinesLoading } = useQuery<Routine[]>({\n    queryKey: [\"/api/routines\"],\n    enabled: isAuthenticated,\n  });\n\n  // Auto-select routine from URL parameter\n  useEffect(() => {\n    if (routineId && routineId !== selectedRoutineId) {\n      setSelectedRoutineId(routineId);\n    }\n  }, [routineId, selectedRoutineId]);\n\n  const { data: selectedRoutine, isLoading: routineLoading } = useQuery<Routine & { \n    exercises: (RoutineExercise & { exercise: Exercise })[] \n  }>({\n    queryKey: [\"/api/routines\", selectedRoutineId],\n    enabled: !!selectedRoutineId,\n  });\n\n  // Reset state when routine changes\n  useEffect(() => {\n    if (selectedRoutineId) {\n      setCurrentExerciseIndex(0);\n      setIsPlaying(false);\n      setHasStarted(false);\n    }\n  }, [selectedRoutineId]);\n\n  // Timer effect\n  useEffect(() => {\n    if (isPlaying && timeRemaining > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeRemaining((prev) => {\n          if (prev <= 1) {\n            handleNextExercise(); // Auto-advance to next exercise\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isPlaying, timeRemaining]);\n\n  // Set initial time when exercise changes\n  useEffect(() => {\n    if (selectedRoutine?.exercises && selectedRoutine.exercises[currentExerciseIndex]) {\n      const exercise = selectedRoutine.exercises[currentExerciseIndex];\n      setTimeRemaining(exercise.durationSeconds || 60);\n      // Only auto-start if we've started the presentation already\n      if (hasStarted && currentExerciseIndex > 0) {\n        setIsPlaying(true);\n      }\n    }\n  }, [currentExerciseIndex, selectedRoutine, hasStarted]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (!selectedRoutine?.exercises) return;\n      \n      switch (e.key) {\n        case ' ':\n          e.preventDefault();\n          setIsPlaying(!isPlaying);\n          break;\n        case 'ArrowLeft':\n          e.preventDefault();\n          handlePreviousExercise();\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          handleNextExercise();\n          break;\n        case 'Escape':\n          e.preventDefault();\n          if (isFullscreen) {\n            document.exitFullscreen();\n            setIsFullscreen(false);\n          }\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isPlaying, selectedRoutine, isFullscreen]);\n\n  // Fullscreen change handler\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  const handlePlayPause = () => {\n    if (!hasStarted) {\n      setHasStarted(true);\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleNextExercise = () => {\n    if (selectedRoutine?.exercises && currentExerciseIndex < selectedRoutine.exercises.length - 1) {\n      setCurrentExerciseIndex(currentExerciseIndex + 1);\n    }\n  };\n\n  const handlePreviousExercise = () => {\n    if (currentExerciseIndex > 0) {\n      setCurrentExerciseIndex(currentExerciseIndex - 1);\n    }\n  };\n\n  const handleStop = () => {\n    setIsPlaying(false);\n    setHasStarted(false);\n    setCurrentExerciseIndex(0);\n    if (selectedRoutine?.exercises) {\n      setTimeRemaining(selectedRoutine.exercises[0]?.durationSeconds || 60);\n    }\n  };\n\n  const handleAddTime = () => {\n    setTimeRemaining(prev => prev + 30);\n  };\n\n  const toggleFullscreen = async () => {\n    try {\n      if (!isFullscreen) {\n        await document.documentElement.requestFullscreen();\n      } else {\n        await document.exitFullscreen();\n      }\n    } catch (error) {\n      console.error(\"Fullscreen error:\", error);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const getProgress = () => {\n    if (!selectedRoutine?.exercises || selectedRoutine.exercises.length === 0) return 0;\n    return Math.round(((currentExerciseIndex + 1) / selectedRoutine.exercises.length) * 100);\n  };\n\n  const getCurrentExercise = () => {\n    return selectedRoutine?.exercises[currentExerciseIndex];\n  };\n\n  const getUpcomingExercises = () => {\n    if (!selectedRoutine?.exercises) return [];\n    return selectedRoutine.exercises.slice(currentExerciseIndex + 1, currentExerciseIndex + 4);\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'strength':\n        return '💪';\n      case 'cardio':\n        return '❤️';\n      case 'flexibility':\n        return '🧘';\n      case 'balance':\n        return '⚖️';\n      default:\n        return '🏃';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'strength':\n        return 'bg-red-600';\n      case 'cardio':\n        return 'bg-blue-600';\n      case 'flexibility':\n        return 'bg-green-600';\n      case 'balance':\n        return 'bg-purple-600';\n      default:\n        return 'bg-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  if (!selectedRoutineId) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"presentation-page\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Presentation Mode</h1>\n          <p className=\"text-gray-600 mt-1\">Select a routine to start your presentation</p>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label htmlFor=\"routine-select\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Choose Routine\n                  </label>\n                  <Select onValueChange={setSelectedRoutineId}>\n                    <SelectTrigger data-testid=\"select-presentation-routine\">\n                      <SelectValue placeholder=\"Select a routine...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {routinesLoading ? (\n                        <div className=\"p-2\">Loading routines...</div>\n                      ) : routines && routines.length > 0 ? (\n                        routines.map((routine) => (\n                          <SelectItem key={routine.id} value={routine.id}>\n                            {routine.name}\n                          </SelectItem>\n                        ))\n                      ) : (\n                        <div className=\"p-2 text-gray-500\">No routines available</div>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button \n                  onClick={toggleFullscreen}\n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"button-fullscreen\"\n                >\n                  <Maximize2 className=\"w-4 h-4 mr-2\" />\n                  Enter Fullscreen Mode\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Routine Preview Cards */}\n          {routines && routines.length > 0 && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {routines.map((routine) => (\n                <Card \n                  key={routine.id} \n                  className=\"cursor-pointer hover:shadow-lg transition-shadow border-2 hover:border-primary\"\n                  onClick={() => setSelectedRoutineId(routine.id)}\n                  data-testid={`routine-preview-${routine.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                          {routine.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 line-clamp-2\">\n                          {routine.description || \"No description\"}\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setSelectedRoutineId(routine.id);\n                        }}\n                        data-testid={`button-select-routine-${routine.id}`}\n                      >\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"flex items-center\">\n                          <span className=\"w-2 h-2 bg-blue-400 rounded-full mr-1\"></span>\n                          Exercises\n                        </span>\n                        <span className=\"flex items-center\">\n                          <span className=\"w-2 h-2 bg-green-400 rounded-full mr-1\"></span>\n                          {Math.round((routine.totalDuration || 0) / 60)}min\n                        </span>\n                      </div>\n                      <div className=\"text-xs bg-gray-100 px-2 py-1 rounded\">\n                        General\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const currentExercise = getCurrentExercise();\n  const upcomingExercises = getUpcomingExercises();\n\n  return (\n    <div className={`${isFullscreen ? 'fixed inset-0 z-50' : ''} min-h-screen bg-gray-900 text-white`} data-testid=\"presentation-mode\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-8 border-b border-gray-700\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"presentation-routine-title\">\n            {selectedRoutine?.name || \"Loading...\"}\n          </h1>\n          <p className=\"text-gray-300\">\n            {selectedRoutine?.description || \"Workout routine presentation\"}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-400\">Exercise</p>\n            <p className=\"text-2xl font-bold\" data-testid=\"presentation-exercise-counter\">\n              {currentExerciseIndex + 1} of {selectedRoutine?.exercises?.length || 0}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-400\">Progress</p>\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"presentation-progress\">\n              {getProgress()}%\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            {!isFullscreen && (\n              <Button \n                onClick={toggleFullscreen}\n                size=\"sm\"\n                className=\"bg-gray-700 hover:bg-gray-600 text-white border-0\"\n                data-testid=\"button-enter-fullscreen\"\n              >\n                <Maximize2 className=\"w-4 h-4\" style={{color: '#ffffff'}} />\n              </Button>\n            )}\n            {isFullscreen && (\n              <Button \n                onClick={toggleFullscreen}\n                size=\"sm\"\n                className=\"bg-gray-700 hover:bg-gray-600 text-white border-0\"\n                data-testid=\"button-exit-fullscreen\"\n              >\n                <Minimize2 className=\"w-4 h-4\" style={{color: '#ffffff'}} />\n              </Button>\n            )}\n            <Button \n              onClick={handleStop}\n              className=\"bg-red-600 hover:bg-red-700 text-white border-0\"\n              data-testid=\"button-end-session\"\n            >\n              <Square className=\"w-4 h-4 mr-2\" style={{color: '#ffffff'}} />\n              End Session\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8 p-8 min-h-0 flex-1\">\n        {/* Current Exercise */}\n        <div className=\"lg:col-span-3 flex flex-col\">\n          {routineLoading ? (\n            <div className=\"bg-gray-800 rounded-2xl p-8 flex-1 flex items-center justify-center\">\n              <Skeleton className=\"h-32 w-64\" />\n            </div>\n          ) : currentExercise ? (\n            <div className=\"bg-gray-800 rounded-2xl p-8 flex-1 flex flex-col justify-center\">\n              <div className=\"text-center\">\n                <div className=\"mb-8\">\n                  <h2 className=\"text-6xl font-bold mb-4\" data-testid=\"presentation-current-exercise\">\n                    {currentExercise.exercise.name}\n                  </h2>\n                  <p className=\"text-2xl text-gray-300\" data-testid=\"presentation-current-description\">\n                    {currentExercise.exercise.description || \"Follow the exercise instructions\"}\n                  </p>\n                  {currentExercise.exercise.equipmentNeeded && currentExercise.exercise.equipmentNeeded !== 'None' && (\n                    <div className=\"mt-4 flex items-center justify-center\">\n                      <div className=\"bg-yellow-600 px-4 py-2 rounded-full text-sm font-medium\">\n                        🏋️ Equipment: {currentExercise.exercise.equipmentNeeded}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Timer Circle */}\n                <div className=\"relative mx-auto w-64 h-64 mb-8\">\n                  <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n                    <circle \n                      cx=\"50\" \n                      cy=\"50\" \n                      r=\"45\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"2\" \n                      fill=\"none\" \n                      className=\"text-gray-700\"\n                    />\n                    <circle \n                      cx=\"50\" \n                      cy=\"50\" \n                      r=\"45\" \n                      stroke=\"currentColor\" \n                      strokeWidth=\"2\" \n                      fill=\"none\" \n                      className=\"text-primary\" \n                      strokeDasharray=\"283\" \n                      strokeDashoffset={283 - (283 * timeRemaining) / (currentExercise.durationSeconds || 60)}\n                      strokeLinecap=\"round\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-5xl font-bold\" data-testid=\"presentation-timer\">\n                        {formatTime(timeRemaining)}\n                      </div>\n                      <div className=\"text-lg text-gray-400\">remaining</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Exercise Details */}\n                <div className=\"flex justify-center gap-12 max-w-md mx-auto\">\n                  {currentExercise.repetitions && (\n                    <div className=\"text-center\">\n                      <p className=\"text-3xl font-bold text-primary\" data-testid=\"presentation-reps\">\n                        {currentExercise.repetitions}\n                      </p>\n                      <p className=\"text-gray-400\">Reps</p>\n                    </div>\n                  )}\n                  {currentExercise.sets && (\n                    <div className=\"text-center\">\n                      <p className=\"text-3xl font-bold text-primary\" data-testid=\"presentation-sets\">\n                        {currentExercise.sets}\n                      </p>\n                      <p className=\"text-gray-400\">Sets</p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Music Info */}\n                {currentExercise.musicTitle && (\n                  <div className=\"mt-6 text-center\">\n                    <p className=\"text-lg text-gray-300\" data-testid=\"presentation-music\">\n                      🎵 {currentExercise.musicTitle}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-gray-800 rounded-2xl p-8 flex-1 flex items-center justify-center\">\n              <div className=\"text-center text-gray-400\">\n                <p className=\"text-xl\">No exercises in this routine</p>\n              </div>\n            </div>\n          )}\n\n          {/* Controls */}\n          <div className=\"flex items-center justify-center space-x-4 mt-8\">\n            <Button \n              onClick={handlePreviousExercise}\n              disabled={currentExerciseIndex === 0}\n              size=\"lg\"\n              className=\"bg-gray-700 hover:bg-gray-600 text-white border-0\"\n              data-testid=\"button-previous-exercise\"\n            >\n              <SkipBack className=\"w-6 h-6\" style={{color: '#ffffff'}} />\n            </Button>\n            <Button \n              onClick={handlePlayPause}\n              size=\"lg\"\n              className=\"px-8 bg-blue-600 hover:bg-blue-700 text-white border-0\"\n              data-testid=\"button-play-pause\"\n            >\n              {!hasStarted ? <Play className=\"w-6 h-6\" style={{color: '#ffffff'}} /> : (isPlaying ? <Pause className=\"w-6 h-6\" style={{color: '#ffffff'}} /> : <Play className=\"w-6 h-6\" style={{color: '#ffffff'}} />)}\n            </Button>\n            <Button \n              onClick={handleNextExercise}\n              disabled={!selectedRoutine?.exercises || currentExerciseIndex >= selectedRoutine.exercises.length - 1}\n              size=\"lg\"\n              className=\"bg-gray-700 hover:bg-gray-600 text-white border-0\"\n              data-testid=\"button-next-exercise\"\n            >\n              <SkipForward className=\"w-6 h-6\" style={{color: '#ffffff'}} />\n            </Button>\n            <Button \n              onClick={handleAddTime}\n              size=\"lg\"\n              className=\"bg-gray-700 hover:bg-gray-600 text-white border-0\"\n              data-testid=\"button-add-time\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" style={{color: '#ffffff'}} />\n              +30s\n            </Button>\n          </div>\n          \n          {/* Auto-flow indicator */}\n          <div className=\"text-center mt-4\">\n            <p className=\"text-sm text-gray-400\">\n              {!hasStarted ? \"Press play to start workout\" : \"Exercises advance automatically • Press spacebar to pause/resume\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Upcoming Exercises */}\n        <div className=\"lg:col-span-1\">\n          <div className=\"bg-gray-800 rounded-2xl p-6 h-full\">\n            <h3 className=\"text-xl font-semibold mb-6 text-center\">Up Next</h3>\n            <div className=\"space-y-4\">\n              {upcomingExercises.map((exercise, index) => (\n                <div key={exercise.id} className=\"bg-gray-700 rounded-lg p-4\" data-testid={`upcoming-exercise-${index}`}>\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3\">\n                      <span className=\"text-sm\">🏃</span>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\" data-testid={`upcoming-exercise-name-${index}`}>\n                        {exercise.exercise.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-400\" data-testid={`upcoming-exercise-duration-${index}`}>\n                        {formatTime(exercise.durationSeconds || 60)}\n                      </p>\n                    </div>\n                  </div>\n                  {exercise.musicTitle && (\n                    <p className=\"text-xs text-gray-400\" data-testid={`upcoming-exercise-music-${index}`}>\n                      🎵 {exercise.musicTitle}\n                    </p>\n                  )}\n                </div>\n              ))}\n              \n              {upcomingExercises.length === 0 && (\n                <div className=\"text-center text-gray-400 py-8\" data-testid=\"text-no-upcoming\">\n                  <p>No more exercises</p>\n                </div>\n              )}\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"mt-8\">\n              <div className=\"flex justify-between text-sm text-gray-400 mb-2\">\n                <span data-testid=\"presentation-progress-text\">\n                  Exercise {currentExerciseIndex + 1} of {selectedRoutine?.exercises?.length || 0}\n                </span>\n                <span data-testid=\"presentation-progress-percentage\">\n                  {getProgress()}%\n                </span>\n              </div>\n              <Progress value={getProgress()} className=\"h-2\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23855},"client/src/pages/routines.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport RoutineBuilder from \"@/components/routine-builder\";\nimport ExportRoutine from \"@/components/export-routine\";\nimport { Plus, Save, Filter, Share2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { \n  insertRoutineSchema, \n  insertRoutineExerciseSchema,\n  type Exercise, \n  type Routine, \n  type RoutineExercise,\n  type ClassType,\n  type InsertRoutine \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst routineFormSchema = z.object({\n  name: z.string().min(1, \"Routine name is required\"),\n  description: z.string().optional(),\n  classTypeId: z.string().optional(),\n});\n\ntype RoutineFormData = z.infer<typeof routineFormSchema>;\n\nexport default function Routines() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedRoutineId, setSelectedRoutineId] = useState<string | null>(null);\n  const [routineName, setRoutineName] = useState(\"New Routine\");\n  const [routineClassType, setRoutineClassType] = useState<string>(\"\");\n  const [filterClassType, setFilterClassType] = useState<string>(\"all\");\n\n  // Check for stored routine ID from navigation\n  useEffect(() => {\n    const storedRoutineId = localStorage.getItem('selectedRoutineId');\n    if (storedRoutineId) {\n      setSelectedRoutineId(storedRoutineId);\n      localStorage.removeItem('selectedRoutineId');\n    }\n  }, []);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: routines, isLoading: routinesLoading } = useQuery<(Routine & { classType?: ClassType; exerciseCount: number })[]>({\n    queryKey: [\"/api/routines\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: exercises, isLoading: exercisesLoading } = useQuery<Exercise[]>({\n    queryKey: [\"/api/exercises\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: classTypes, isLoading: classTypesLoading } = useQuery<ClassType[]>({\n    queryKey: [\"/api/class-types\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: selectedRoutine, isLoading: selectedRoutineLoading } = useQuery({\n    queryKey: [\"/api/routines\", selectedRoutineId],\n    enabled: !!selectedRoutineId,\n  });\n\n  const form = useForm<RoutineFormData>({\n    resolver: zodResolver(routineFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      classTypeId: \"\",\n    },\n  });\n\n  const createRoutineMutation = useMutation({\n    mutationFn: async (data: RoutineFormData) => {\n      return await apiRequest(\"/api/routines\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: (newRoutine) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n      setIsCreateDialogOpen(false);\n      setSelectedRoutineId(newRoutine.id);\n      setRoutineName(newRoutine.name);\n      setRoutineClassType(newRoutine.classTypeId || \"\");\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Routine created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create routine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check for class type from Classes page navigation\n  useEffect(() => {\n    const newRoutineClassType = localStorage.getItem('newRoutineClassType');\n    if (newRoutineClassType && !createRoutineMutation.isPending) {\n      const classTypeInfo = JSON.parse(newRoutineClassType);\n      const routineData = {\n        name: `New ${classTypeInfo.name} Routine`,\n        description: \"\",\n        classTypeId: classTypeInfo.id,\n        isPublic: false,\n      };\n      \n      createRoutineMutation.mutate(routineData);\n      localStorage.removeItem('newRoutineClassType');\n    }\n  }, [createRoutineMutation.isPending]);\n\n  const updateRoutineMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertRoutine> }) => {\n      return await apiRequest(`/api/routines/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n      toast({\n        title: \"Success\",\n        description: \"Routine updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update routine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addExerciseToRoutineMutation = useMutation({\n    mutationFn: async ({ routineId, exerciseId, orderIndex }: { routineId: string; exerciseId: string; orderIndex: number }) => {\n      return await apiRequest(`/api/routines/${routineId}/exercises`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          exerciseId,\n          orderIndex,\n          durationSeconds: 60,\n          repetitions: 15,\n          sets: 1,\n          restSeconds: 30,\n        }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\", selectedRoutineId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add exercise to routine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoutineExerciseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<RoutineExercise> }) => {\n      return await apiRequest(`/api/routines/${selectedRoutineId}/exercises/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\", selectedRoutineId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const removeExerciseFromRoutineMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/routines/${selectedRoutineId}/exercises/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\", selectedRoutineId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/routines\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const onSubmit = (data: RoutineFormData) => {\n    createRoutineMutation.mutate(data);\n  };\n\n  const handleAddExercise = (exerciseId: string, orderIndex: number) => {\n    if (selectedRoutineId) {\n      addExerciseToRoutineMutation.mutate({ routineId: selectedRoutineId, exerciseId, orderIndex });\n    }\n  };\n\n  const handleUpdateExercise = (id: string, data: Partial<RoutineExercise>) => {\n    updateRoutineExerciseMutation.mutate({ id, data });\n  };\n\n  const handleRemoveExercise = (id: string) => {\n    removeExerciseFromRoutineMutation.mutate(id);\n  };\n\n  const handleReorderExercises = (fromIndex: number, toIndex: number) => {\n    if (!(selectedRoutine as any)?.exercises) return;\n    \n    const exercises = [...(selectedRoutine as any).exercises];\n    const [movedExercise] = exercises.splice(fromIndex, 1);\n    exercises.splice(toIndex, 0, movedExercise);\n    \n    // Update order indices\n    const updates = exercises.map((exercise: any, index: number) => ({\n      id: exercise.id,\n      orderIndex: index\n    }));\n    \n    // Update each exercise with new order index\n    updates.forEach(({ id, orderIndex }) => {\n      updateRoutineExerciseMutation.mutate({ id, data: { orderIndex } });\n    });\n  };\n\n  const handleRoutineNameChange = (name: string) => {\n    setRoutineName(name);\n    if (selectedRoutineId) {\n      updateRoutineMutation.mutate({ id: selectedRoutineId, data: { name } });\n    }\n  };\n\n  const handleClassTypeChange = (classTypeId: string) => {\n    setRoutineClassType(classTypeId);\n    if (selectedRoutineId) {\n      updateRoutineMutation.mutate({ id: selectedRoutineId, data: { classTypeId } });\n    }\n  };\n\n  // Filter routines based on selected class type\n  const filteredRoutines = routines?.filter(routine => {\n    if (filterClassType === \"all\") return true;\n    return routine.classTypeId === filterClassType;\n  }) || [];\n\n  const handleSaveRoutine = () => {\n    if (selectedRoutineId) {\n      updateRoutineMutation.mutate({ \n        id: selectedRoutineId, \n        data: { \n          name: routineName,\n          classTypeId: routineClassType || null\n        } \n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <Skeleton className=\"h-9 w-64 mb-2\" />\n          <Skeleton className=\"h-5 w-96\" />\n        </div>\n        <Skeleton className=\"h-96 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"routines-page\">\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Routine Builder</h1>\n          <p className=\"text-gray-600 mt-1\">Create and manage your workout routines</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          {selectedRoutineId && (\n            <ExportRoutine \n              routineId={selectedRoutineId}\n              routineName={routineName}\n            />\n          )}\n\n          <Button \n            onClick={handleSaveRoutine}\n            disabled={!selectedRoutineId}\n            data-testid=\"button-save-routine\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Routine\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-new-routine\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Routine\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Create New Routine</DialogTitle>\n                <DialogDescription>\n                  Create a new workout routine and assign it to a class type.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Routine Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter routine name\" {...field} data-testid=\"input-routine-name-create\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your routine...\" \n                            {...field} \n                            data-testid=\"input-routine-description\"\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"classTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-routine-class-type\">\n                              <SelectValue placeholder=\"Select class type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {classTypes?.map((classType) => (\n                              <SelectItem key={classType.id} value={classType.id}>\n                                {classType.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsCreateDialogOpen(false)}\n                      data-testid=\"button-cancel-routine\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createRoutineMutation.isPending}\n                      data-testid=\"button-create-routine\"\n                    >\n                      {createRoutineMutation.isPending ? \"Creating...\" : \"Create Routine\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {!selectedRoutineId ? (\n        /* Routine List */\n        <div>\n          {/* Filter Controls */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4 text-gray-500\" />\n                <Label htmlFor=\"filter-class-type\" className=\"text-sm font-medium\">Filter by Class Type:</Label>\n              </div>\n              <Select value={filterClassType} onValueChange={setFilterClassType}>\n                <SelectTrigger className=\"w-48\" id=\"filter-class-type\" data-testid=\"select-filter-class-type\">\n                  <SelectValue placeholder=\"All class types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All class types</SelectItem>\n                  {classTypes?.map((classType) => (\n                    <SelectItem key={classType.id} value={classType.id}>\n                      {classType.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              {routines ? `${filteredRoutines.length} routine${filteredRoutines.length !== 1 ? 's' : ''}` : 'Loading...'}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {routinesLoading ? (\n            [...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48 w-full\" />\n            ))\n          ) : filteredRoutines && filteredRoutines.length > 0 ? (\n            filteredRoutines.map((routine) => (\n              <Card \n                key={routine.id} \n                className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                onClick={() => {\n                  setSelectedRoutineId(routine.id);\n                  setRoutineName(routine.name);\n                  setRoutineClassType(routine.classTypeId || \"\");\n                }}\n                data-testid={`routine-card-${routine.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\" data-testid={`routine-title-${routine.id}`}>\n                      {routine.name}\n                    </CardTitle>\n                    {routine.classType && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {routine.classType.name}\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {routine.description && (\n                    <p className=\"text-gray-600 text-sm mb-4\">{routine.description}</p>\n                  )}\n                  <div className=\"flex justify-between items-center text-sm text-gray-500 mb-4\">\n                    <span>{routine.exerciseCount} exercises</span>\n                    <span>{Math.round((routine.totalDuration || 0) / 60)} min</span>\n                  </div>\n                  <div className=\"flex justify-end\" onClick={(e) => e.stopPropagation()}>\n                    <ExportRoutine \n                      routineId={routine.id}\n                      routineName={routine.name}\n                      className=\"text-xs py-1 px-2 h-7\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-12\" data-testid=\"text-no-routines\">\n              <div className=\"text-gray-500\">\n                <Plus className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p className=\"text-lg\">No routines yet</p>\n                <p className=\"text-sm\">Create your first routine to get started!</p>\n              </div>\n            </div>\n          )}\n          </div>\n        </div>\n      ) : (\n        /* Routine Builder */\n        <div>\n          <Button \n            variant=\"outline\" \n            onClick={() => setSelectedRoutineId(null)}\n            className=\"mb-6\"\n            data-testid=\"button-back-to-routines\"\n          >\n            ← Back to Routines\n          </Button>\n          {exercisesLoading || classTypesLoading || selectedRoutineLoading ? (\n            <Skeleton className=\"h-96 w-full\" />\n          ) : (\n            <RoutineBuilder\n              exercises={exercises || []}\n              classTypes={classTypes || []}\n              routineExercises={(selectedRoutine as any)?.exercises || []}\n              onAddExercise={handleAddExercise}\n              onUpdateExercise={handleUpdateExercise}\n              onRemoveExercise={handleRemoveExercise}\n              onReorderExercises={handleReorderExercises}\n              routineName={routineName}\n              onRoutineNameChange={handleRoutineNameChange}\n              totalDuration={(selectedRoutine as any)?.totalDuration || 0}\n              classTypeId={routineClassType}\n              onClassTypeChange={handleClassTypeChange}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":21868},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/coach-console.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Play, \n  Pause, \n  Square, \n  Users, \n  Clock, \n  CheckCircle, \n  UserCheck, \n  Timer,\n  BarChart3,\n  FileText,\n  ArrowRight,\n  ArrowLeft,\n  RotateCcw,\n  Presentation,\n  ChevronLeft\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Timer component for exercise timing\nfunction ExerciseTimer({ \n  duration, \n  isActive, \n  onComplete, \n  onReset \n}: { \n  duration: number; \n  isActive: boolean; \n  onComplete: () => void;\n  onReset: () => void;\n}) {\n  const [timeLeft, setTimeLeft] = useState(duration);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    setTimeLeft(duration);\n    setIsRunning(false);\n  }, [duration]);\n\n  useEffect(() => {\n    if (isActive && isRunning && timeLeft > 0) {\n      const timer = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            onComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isActive, isRunning, timeLeft, onComplete]);\n\n  const toggleTimer = () => {\n    if (timeLeft > 0) {\n      setIsRunning(!isRunning);\n    }\n  };\n\n  const resetTimer = () => {\n    setTimeLeft(duration);\n    setIsRunning(false);\n    onReset();\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const progress = duration > 0 ? ((duration - timeLeft) / duration) * 100 : 0;\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <div className=\"flex items-center space-x-2\">\n        <Button\n          size=\"sm\"\n          variant={isRunning ? \"destructive\" : \"default\"}\n          onClick={toggleTimer}\n          disabled={!isActive || timeLeft === 0}\n        >\n          {isRunning ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n        </Button>\n        <Button size=\"sm\" variant=\"outline\" onClick={resetTimer}>\n          <RotateCcw className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      <div className=\"flex-1\">\n        <div className=\"flex items-center justify-between mb-1\">\n          <span className=\"text-sm font-medium\">{formatTime(timeLeft)}</span>\n          <span className=\"text-xs text-gray-500\">{formatTime(duration)}</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n    </div>\n  );\n}\n\nfunction CoachConsole() {\n  const { eventId } = useParams<{ eventId: string }>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  \n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [sessionNotes, setSessionNotes] = useState(\"\");\n  const [quickMetrics, setQuickMetrics] = useState<Record<string, { rpe?: number; notes?: string }>>({});\n  \n  // Fetch console data\n  const { data: consoleData, isLoading } = useQuery({\n    queryKey: [\"/api/events\", eventId, \"console\"],\n    enabled: !!eventId,\n    retry: false,\n  });\n\n  // Start session mutation\n  const startSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/events/${eventId}/start`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(`Failed to start session: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", eventId, \"console\"] });\n      toast({ title: \"Session started!\", description: \"Class is now in progress\" });\n    },\n  });\n\n  // Complete session mutation\n  const completeSessionMutation = useMutation({\n    mutationFn: async (notes: string) => {\n      const response = await fetch(`/api/events/${eventId}/complete`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sessionNotes: notes }),\n      });\n      if (!response.ok) throw new Error(`Failed to complete session: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", eventId, \"console\"] });\n      toast({ title: \"Session completed!\", description: \"Class summary generated\" });\n    },\n  });\n\n  // Check-in mutation\n  const checkinMutation = useMutation({\n    mutationFn: async ({ clientId, status }: { clientId: string; status: string }) => {\n      const response = await fetch(`/api/events/${eventId}/checkin`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ clientId, status }),\n      });\n      if (!response.ok) throw new Error(`Failed to update attendance: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\", eventId, \"console\"] });\n      toast({ title: \"Attendance updated\", description: \"Client check-in recorded\" });\n    },\n  });\n\n  // Record metrics mutation\n  const recordMetricsMutation = useMutation({\n    mutationFn: async (metrics: any[]) => {\n      const response = await fetch(`/api/events/${eventId}/metrics`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(metrics),\n      });\n      if (!response.ok) throw new Error(`Failed to record metrics: ${response.statusText}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Metrics saved\", description: \"Performance data recorded\" });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!consoleData) {\n    return (\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Event not found</h1>\n          <p className=\"text-gray-600\">This event may not exist or you don't have access to it.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const { event, routine, enrolledClients, attendanceRecords } = consoleData || {};\n  const isSessionActive = event?.sessionStatus === \"in_progress\";\n  const isSessionCompleted = event?.sessionStatus === \"completed\";\n  const currentExercise = routine?.exercises?.[currentExerciseIndex];\n\n  const handleCheckIn = (clientId: string, status: string) => {\n    checkinMutation.mutate({ clientId, status });\n  };\n\n  const handleCompleteSession = () => {\n    if (event) {\n      completeSessionMutation.mutate(sessionNotes);\n    }\n  };\n\n  const handleNextExercise = () => {\n    if (routine?.exercises && currentExerciseIndex < routine.exercises.length - 1) {\n      setCurrentExerciseIndex(prev => prev + 1);\n    }\n  };\n\n  const handlePreviousExercise = () => {\n    if (currentExerciseIndex > 0) {\n      setCurrentExerciseIndex(prev => prev - 1);\n    }\n  };\n\n  const attendanceMap = new Map(attendanceRecords?.map((a: any) => [a.clientId, a.status]) || []);\n\n  return (\n    <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"coach-console\">\n      {/* Navigation */}\n      <div className=\"mb-6\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(\"/calendar\")}\n          className=\"text-gray-600 hover:text-gray-900\"\n          data-testid=\"button-back-to-calendar\"\n        >\n          <ChevronLeft className=\"w-4 h-4 mr-1\" />\n          Back to Calendar\n        </Button>\n      </div>\n\n      {/* Header */}\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">{event?.title}</h1>\n          <p className=\"text-gray-600\">\n            {event?.startDatetime ? new Date(event.startDatetime).toLocaleDateString() : \"TBD\"} at {event?.location || \"Studio\"}\n          </p>\n          <Badge \n            variant={isSessionActive ? \"default\" : isSessionCompleted ? \"secondary\" : \"outline\"}\n            className=\"mt-2\"\n          >\n            {event?.sessionStatus?.replace('_', ' ').toUpperCase() || \"SCHEDULED\"}\n          </Badge>\n        </div>\n        \n        {/* Session Controls */}\n        <div className=\"flex space-x-2\">\n          {/* Presentation Mode - Always available when routine exists */}\n          {routine?.id && (\n            <Button \n              onClick={() => setLocation(`/presentation/${routine.id}`)}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              data-testid=\"button-presentation-mode\"\n            >\n              <Presentation className=\"w-4 h-4 mr-2\" />\n              Presentation Mode\n            </Button>\n          )}\n          \n          {/* Session Management */}\n          {!isSessionActive && !isSessionCompleted && (\n            <Button \n              onClick={() => startSessionMutation.mutate()}\n              disabled={startSessionMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n              data-testid=\"button-start-class\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              Start Class\n            </Button>\n          )}\n          \n          {isSessionActive && (\n            <Button \n              onClick={handleCompleteSession}\n              disabled={completeSessionMutation.isPending}\n              variant=\"destructive\"\n              data-testid=\"button-complete-class\"\n            >\n              <Square className=\"w-4 h-4 mr-2\" />\n              Complete Class\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Roster & Check-in */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Class Roster ({enrolledClients?.length || 0})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {enrolledClients?.map((client: any) => {\n                  const status = attendanceMap.get(client.id);\n                  const isPresent = status === \"present\";\n                  \n                  return (\n                    <div key={client.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{client.firstName} {client.lastName}</p>\n                        {client.medicalNotes && (\n                          <p className=\"text-xs text-amber-600\">⚠️ Medical notes</p>\n                        )}\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant={isPresent ? \"default\" : \"outline\"}\n                        onClick={() => handleCheckIn(client.id, isPresent ? \"absent\" : \"present\")}\n                        disabled={checkinMutation.isPending}\n                      >\n                        {isPresent ? (\n                          <>\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Present\n                          </>\n                        ) : (\n                          <>\n                            <UserCheck className=\"w-4 h-4 mr-1\" />\n                            Check In\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  );\n                })}\n                \n                {(!enrolledClients || enrolledClients.length === 0) && (\n                  <p className=\"text-gray-500 text-center py-4\">No clients enrolled</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Routine Progress */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"w-5 h-5 mr-2\" />\n                Workout Progress\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {routine ? (\n                <div className=\"space-y-4\">\n                  {/* Progress overview */}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Exercise {currentExerciseIndex + 1} of {routine.exercises.length}</span>\n                    <span className=\"text-sm font-medium\">\n                      {Math.round(((currentExerciseIndex + 1) / routine.exercises.length) * 100)}%\n                    </span>\n                  </div>\n                  <Progress value={((currentExerciseIndex + 1) / routine.exercises.length) * 100} />\n\n                  {/* Current Exercise */}\n                  {currentExercise && (\n                    <div className=\"border rounded-lg p-4 bg-blue-50\">\n                      <h3 className=\"font-semibold text-lg\">{currentExercise.exercise.name}</h3>\n                      <p className=\"text-sm text-gray-600 mb-3\">{currentExercise.exercise.description}</p>\n                      \n                      {/* Exercise details */}\n                      <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                        {currentExercise.durationSeconds && (\n                          <div>\n                            <span className=\"text-gray-500\">Duration:</span>\n                            <span className=\"ml-1 font-medium\">{Math.floor(currentExercise.durationSeconds / 60)}m {currentExercise.durationSeconds % 60}s</span>\n                          </div>\n                        )}\n                        {currentExercise.repetitions && (\n                          <div>\n                            <span className=\"text-gray-500\">Reps:</span>\n                            <span className=\"ml-1 font-medium\">{currentExercise.repetitions}</span>\n                          </div>\n                        )}\n                        {currentExercise.sets && (\n                          <div>\n                            <span className=\"text-gray-500\">Sets:</span>\n                            <span className=\"ml-1 font-medium\">{currentExercise.sets}</span>\n                          </div>\n                        )}\n                        {currentExercise.restSeconds && (\n                          <div>\n                            <span className=\"text-gray-500\">Rest:</span>\n                            <span className=\"ml-1 font-medium\">{currentExercise.restSeconds}s</span>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Timer */}\n                      {currentExercise.durationSeconds && isSessionActive && (\n                        <ExerciseTimer\n                          duration={currentExercise.durationSeconds}\n                          isActive={true}\n                          onComplete={() => toast({ title: \"Exercise complete!\", description: \"Time to move to the next exercise\" })}\n                          onReset={() => {}}\n                        />\n                      )}\n                    </div>\n                  )}\n\n                  {/* Navigation */}\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={handlePreviousExercise}\n                      disabled={currentExerciseIndex === 0}\n                    >\n                      <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                      Previous\n                    </Button>\n                    <Button\n                      onClick={handleNextExercise}\n                      disabled={!routine.exercises || currentExerciseIndex >= routine.exercises.length - 1}\n                    >\n                      Next\n                      <ArrowRight className=\"w-4 h-4 ml-1\" />\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-8\">No routine selected for this class</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Notes & Metrics */}\n        <div className=\"space-y-6\">\n          {/* Session Notes */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Session Notes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                placeholder=\"Add notes about this session...\"\n                value={sessionNotes}\n                onChange={(e) => setSessionNotes(e.target.value)}\n                className=\"min-h-24\"\n              />\n            </CardContent>\n          </Card>\n\n          {/* Quick Metrics */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Timer className=\"w-5 h-5 mr-2\" />\n                Class Metrics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Overall Class RPE (1-10)</label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"10\"\n                    placeholder=\"Rate intensity\"\n                    value={quickMetrics.class?.rpe || \"\"}\n                    onChange={(e) => setQuickMetrics(prev => ({\n                      ...prev,\n                      class: { ...prev.class, rpe: parseInt(e.target.value) || undefined }\n                    }))}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium\">Quick Notes</label>\n                  <Input\n                    placeholder=\"Energy level, modifications made...\"\n                    value={quickMetrics.class?.notes || \"\"}\n                    onChange={(e) => setQuickMetrics(prev => ({\n                      ...prev,\n                      class: { ...prev.class, notes: e.target.value }\n                    }))}\n                  />\n                </div>\n\n                {Object.keys(quickMetrics).length > 0 && (\n                  <Button\n                    size=\"sm\"\n                    onClick={() => {\n                      // Convert quick metrics to proper format for recording\n                      const metricsToRecord = Object.entries(quickMetrics).map(([key, value]) => ({\n                        clientId: key === 'class' ? null : key,\n                        metricType: 'rpe',\n                        value: value.rpe?.toString() || '',\n                        notes: value.notes || '',\n                        routineExerciseId: currentExercise?.id || null,\n                      })).filter(m => m.value);\n                      \n                      if (metricsToRecord.length > 0) {\n                        recordMetricsMutation.mutate(metricsToRecord);\n                        setQuickMetrics({});\n                      }\n                    }}\n                    disabled={recordMetricsMutation.isPending}\n                  >\n                    Save Metrics\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CoachConsole;","size_bytes":20274},"client/src/pages/coach-console-demo.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { Monitor, Calendar, Users, PlayCircle } from \"lucide-react\";\n\nfunction CoachConsoleDemo() {\n  const [, navigate] = useLocation();\n\n  // Demo event IDs (these would be from your actual events)\n  const demoEvents = [\n    {\n      id: \"demo-hiit-class\",\n      title: \"HIIT Bootcamp Demo\",\n      time: \"2:00 PM - 3:00 PM\",\n      date: \"Today\",\n      location: \"Studio A\",\n      type: \"HIIT\",\n      enrolledCount: 8,\n      status: \"scheduled\"\n    },\n    {\n      id: \"demo-yoga-class\", \n      title: \"Power Yoga Demo\",\n      time: \"4:00 PM - 5:00 PM\",\n      date: \"Today\", \n      location: \"Studio B\",\n      type: \"Yoga\",\n      enrolledCount: 12,\n      status: \"scheduled\"\n    }\n  ];\n\n  const handleStartDemo = (eventId: string) => {\n    navigate(`/coach-console/${eventId}`);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8\" data-testid=\"coach-console-demo\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Coach Console Demo</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Experience the live class management features with these demo sessions. \n          The Coach Console provides real-time tools for conducting fitness classes.\n        </p>\n        \n        {/* Feature Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Users className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Live Check-in\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600\">\n                Quick client check-in with attendance tracking and roster management\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <PlayCircle className=\"w-5 h-5 mr-2 text-green-600\" />\n                Exercise Timers\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600\">\n                Built-in timers for each exercise with automatic progression through routines\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-lg\">\n                <Monitor className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Session Notes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600\">\n                Record performance metrics and session notes for post-class analysis\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Demo Classes */}\n      <div className=\"space-y-6\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">Try Demo Classes</h2>\n        \n        {demoEvents.map((event) => (\n          <Card key={event.id} className=\"border-l-4 border-l-green-500\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{event.title}</h3>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      <span>{event.date} • {event.time}</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Users className=\"w-4 h-4 mr-1\" />\n                      <span>{event.enrolledCount} enrolled</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                      {event.type}\n                    </span>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      {event.status}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">{event.location}</span>\n                  </div>\n                </div>\n                \n                <div className=\"ml-6\">\n                  <Button\n                    onClick={() => handleStartDemo(event.id)}\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                    data-testid={`demo-start-${event.id}`}\n                  >\n                    <Monitor className=\"w-4 h-4 mr-2\" />\n                    Start Demo Console\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Instructions */}\n      <Card className=\"mt-8 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-blue-900\">Demo Instructions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm text-blue-800\">\n            <p><strong>1. Start a Demo Class:</strong> Click \"Start Demo Console\" on any class above</p>\n            <p><strong>2. Check-in Clients:</strong> Use the roster panel to mark attendance</p>\n            <p><strong>3. Follow the Routine:</strong> Navigate through exercises with built-in timers</p>\n            <p><strong>4. Record Metrics:</strong> Add session notes and performance data</p>\n            <p><strong>5. Complete Session:</strong> Generate an automated class summary</p>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <div className=\"mt-6 text-center\">\n        <Button\n          variant=\"outline\"\n          onClick={() => navigate(\"/calendar\")}\n          data-testid=\"back-to-calendar\"\n        >\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Back to Calendar\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default CoachConsoleDemo;","size_bytes":6377},"client/src/pages/programs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Users, Calendar, TrendingUp, Settings, Play, Target, Brain, Zap } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Program, ClassType, ProgramSession, ProgramEnrollment, Client } from \"@shared/schema\";\n\n// Form schemas\nconst programSchema = z.object({\n  name: z.string().min(1, \"Program name is required\"),\n  description: z.string().optional(),\n  goal: z.string().min(1, \"Goal is required\"),\n  durationWeeks: z.number().min(1, \"Duration must be at least 1 week\").max(52, \"Duration cannot exceed 52 weeks\"),\n  classTypeId: z.string().optional(),\n});\n\nconst sessionSchema = z.object({\n  weekNumber: z.number().min(1, \"Week number is required\"),\n  dayOfWeek: z.number().min(0, \"Day of week is required\").max(6, \"Invalid day of week\"),\n  sessionName: z.string().min(1, \"Session name is required\"),\n  routineId: z.string().optional(),\n  baseParams: z.object({\n    reps: z.number().optional(),\n    time: z.number().optional(),\n    weight: z.number().optional(),\n    rpe: z.number().min(1).max(10).optional(),\n  }).optional(),\n  progressionRule: z.object({\n    type: z.enum([\"linear\", \"percentage\", \"rpe_based\"]),\n    param: z.enum([\"reps\", \"time\", \"weight\"]),\n    increment: z.number(),\n    floor: z.number().optional(),\n    ceiling: z.number().optional(),\n    deloadEvery: z.number().optional(),\n    deloadPct: z.number().optional(),\n  }).optional(),\n});\n\ntype ProgramForm = z.infer<typeof programSchema>;\ntype SessionForm = z.infer<typeof sessionSchema>;\n\nconst GOAL_OPTIONS = [\n  { value: \"strength\", label: \"Strength Building\", icon: \"💪\" },\n  { value: \"endurance\", label: \"Endurance Training\", icon: \"🏃\" },\n  { value: \"weight_loss\", label: \"Weight Loss\", icon: \"⚖️\" },\n  { value: \"flexibility\", label: \"Flexibility & Mobility\", icon: \"🧘\" },\n  { value: \"general_fitness\", label: \"General Fitness\", icon: \"🏋️\" },\n];\n\nconst DAYS_OF_WEEK = [\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n];\n\nconst PROGRESSION_TYPES = [\n  { value: \"linear\", label: \"Linear Progression\", description: \"Add consistent amounts each week\" },\n  { value: \"percentage\", label: \"Percentage-based\", description: \"Increase by percentage each week\" },\n  { value: \"rpe_based\", label: \"RPE-based\", description: \"Auto-adjust based on client feedback\" },\n];\n\nexport default function Programs() {\n  const [selectedProgram, setSelectedProgram] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showSessionDialog, setShowSessionDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch programs\n  const { data: programs = [], isLoading: programsLoading } = useQuery<(Program & { classType?: ClassType; enrollmentCount: number })[]>({\n    queryKey: ['/api/programs'],\n  });\n\n  // Fetch class types for program creation\n  const { data: classTypes = [] } = useQuery<ClassType[]>({\n    queryKey: ['/api/class-types'],\n  });\n\n  // Fetch routines for session creation\n  const { data: routines = [] } = useQuery({\n    queryKey: ['/api/routines'],\n  });\n\n  // Fetch selected program details\n  const { data: programDetails } = useQuery<Program & { sessions?: ProgramSession[] }>({\n    queryKey: ['/api/programs', selectedProgram],\n    enabled: !!selectedProgram,\n  });\n\n  // Fetch program enrollments\n  const { data: enrollments = [] } = useQuery<(ProgramEnrollment & { client?: Client })[]>({\n    queryKey: ['/api/programs', selectedProgram, 'enrollments'],\n    enabled: !!selectedProgram,\n  });\n\n  // Create program mutation\n  const createProgramMutation = useMutation({\n    mutationFn: async (data: ProgramForm) => {\n      const response = await fetch('/api/programs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create program');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/programs'] });\n      setShowCreateDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"Program created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create program\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: SessionForm) => {\n      const response = await fetch(`/api/programs/${selectedProgram}/sessions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create session');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/programs', selectedProgram] });\n      setShowSessionDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"Session added successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate schedule mutation\n  const generateScheduleMutation = useMutation({\n    mutationFn: async (weeks: number) => {\n      const response = await fetch(`/api/programs/${selectedProgram}/generate-schedule`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ weeks }),\n      });\n      if (!response.ok) throw new Error('Failed to generate schedule');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Schedule generated and added to calendar\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate schedule\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Forms\n  const programForm = useForm<ProgramForm>({\n    resolver: zodResolver(programSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      goal: \"\",\n      durationWeeks: 4,\n      classTypeId: \"\",\n    },\n  });\n\n  const sessionForm = useForm<SessionForm>({\n    resolver: zodResolver(sessionSchema),\n    defaultValues: {\n      weekNumber: 1,\n      dayOfWeek: 1,\n      sessionName: \"\",\n      routineId: \"\",\n      baseParams: {\n        reps: 10,\n        time: 60,\n        weight: 0,\n        rpe: 7,\n      },\n      progressionRule: {\n        type: \"linear\",\n        param: \"reps\",\n        increment: 1,\n        floor: 8,\n        ceiling: 15,\n        deloadEvery: 4,\n        deloadPct: 0.1,\n      },\n    },\n  });\n\n  const onCreateProgram = (data: ProgramForm) => {\n    createProgramMutation.mutate(data);\n  };\n\n  const onCreateSession = (data: SessionForm) => {\n    createSessionMutation.mutate(data);\n  };\n\n  const handleGenerateSchedule = () => {\n    if (programDetails && 'durationWeeks' in programDetails) {\n      generateScheduleMutation.mutate(programDetails.durationWeeks);\n    }\n  };\n\n  if (programsLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-3xl font-bold tracking-tight\">Adaptive Program Builder</h1>\n          <p className=\"text-muted-foreground\">Create and manage multi-week training programs with automatic progression</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-program\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Program\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Create New Program</DialogTitle>\n              <DialogDescription>\n                Design a multi-week training program with automatic progression\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...programForm}>\n              <form onSubmit={programForm.handleSubmit(onCreateProgram)} className=\"space-y-4\">\n                <FormField\n                  control={programForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Program Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"8-Week Strength Builder\" {...field} data-testid=\"input-program-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={programForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Progressive strength training program designed to build muscle and increase overall strength...\"\n                          {...field} \n                          data-testid=\"input-program-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={programForm.control}\n                  name=\"goal\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Primary Goal</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-program-goal\">\n                            <SelectValue placeholder=\"Select training goal\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {GOAL_OPTIONS.map((goal) => (\n                            <SelectItem key={goal.value} value={goal.value}>\n                              {goal.icon} {goal.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={programForm.control}\n                    name=\"durationWeeks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (weeks)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"52\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-program-duration\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={programForm.control}\n                    name=\"classTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-program-class-type\">\n                              <SelectValue placeholder=\"Select class type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {classTypes.map((classType) => (\n                              <SelectItem key={classType.id} value={classType.id}>\n                                {classType.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                    data-testid=\"button-cancel-program\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createProgramMutation.isPending}\n                    data-testid=\"button-save-program\"\n                  >\n                    {createProgramMutation.isPending ? \"Creating...\" : \"Create Program\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Programs Grid */}\n      {!selectedProgram ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {programs.map((program) => (\n            <Card \n              key={program.id} \n              className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n              onClick={() => setSelectedProgram(program.id)}\n              data-testid={`card-program-${program.id}`}\n            >\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-lg\">{program.name}</CardTitle>\n                    <CardDescription className=\"text-sm\">\n                      {program.durationWeeks} weeks • {program.goal?.replace('_', ' ')}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\">\n                      <Brain className=\"h-3 w-3 mr-1\" />\n                      Smart\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {program.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                      {program.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center\">\n                        <Users className=\"h-4 w-4 mr-1 text-muted-foreground\" />\n                        <span>{program.enrollmentCount} enrolled</span>\n                      </div>\n                      {program.classType && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {program.classType.name}\n                        </Badge>\n                      )}\n                    </div>\n                    <Button size=\"sm\" variant=\"ghost\" className=\"h-6 px-2\">\n                      <TrendingUp className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          {programs.length === 0 && (\n            <div className=\"col-span-full\">\n              <Card className=\"border-dashed\">\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <Brain className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No programs created yet</h3>\n                  <p className=\"text-muted-foreground text-center mb-4\">\n                    Create your first adaptive program to get started with automated progression training\n                  </p>\n                  <Button onClick={() => setShowCreateDialog(true)} data-testid=\"button-create-first-program\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Program\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      ) : (\n        /* Program Details View */\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setSelectedProgram(null)}\n              data-testid=\"button-back-to-programs\"\n            >\n              ← Back to Programs\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                onClick={handleGenerateSchedule}\n                disabled={generateScheduleMutation.isPending}\n                data-testid=\"button-generate-schedule\"\n              >\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                {generateScheduleMutation.isPending ? \"Generating...\" : \"Generate Schedule\"}\n              </Button>\n              <Dialog open={showSessionDialog} onOpenChange={setShowSessionDialog}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-session\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Session\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[600px]\">\n                  <DialogHeader>\n                    <DialogTitle>Add Training Session</DialogTitle>\n                    <DialogDescription>\n                      Configure a session with progression rules and target parameters\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...sessionForm}>\n                    <form onSubmit={sessionForm.handleSubmit(onCreateSession)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={sessionForm.control}\n                          name=\"weekNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Week</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                  data-testid=\"input-session-week\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={sessionForm.control}\n                          name=\"dayOfWeek\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Day</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-session-day\">\n                                    <SelectValue placeholder=\"Day\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {DAYS_OF_WEEK.map((day, index) => (\n                                    <SelectItem key={index} value={index.toString()}>\n                                      {day}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={sessionForm.control}\n                          name=\"sessionName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Session Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Upper Body\" {...field} data-testid=\"input-session-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={sessionForm.control}\n                        name=\"routineId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Routine (Optional)</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-session-routine\">\n                                  <SelectValue placeholder=\"Select routine\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {Array.isArray(routines) && routines.map((routine: any) => (\n                                  <SelectItem key={routine.id} value={routine.id}>\n                                    {routine.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Separator />\n\n                      <div className=\"space-y-4\">\n                        <h4 className=\"font-medium\">Base Parameters</h4>\n                        <div className=\"grid grid-cols-4 gap-4\">\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"baseParams.reps\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Reps</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-base-reps\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"baseParams.time\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Time (s)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-base-time\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"baseParams.weight\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Weight</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-base-weight\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"baseParams.rpe\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Target RPE</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    min=\"1\" \n                                    max=\"10\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-base-rpe\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      <Separator />\n\n                      <div className=\"space-y-4\">\n                        <h4 className=\"font-medium\">Progression Rules</h4>\n                        <FormField\n                          control={sessionForm.control}\n                          name=\"progressionRule.type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Progression Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-progression-type\">\n                                    <SelectValue placeholder=\"Select progression type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {PROGRESSION_TYPES.map((type) => (\n                                    <SelectItem key={type.value} value={type.value}>\n                                      <div>\n                                        <div className=\"font-medium\">{type.label}</div>\n                                        <div className=\"text-xs text-muted-foreground\">{type.description}</div>\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"progressionRule.param\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Parameter to Progress</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-progression-param\">\n                                      <SelectValue placeholder=\"Select parameter\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"reps\">Reps</SelectItem>\n                                    <SelectItem value=\"time\">Time</SelectItem>\n                                    <SelectItem value=\"weight\">Weight</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"progressionRule.increment\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Increment</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    step=\"0.1\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                    data-testid=\"input-progression-increment\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"progressionRule.floor\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Minimum Value</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-progression-floor\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={sessionForm.control}\n                            name=\"progressionRule.ceiling\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Maximum Value</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                    data-testid=\"input-progression-ceiling\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setShowSessionDialog(false)}\n                          data-testid=\"button-cancel-session\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createSessionMutation.isPending}\n                          data-testid=\"button-save-session\"\n                        >\n                          {createSessionMutation.isPending ? \"Adding...\" : \"Add Session\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {programDetails && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-2xl\">{programDetails.name}</CardTitle>\n                    <CardDescription>\n                      {programDetails.durationWeeks} weeks • {programDetails.goal?.replace('_', ' ')} • {enrollments.length} enrolled\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\">\n                      <Brain className=\"h-4 w-4 mr-1\" />\n                      Adaptive\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      <Zap className=\"h-4 w-4 mr-1\" />\n                      Auto-Progression\n                    </Badge>\n                  </div>\n                </div>\n                {programDetails.description && (\n                  <p className=\"text-muted-foreground mt-2\">{programDetails.description}</p>\n                )}\n              </CardHeader>\n              <CardContent>\n                <Tabs value={activeTab} onValueChange={setActiveTab}>\n                  <TabsList>\n                    <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"sessions\" data-testid=\"tab-sessions\">Sessions</TabsTrigger>\n                    <TabsTrigger value=\"enrollments\" data-testid=\"tab-enrollments\">Enrollments</TabsTrigger>\n                    <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"overview\" className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Total Sessions</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\">{programDetails.sessions?.length || 0}</div>\n                          <p className=\"text-xs text-muted-foreground\">Across {programDetails.durationWeeks} weeks</p>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Active Enrollments</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\">{enrollments.filter(e => e.isActive).length}</div>\n                          <p className=\"text-xs text-muted-foreground\">Currently training</p>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Progression Type</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\">Smart</div>\n                          <p className=\"text-xs text-muted-foreground\">RPE-based adaptation</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"sessions\" className=\"space-y-4\">\n                    <div className=\"space-y-4\">\n                      {programDetails.sessions?.map((session: any, index: number) => (\n                        <Card key={session.id} data-testid={`card-session-${session.id}`}>\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <CardTitle className=\"text-lg\">\n                                  Week {session.weekNumber} - {session.sessionName}\n                                </CardTitle>\n                                <CardDescription>\n                                  {DAYS_OF_WEEK[session.dayOfWeek]} • {session.routine?.name || 'No routine assigned'}\n                                </CardDescription>\n                              </div>\n                              <Badge variant=\"outline\">\n                                {session.progressionRule?.type || 'linear'} progression\n                              </Badge>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            {session.baseParams && (\n                              <div className=\"space-y-2\">\n                                <h4 className=\"font-medium text-sm\">Base Parameters</h4>\n                                <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                                  {session.baseParams.reps && (\n                                    <div>\n                                      <span className=\"text-muted-foreground\">Reps:</span> {session.baseParams.reps}\n                                    </div>\n                                  )}\n                                  {session.baseParams.time && (\n                                    <div>\n                                      <span className=\"text-muted-foreground\">Time:</span> {session.baseParams.time}s\n                                    </div>\n                                  )}\n                                  {session.baseParams.weight && (\n                                    <div>\n                                      <span className=\"text-muted-foreground\">Weight:</span> {session.baseParams.weight}\n                                    </div>\n                                  )}\n                                  {session.baseParams.rpe && (\n                                    <div>\n                                      <span className=\"text-muted-foreground\">RPE:</span> {session.baseParams.rpe}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                            \n                            {session.progressionRule && (\n                              <div className=\"mt-4 space-y-2\">\n                                <h4 className=\"font-medium text-sm\">Progression Rule</h4>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Increase {session.progressionRule.param} by {session.progressionRule.increment} \n                                  {session.progressionRule.floor && ` (min: ${session.progressionRule.floor})`}\n                                  {session.progressionRule.ceiling && ` (max: ${session.progressionRule.ceiling})`}\n                                </div>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      ))}\n\n                      {(!programDetails.sessions || programDetails.sessions.length === 0) && (\n                        <Card className=\"border-dashed\">\n                          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                            <Target className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                            <h3 className=\"text-lg font-semibold mb-2\">No sessions configured</h3>\n                            <p className=\"text-muted-foreground text-center mb-4\">\n                              Add training sessions to define your program structure\n                            </p>\n                            <Button onClick={() => setShowSessionDialog(true)} data-testid=\"button-add-first-session\">\n                              <Plus className=\"h-4 w-4 mr-2\" />\n                              Add First Session\n                            </Button>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"enrollments\" className=\"space-y-4\">\n                    <div className=\"space-y-4\">\n                      {enrollments.map((enrollment) => (\n                        <Card key={enrollment.id}>\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"space-y-1\">\n                                <CardTitle className=\"text-lg\">\n                                  {enrollment.client ? `${enrollment.client.firstName} ${enrollment.client.lastName}` : 'Group Enrollment'}\n                                </CardTitle>\n                                <CardDescription>\n                                  Started {new Date(enrollment.startDate).toLocaleDateString()} • Week {enrollment.currentWeek} of {programDetails.durationWeeks}\n                                </CardDescription>\n                              </div>\n                              <Badge variant={enrollment.isActive ? \"default\" : \"secondary\"}>\n                                {enrollment.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </div>\n                          </CardHeader>\n                        </Card>\n                      ))}\n\n                      {enrollments.length === 0 && (\n                        <Card className=\"border-dashed\">\n                          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                            <Users className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                            <h3 className=\"text-lg font-semibold mb-2\">No enrollments yet</h3>\n                            <p className=\"text-muted-foreground text-center mb-4\">\n                              Enroll clients in this program to start their adaptive training journey\n                            </p>\n                          </CardContent>\n                        </Card>\n                      )}\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"analytics\" className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Progression Tracking</CardTitle>\n                          <CardDescription>Average progression across all enrollments</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-center py-8 text-muted-foreground\">\n                            <TrendingUp className=\"h-8 w-8 mx-auto mb-2\" />\n                            Analytics coming soon\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Readiness Trends</CardTitle>\n                          <CardDescription>Client readiness and recovery patterns</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-center py-8 text-muted-foreground\">\n                            <Target className=\"h-8 w-8 mx-auto mb-2\" />\n                            Analytics coming soon\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":46844},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.278 0.013 258.338);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.278 0.013 258.338);\n  --popover: oklch(0.988 0.013 142.495);\n  --popover-foreground: oklch(0.278 0.013 258.338);\n  --primary: oklch(0.543 0.15 155.233);\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.776 0.151 110.725);\n  --secondary-foreground: oklch(0.278 0.013 258.338);\n  --muted: oklch(0.988 0.013 142.495);\n  --muted-foreground: oklch(0.278 0.013 258.338);\n  --accent: oklch(0.776 0.151 110.725);\n  --accent-foreground: oklch(1 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(1 0 0);\n  --border: oklch(0.922 0.013 258.338);\n  --input: oklch(0.976 0.006 258.338);\n  --ring: oklch(0.543 0.15 155.233 / 0.5);\n  --chart-1: oklch(0.543 0.15 155.233);\n  --chart-2: oklch(0.776 0.151 110.725);\n  --chart-3: oklch(0.988 0.013 142.495);\n  --chart-4: oklch(0.278 0.013 258.338);\n  --chart-5: oklch(0.922 0.013 258.338);\n  --radius: 0.5rem;\n  --sidebar: oklch(0.976 0.006 258.338);\n  --sidebar-foreground: oklch(0.278 0.013 258.338);\n  --sidebar-primary: oklch(0.543 0.15 155.233);\n  --sidebar-primary-foreground: oklch(1 0 0);\n  --sidebar-accent: oklch(0.776 0.151 110.725);\n  --sidebar-accent-foreground: oklch(0.278 0.013 258.338);\n  --sidebar-border: oklch(0.922 0.013 258.338);\n  --sidebar-ring: oklch(0.543 0.15 155.233 / 0.5);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.543 0.15 155.233);\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.776 0.151 110.725);\n  --accent-foreground: oklch(0.145 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.543 0.15 155.233);\n  --chart-2: oklch(0.776 0.151 110.725);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.543 0.15 155.233);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4469},"client/src/components/footer.tsx":{"content":"export function Footer() {\n  return (\n    <footer className=\"bg-foreground text-background py-12\">\n      <div className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-lg\">F</span>\n              </div>\n              <span className=\"font-bold text-xl\">FitFlow</span>\n            </div>\n            <p className=\"text-sm text-background/80\">\n              Empowering fitness professionals with the tools they need to create exceptional training experiences.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Product</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Features\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Pricing\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Templates\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Marketplace\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Help Center\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Contact Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Community\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  API Docs\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Company</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  About\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Blog\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Careers\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-background/80 hover:text-background transition-colors\">\n                  Privacy\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-background/20 mt-8 pt-8 text-center\">\n          <p className=\"text-sm text-background/60\">© 2025 FitFlow. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n","size_bytes":3767},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Header() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('/api/auth/logout', { method: 'POST' }),\n    onSuccess: () => {\n      localStorage.removeItem('auth_token');\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      navigate('/');\n    },\n    onError: () => {\n      // Clear local data even if API call fails\n      localStorage.removeItem('auth_token');\n      queryClient.clear();\n      navigate('/');\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex h-16 items-center justify-between\">\n        <div className=\"flex items-center space-x-2 cursor-pointer\" onClick={() => window.location.href = '/'}>\n          <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-lg\">F</span>\n          </div>\n          <span className=\"font-bold text-xl\">FitFlow</span>\n        </div>\n\n        <nav className=\"hidden md:flex items-center space-x-6\">\n          <a href=\"#home\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n            Home\n          </a>\n          <a href=\"#services\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n            Services\n          </a>\n          <a href=\"#pricing\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n            Pricing\n          </a>\n          <a href=\"#community\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n            Community\n          </a>\n        </nav>\n\n        {!isLoading && (\n          <div className=\"flex items-center space-x-3\">\n            {isAuthenticated && user ? (\n              <>\n                <div className=\"hidden sm:flex items-center space-x-3\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Welcome, {user.firstName || user.email}!\n                  </span>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => navigate('/')}\n                    data-testid=\"button-dashboard\"\n                  >\n                    Return to Dashboard\n                  </Button>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={handleLogout}\n                  disabled={logoutMutation.isPending}\n                  data-testid=\"button-logout\"\n                >\n                  {logoutMutation.isPending ? \"Logging out...\" : \"Log Out\"}\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = '/login'}\n                  data-testid=\"button-login\"\n                >\n                  Log In\n                </Button>\n                <Button \n                  size=\"sm\"\n                  onClick={() => window.location.href = '/register'}\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started\n                </Button>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </header>\n  )\n}\n","size_bytes":4020},"client/src/components/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport heroImage from \"@assets/generated_images/Instructor_from_class_perspective_00d9e9fe.png\"\n\nexport function HeroSection() {\n  return (\n    <section id=\"home\" className=\"relative min-h-[90vh] flex items-center justify-center overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('${heroImage}')`,\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/40\" />\n      </div>\n\n      <div className=\"relative z-10 container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n        <h1 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\">Elevate Your Training Game</h1>\n        <p className=\"text-xl md:text-2xl mb-8 max-w-3xl mx-auto leading-relaxed\">\n          Create, save, and share workout routines effortlessly. Join thousands of fitness professionals building better\n          training experiences.\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button \n            size=\"lg\" \n            className=\"text-lg px-8 py-6\"\n            onClick={() => window.location.href = '/register'}\n          >\n            Start Your Free Trial\n          </Button>\n          <Button\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"text-lg px-8 py-6 bg-white/10 border-white/30 text-white hover:bg-white/20\"\n            onClick={() => document.getElementById('services')?.scrollIntoView({ behavior: 'smooth' })}\n          >\n            Learn More\n          </Button>\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":1711},"client/src/components/pricing-section.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n\nexport function PricingSection() {\n  const plans = [\n    {\n      name: \"Basic\",\n      price: \"$9\",\n      period: \"/month\",\n      description: \"Perfect for individual trainers getting started\",\n      features: [\"Create up to 10 routines\", \"Access to basic templates\", \"Export routines as PDF\", \"Email support\"],\n      popular: false,\n    },\n    {\n      name: \"Pro\",\n      price: \"$29\",\n      period: \"/month\",\n      description: \"Ideal for professional trainers and small studios\",\n      features: [\n        \"Unlimited routine creation\",\n        \"Access to premium templates\",\n        \"Sell routines in marketplace\",\n        \"Advanced analytics\",\n        \"Priority support\",\n        \"Custom branding\",\n      ],\n      popular: true,\n    },\n    {\n      name: \"Enterprise\",\n      price: \"$99\",\n      period: \"/month\",\n      description: \"For large studios and fitness organizations\",\n      features: [\n        \"Everything in Pro\",\n        \"Team collaboration tools\",\n        \"White-label solution\",\n        \"API access\",\n        \"Dedicated account manager\",\n        \"Custom integrations\",\n      ],\n      popular: false,\n    },\n  ]\n\n  return (\n    <section id=\"pricing\" className=\"py-20\">\n      <div className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Choose Your Plan</h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Start free and scale as you grow. All plans include our core features with no setup fees.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {plans.map((plan, index) => (\n            <Card key={index} className={`relative ${plan.popular ? \"border-primary shadow-lg scale-105\" : \"\"}`}>\n              {plan.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <span className=\"bg-primary text-primary-foreground px-4 py-1 rounded-full text-sm font-medium\">\n                    Most Popular\n                  </span>\n                </div>\n              )}\n\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                <div className=\"flex items-baseline justify-center gap-1\">\n                  <span className=\"text-4xl font-bold\">{plan.price}</span>\n                  <span className=\"text-muted-foreground\">{plan.period}</span>\n                </div>\n                <CardDescription className=\"text-base\">{plan.description}</CardDescription>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-center gap-3\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary flex-shrink-0\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                <Button className=\"w-full\" variant={plan.popular ? \"default\" : \"outline\"} size=\"lg\">\n                  Get Started\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":3524},"client/src/components/services-section.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n\nexport function ServicesSection() {\n  const services = [\n    {\n      title: \"Create Your Own Routines\",\n      description:\n        \"Build custom workout plans with our intuitive drag-and-drop interface. Add exercises, set durations, and customize every detail.\",\n      icon: \"🏋️\",\n    },\n    {\n      title: \"Download Pre-Made Routines\",\n      description:\n        \"Access thousands of professionally designed workouts from certified trainers. Filter by difficulty, duration, and equipment needed.\",\n      icon: \"📱\",\n    },\n    {\n      title: \"Create and Sell Routines\",\n      description:\n        \"Monetize your expertise by selling your workout routines to other trainers and fitness enthusiasts in our marketplace.\",\n      icon: \"💰\",\n    },\n  ]\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-muted/50\">\n      <div className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Everything You Need to Succeed</h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Powerful tools designed specifically for fitness professionals who want to create exceptional training\n            experiences.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {services.map((service, index) => (\n            <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"text-4xl mb-4\">{service.icon}</div>\n                <CardTitle className=\"text-xl\">{service.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"text-base leading-relaxed\">{service.description}</CardDescription>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n","size_bytes":2022},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loginSchema, type LoginInput } from \"@shared/schema\";\nimport { Dumbbell } from \"lucide-react\";\n\nexport default function Login() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginInput>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginInput) => {\n      return apiRequest('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' },\n      });\n    },\n    onSuccess: (data) => {\n      // Store token if provided\n      if (data.token) {\n        localStorage.setItem('auth_token', data.token);\n      }\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in.\",\n      });\n      navigate('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginInput) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary to-fitness-600\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-12 w-12 bg-primary rounded-lg flex items-center justify-center mr-3\">\n              <Dumbbell className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">FitFlow</h1>\n          </div>\n          <CardTitle>Welcome Back</CardTitle>\n          <CardDescription>\n            Sign in to your FitFlow account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"trainer@fitflow.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto\"\n                onClick={() => navigate('/register')}\n                data-testid=\"link-register\"\n              >\n                Sign up here\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4881},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerSchema, type RegisterInput } from \"@shared/schema\";\nimport { Dumbbell } from \"lucide-react\";\n\nexport default function Register() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RegisterInput>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterInput) => {\n      return apiRequest('/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' },\n      });\n    },\n    onSuccess: (data) => {\n      // Store token if provided\n      if (data.token) {\n        localStorage.setItem('auth_token', data.token);\n      }\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      toast({\n        title: \"Welcome to FitFlow!\",\n        description: \"Your account has been created successfully.\",\n      });\n      navigate('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterInput) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary to-fitness-600\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-12 w-12 bg-primary rounded-lg flex items-center justify-center mr-3\">\n              <Dumbbell className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-2xl font-bold\">FitFlow</h1>\n          </div>\n          <CardTitle>Create Your Account</CardTitle>\n          <CardDescription>\n            Join FitFlow and start building amazing fitness routines\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"John\"\n                          {...field}\n                          data-testid=\"input-firstname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Doe\"\n                          {...field}\n                          data-testid=\"input-lastname\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"trainer@fitflow.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Create a secure password\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        {...field}\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-register\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto\"\n                onClick={() => navigate('/login')}\n                data-testid=\"link-login\"\n              >\n                Sign in here\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7016},"server/emailAuth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { randomBytes } from 'crypto';\nimport type { Express, Request, Response, NextFunction, RequestHandler } from 'express';\nimport session from 'express-session';\nimport connectPg from 'connect-pg-simple';\nimport { storage } from './storage';\nimport { registerSchema, loginSchema, type User } from '@shared/schema';\nimport { z } from 'zod';\n\n// JWT Secret - in production, use a secure random secret\nconst JWT_SECRET = process.env.JWT_SECRET || 'fitflow-demo-secret-key-change-in-production';\nconst SALT_ROUNDS = 12;\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '7d' });\n}\n\nexport function verifyToken(token: string): { userId: string } | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as { userId: string };\n  } catch {\n    return null;\n  }\n}\n\nexport function generateEmailVerificationToken(): string {\n  return randomBytes(32).toString('hex');\n}\n\n// Middleware to check if user is authenticated\nexport const isAuthenticated: RequestHandler = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    // Check session first\n    if (req.session && (req.session as any).userId) {\n      const user = await storage.getUser((req.session as any).userId);\n      if (user) {\n        (req as any).user = user;\n        return next();\n      }\n    }\n\n    // Check JWT token in Authorization header\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      const decoded = verifyToken(token);\n      if (decoded) {\n        const user = await storage.getUser(decoded.userId);\n        if (user) {\n          (req as any).user = user;\n          return next();\n        }\n      }\n    }\n\n    return res.status(401).json({ message: 'Unauthorized' });\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n};\n\nexport async function setupAuth(app: Express) {\n  app.set('trust proxy', 1);\n  app.use(getSession());\n\n  // Register endpoint\n  app.post('/api/auth/register', async (req: Request, res: Response) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n\n      // Hash password\n      const passwordHash = await hashPassword(validatedData.password);\n      \n      // Create user\n      const user = await storage.createUser({\n        email: validatedData.email,\n        passwordHash,\n        firstName: validatedData.firstName || undefined,\n        lastName: validatedData.lastName || undefined,\n        emailVerified: true, // For demo purposes, skip email verification\n      });\n\n      // Seed default data for new user (critical for production)\n      console.log(`Seeding default data for new user: ${user.id}`);\n      try {\n        await storage.seedDefaultData(user.id);\n        console.log(`Successfully seeded default data for new user: ${user.id}`);\n      } catch (error) {\n        console.error(`Failed to seed default data for new user ${user.id}:`, error);\n      }\n\n      // Create session\n      (req.session as any).userId = user.id;\n      \n      // Generate JWT token\n      const token = generateToken(user.id);\n\n      res.status(201).json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n        },\n        token,\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Validation error', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Registration failed' });\n    }\n  });\n\n  // Login endpoint\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      // Find user\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Verify password\n      const isValidPassword = await verifyPassword(validatedData.password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Create session\n      (req.session as any).userId = user.id;\n      \n      // Seed default data for existing users (non-blocking, critical for production)\n      console.log(`Checking/seeding default data for existing user: ${user.id}`);\n      storage.seedDefaultData(user.id).then(() => {\n        console.log(`Default data seeding check completed for user: ${user.id}`);\n      }).catch(error => {\n        console.error(`Error seeding default data for user ${user.id}:`, error);\n      });\n      \n      // Generate JWT token\n      const token = generateToken(user.id);\n\n      res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n        },\n        token,\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Validation error', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Could not log out' });\n      }\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  // Get current user endpoint\n  app.get('/api/auth/user', isAuthenticated, (req: Request, res: Response) => {\n    const user = (req as any).user;\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileImageUrl: user.profileImageUrl,\n    });\n  });\n}","size_bytes":7205},"server/seed-exercises.ts":{"content":"import { db } from './db';\nimport { exercises, classTypes } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\ninterface ExerciseData {\n  name: string;\n  description: string;\n  difficultyLevel: 'Beginner' | 'Intermediate' | 'Advanced';\n  category: string;\n  equipmentNeeded: string;\n  primaryMuscles: string;\n  secondaryMuscles: string;\n  modifications: string;\n  safetyNotes: string;\n  isPublic: boolean;\n}\n\nconst exercisesData: { [classType: string]: ExerciseData[] } = {\n  'Yoga': [\n    {\n      name: 'Mountain Pose',\n      description: 'Stand tall with feet hip-width apart, arms at sides, engaging core and lengthening spine.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Core, Legs',\n      secondaryMuscles: 'Back, Shoulders',\n      modifications: 'Stand against wall for support',\n      safetyNotes: 'Keep knees slightly soft, avoid locking joints',\n      isPublic: true\n    },\n    {\n      name: 'Downward Dog',\n      description: 'Form inverted V-shape with hands and feet planted, hips lifted high.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Shoulders, Hamstrings',\n      secondaryMuscles: 'Calves, Core',\n      modifications: 'Bend knees or use blocks under hands',\n      safetyNotes: 'Distribute weight evenly between hands and feet',\n      isPublic: true\n    },\n    {\n      name: 'Warrior I',\n      description: 'Lunge position with back leg straight, arms raised overhead, front knee bent.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Legs, Glutes',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Use wall for balance or shorten stance',\n      safetyNotes: 'Keep front knee aligned over ankle',\n      isPublic: true\n    },\n    {\n      name: 'Tree Pose',\n      description: 'Balance on one leg with other foot placed on inner thigh or calf.',\n      difficultyLevel: 'Intermediate',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Core, Legs',\n      secondaryMuscles: 'Ankles, Glutes',\n      modifications: 'Use wall for support or keep toe on ground',\n      safetyNotes: 'Never place foot on side of knee',\n      isPublic: true\n    },\n    {\n      name: 'Child\\'s Pose',\n      description: 'Kneel with knees apart, sit back on heels, arms extended forward on ground.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Back, Hips',\n      secondaryMuscles: 'Shoulders, Arms',\n      modifications: 'Place pillow between calves and thighs',\n      safetyNotes: 'Avoid if knee problems, modify as needed',\n      isPublic: true\n    },\n    {\n      name: 'Cobra Pose',\n      description: 'Lie face down, press palms down, lift chest while keeping hips grounded.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Back, Chest',\n      secondaryMuscles: 'Shoulders, Arms',\n      modifications: 'Keep forearms down for gentler backbend',\n      safetyNotes: 'Lift from back muscles, not just arms',\n      isPublic: true\n    },\n    {\n      name: 'Pigeon Pose',\n      description: 'Hip opener with one leg forward bent, other leg extended back.',\n      difficultyLevel: 'Intermediate',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Hips, Glutes',\n      secondaryMuscles: 'Quadriceps, Back',\n      modifications: 'Use bolster or blocks for support',\n      safetyNotes: 'Enter slowly, never force the stretch',\n      isPublic: true\n    },\n    {\n      name: 'Triangle Pose',\n      description: 'Wide-legged forward fold with one hand reaching toward floor, other reaching up.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Hamstrings, Sides',\n      secondaryMuscles: 'Core, Shoulders',\n      modifications: 'Use block under bottom hand',\n      safetyNotes: 'Keep both sides of torso equally long',\n      isPublic: true\n    },\n    {\n      name: 'Crow Pose',\n      description: 'Arm balance with knees perched on upper arms, feet lifted off ground.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Arms, Core',\n      secondaryMuscles: 'Shoulders, Wrists',\n      modifications: 'Keep toes on ground or use block for head',\n      safetyNotes: 'Warm up wrists thoroughly before attempting',\n      isPublic: true\n    },\n    {\n      name: 'Savasana',\n      description: 'Final relaxation pose lying flat on back with arms and legs relaxed.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Yoga mat',\n      primaryMuscles: 'Full body relaxation',\n      secondaryMuscles: 'Mind, Nervous system',\n      modifications: 'Use bolster under knees or eye pillow',\n      safetyNotes: 'Allow complete relaxation, avoid fidgeting',\n      isPublic: true\n    }\n  ],\n  'HIIT': [\n    {\n      name: 'Burpees',\n      description: 'Full body exercise: squat down, jump back to plank, do push-up, jump forward, jump up.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular system',\n      modifications: 'Step back instead of jumping, omit push-up',\n      safetyNotes: 'Land softly, maintain proper form throughout',\n      isPublic: true\n    },\n    {\n      name: 'Mountain Climbers',\n      description: 'Plank position with alternating knee drives toward chest at rapid pace.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Shoulders',\n      secondaryMuscles: 'Legs, Cardiovascular',\n      modifications: 'Slow down pace or elevate hands on bench',\n      safetyNotes: 'Keep hips level, avoid bouncing',\n      isPublic: true\n    },\n    {\n      name: 'Jump Squats',\n      description: 'Regular squat followed by explosive jump up, landing softly back in squat.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Calves, Core',\n      modifications: 'Remove jump, do regular squats',\n      safetyNotes: 'Land softly on balls of feet, bend knees on landing',\n      isPublic: true\n    },\n    {\n      name: 'High Knees',\n      description: 'Running in place while driving knees up toward chest as high as possible.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Hip flexors, Quadriceps',\n      secondaryMuscles: 'Calves, Core',\n      modifications: 'March in place with lower knee lift',\n      safetyNotes: 'Stay on balls of feet, pump arms actively',\n      isPublic: true\n    },\n    {\n      name: 'Plank Jacks',\n      description: 'Hold plank position while jumping feet apart and together like jumping jacks.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Shoulders',\n      secondaryMuscles: 'Legs, Glutes',\n      modifications: 'Step feet apart instead of jumping',\n      safetyNotes: 'Keep core engaged, avoid sagging hips',\n      isPublic: true\n    },\n    {\n      name: 'Tuck Jumps',\n      description: 'Jump up bringing knees toward chest, land softly and immediately repeat.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Calves, Core',\n      modifications: 'Do regular vertical jumps without tucking knees',\n      safetyNotes: 'Land softly, allow brief pause between jumps if needed',\n      isPublic: true\n    },\n    {\n      name: 'Russian Twists',\n      description: 'Sit with knees bent, lean back slightly, rotate torso side to side.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Obliques',\n      secondaryMuscles: 'Hip flexors',\n      modifications: 'Keep feet on ground or use lighter weight',\n      safetyNotes: 'Keep chest up, rotate from core not arms',\n      isPublic: true\n    },\n    {\n      name: 'Star Jumps',\n      description: 'Jumping jacks with arms and legs extended wide into star shape.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular system',\n      modifications: 'Step side to side instead of jumping',\n      safetyNotes: 'Land softly, coordinate arm and leg movements',\n      isPublic: true\n    },\n    {\n      name: 'Squat Thrusts',\n      description: 'Squat down, place hands on floor, jump feet back to plank, jump feet forward, stand.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Shoulders, Arms',\n      modifications: 'Step back and forward instead of jumping',\n      safetyNotes: 'Maintain straight line in plank position',\n      isPublic: true\n    },\n    {\n      name: 'Sprint Intervals',\n      description: 'Alternate between maximum effort running/jogging and recovery walking.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Adjust intensity based on fitness level',\n      safetyNotes: 'Warm up properly, gradually increase intensity',\n      isPublic: true\n    }\n  ],\n  'Zumba': [\n    {\n      name: 'Salsa Basic Step',\n      description: 'Basic forward and back step with hip movement and arm styling.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Arms, Shoulders',\n      modifications: 'Reduce hip movement, step in place',\n      safetyNotes: 'Land softly, keep movements controlled',\n      isPublic: true\n    },\n    {\n      name: 'Merengue March',\n      description: 'Step touch with hip bumps and arm movements to upbeat music.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Hips',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'March in place without hip movement',\n      safetyNotes: 'Keep knees soft, stay hydrated',\n      isPublic: true\n    },\n    {\n      name: 'Reggaeton Bounce',\n      description: 'Bouncing movement with shoulder and hip isolations.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Legs',\n      secondaryMuscles: 'Shoulders, Arms',\n      modifications: 'Reduce bounce intensity, simplify arm movements',\n      safetyNotes: 'Maintain core engagement throughout',\n      isPublic: true\n    },\n    {\n      name: 'Cumbia Steps',\n      description: 'Side-to-side steps with traditional cumbia arm movements.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Arms, Shoulders',\n      modifications: 'Step without arm movements first',\n      safetyNotes: 'Keep movements flowing and controlled',\n      isPublic: true\n    },\n    {\n      name: 'Bachata Hip Circles',\n      description: 'Sensual hip circles with weight shifts and arm styling.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Hips',\n      secondaryMuscles: 'Legs, Arms',\n      modifications: 'Reduce hip movement range',\n      safetyNotes: 'Move smoothly, avoid forcing range of motion',\n      isPublic: true\n    },\n    {\n      name: 'Soca Jumps',\n      description: 'High-energy jumping movements with Caribbean flair.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Step-touch instead of jumping',\n      safetyNotes: 'Land softly, take breaks as needed',\n      isPublic: true\n    },\n    {\n      name: 'Mambo Forward Basic',\n      description: 'Forward and back mambo steps with Cuban motion.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Hips, Arms',\n      modifications: 'Step in place without forward movement',\n      safetyNotes: 'Keep weight on balls of feet',\n      isPublic: true\n    },\n    {\n      name: 'Belly Dance Hip Drops',\n      description: 'Isolated hip drops with arm waves and graceful movement.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Core, Hips',\n      secondaryMuscles: 'Arms, Shoulders',\n      modifications: 'Reduce hip isolation intensity',\n      safetyNotes: 'Move within comfortable range of motion',\n      isPublic: true\n    },\n    {\n      name: 'Afrobeats Shoulder Bounce',\n      description: 'Rhythmic shoulder bouncing with African-inspired movements.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Shoulders, Core',\n      secondaryMuscles: 'Arms, Legs',\n      modifications: 'Reduce bounce intensity',\n      safetyNotes: 'Keep movements loose and relaxed',\n      isPublic: true\n    },\n    {\n      name: 'Cool Down Stretch',\n      description: 'Gentle stretching movements to wind down from dance session.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'All muscle groups',\n      modifications: 'Hold stretches longer for deeper stretch',\n      safetyNotes: 'Never bounce in stretches, breathe deeply',\n      isPublic: true\n    }\n  ],\n  'Spinning/Indoor Cycling': [\n    {\n      name: 'Seated Flat Road',\n      description: 'Basic seated position with moderate resistance, steady cadence.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Calves, Hamstrings',\n      modifications: 'Lower resistance, slower cadence',\n      safetyNotes: 'Maintain proper bike setup and posture',\n      isPublic: true\n    },\n    {\n      name: 'Standing Climb',\n      description: 'Out-of-saddle position with high resistance simulating hill climbing.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Glutes, Quadriceps',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Remain seated with higher resistance',\n      safetyNotes: 'Engage core, avoid bouncing in saddle',\n      isPublic: true\n    },\n    {\n      name: 'Speed Intervals',\n      description: 'High-cadence pedaling with moderate resistance for short bursts.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Cardiovascular, Legs',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Reduce cadence or interval duration',\n      safetyNotes: 'Maintain control, don\\'t sacrifice form for speed',\n      isPublic: true\n    },\n    {\n      name: 'Jumps',\n      description: 'Alternating between seated and standing positions rhythmically.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Arms, Shoulders',\n      modifications: 'Stay seated or reduce jump frequency',\n      safetyNotes: 'Control transitions, land softly in saddle',\n      isPublic: true\n    },\n    {\n      name: 'Steady State Endurance',\n      description: 'Consistent moderate effort for extended periods building endurance.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Cardiovascular, Legs',\n      secondaryMuscles: 'Core, Back',\n      modifications: 'Reduce resistance or duration',\n      safetyNotes: 'Focus on breathing and pacing',\n      isPublic: true\n    },\n    {\n      name: 'Power Sprints',\n      description: 'Maximum effort short bursts with recovery periods.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Reduce sprint intensity or duration',\n      safetyNotes: 'Warm up thoroughly before sprinting',\n      isPublic: true\n    },\n    {\n      name: 'Single Leg Drills',\n      description: 'Pedaling with one leg while other rests, improving efficiency.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Quadriceps, Hamstrings',\n      secondaryMuscles: 'Glutes, Core',\n      modifications: 'Use both legs with focus on smooth pedaling',\n      safetyNotes: 'Start with short intervals, build gradually',\n      isPublic: true\n    },\n    {\n      name: 'Cadence Build',\n      description: 'Gradually increasing pedaling speed while maintaining form.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Smaller cadence increases',\n      safetyNotes: 'Maintain smooth pedal stroke throughout',\n      isPublic: true\n    },\n    {\n      name: 'Recovery Ride',\n      description: 'Easy-paced cycling for active recovery between intense efforts.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Back',\n      modifications: 'Even easier pace or shorter duration',\n      safetyNotes: 'Focus on relaxation and breathing',\n      isPublic: true\n    },\n    {\n      name: 'Cool Down Stretch',\n      description: 'Gentle cycling followed by stretching to end session.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Spin bike',\n      primaryMuscles: 'Legs, Back',\n      secondaryMuscles: 'Hips, Shoulders',\n      modifications: 'Extend stretching time',\n      safetyNotes: 'Allow heart rate to return to normal',\n      isPublic: true\n    }\n  ],\n  'Pilates': [\n    {\n      name: 'The Hundred',\n      description: 'Core strengthening exercise with rhythmic arm pumping and breathing.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Core, Deep abdominals',\n      secondaryMuscles: 'Arms, Legs',\n      modifications: 'Bend knees, lower legs, or reduce arm pumping',\n      safetyNotes: 'Keep lower back pressed to mat, breathe rhythmically',\n      isPublic: true\n    },\n    {\n      name: 'Roll Up',\n      description: 'Slow controlled movement from lying to sitting, vertebra by vertebra.',\n      difficultyLevel: 'Intermediate',\n      category: 'flexibility',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Core, Spine',\n      secondaryMuscles: 'Hip flexors, Arms',\n      modifications: 'Use band assistance or bend knees',\n      safetyNotes: 'Move slowly, engage deep abdominals throughout',\n      isPublic: true\n    },\n    {\n      name: 'Single Leg Circles',\n      description: 'Controlled leg circles while maintaining stable pelvis.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Hip flexors, Core',\n      secondaryMuscles: 'Quadriceps, Inner thighs',\n      modifications: 'Smaller circles or bent knee',\n      safetyNotes: 'Keep pelvis still, start with small movements',\n      isPublic: true\n    },\n    {\n      name: 'Plank',\n      description: 'Hold strong straight line from head to heels, engaging core.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Core, Shoulders',\n      secondaryMuscles: 'Arms, Legs',\n      modifications: 'Drop to knees or reduce hold time',\n      safetyNotes: 'Avoid sagging hips, breathe consistently',\n      isPublic: true\n    },\n    {\n      name: 'Teaser',\n      description: 'V-sit position balancing on sitting bones with arms and legs extended.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Core, Hip flexors',\n      secondaryMuscles: 'Back, Arms',\n      modifications: 'Bend knees or hold behind thighs',\n      safetyNotes: 'Lift from core, avoid gripping hip flexors',\n      isPublic: true\n    },\n    {\n      name: 'Swimming',\n      description: 'Prone position lifting opposite arm and leg alternately.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Back, Glutes',\n      secondaryMuscles: 'Shoulders, Hamstrings',\n      modifications: 'Lift arms or legs only, or reduce range',\n      safetyNotes: 'Keep neck neutral, engage deep abdominals',\n      isPublic: true\n    },\n    {\n      name: 'Side Leg Lifts',\n      description: 'Lying on side, lift top leg maintaining proper alignment.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Outer thighs, Glutes',\n      secondaryMuscles: 'Core, Inner thighs',\n      modifications: 'Support head with bottom arm',\n      safetyNotes: 'Keep body in straight line, control movement',\n      isPublic: true\n    },\n    {\n      name: 'Saw',\n      description: 'Seated spinal rotation with forward reach, sawing motion.',\n      difficultyLevel: 'Intermediate',\n      category: 'flexibility',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Spine, Obliques',\n      secondaryMuscles: 'Hamstrings, Arms',\n      modifications: 'Sit on cushion or bend knees slightly',\n      safetyNotes: 'Rotate from spine, keep hips square',\n      isPublic: true\n    },\n    {\n      name: 'Wall Sit',\n      description: 'Squat position against wall, engaging legs and core.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Wall',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Core, Calves',\n      modifications: 'Higher position or shorter hold time',\n      safetyNotes: 'Keep knees aligned over ankles',\n      isPublic: true\n    },\n    {\n      name: 'Breathing Exercise',\n      description: 'Focused breathing to engage deep core muscles and center mind.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Diaphragm, Deep core',\n      secondaryMuscles: 'Pelvic floor, Ribcage',\n      modifications: 'Any comfortable position',\n      safetyNotes: 'Never force breathing, stay relaxed',\n      isPublic: true\n    }\n  ],\n  'CrossFit': [\n    {\n      name: 'Deadlift',\n      description: 'Hip hinge movement lifting weight from floor to standing position.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, plates',\n      primaryMuscles: 'Hamstrings, Glutes',\n      secondaryMuscles: 'Back, Core',\n      modifications: 'Use lighter weight or trap bar',\n      safetyNotes: 'Keep back neutral, drive through heels',\n      isPublic: true\n    },\n    {\n      name: 'Pull-ups',\n      description: 'Hanging from bar, pull body up until chin clears bar.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Pull-up bar',\n      primaryMuscles: 'Lats, Biceps',\n      secondaryMuscles: 'Rhomboids, Core',\n      modifications: 'Use resistance band or assisted machine',\n      safetyNotes: 'Full range of motion, control descent',\n      isPublic: true\n    },\n    {\n      name: 'Box Jumps',\n      description: 'Explosive jump onto elevated platform, step down safely.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Plyo box',\n      primaryMuscles: 'Legs, Glutes',\n      secondaryMuscles: 'Core, Calves',\n      modifications: 'Use lower box or step-ups',\n      safetyNotes: 'Land softly, step down to prevent injury',\n      isPublic: true\n    },\n    {\n      name: 'Kettlebell Swings',\n      description: 'Hip-driven movement swinging kettlebell from between legs to chest.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Kettlebell',\n      primaryMuscles: 'Glutes, Hamstrings',\n      secondaryMuscles: 'Core, Shoulders',\n      modifications: 'Use lighter weight or dumbbell',\n      safetyNotes: 'Power from hips, not arms or back',\n      isPublic: true\n    },\n    {\n      name: 'Thrusters',\n      description: 'Squat to overhead press combination movement with weight.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Barbell or dumbbells',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular system',\n      modifications: 'Use lighter weight or separate movements',\n      safetyNotes: 'Maintain core stability throughout movement',\n      isPublic: true\n    },\n    {\n      name: 'Double Unders',\n      description: 'Jump rope passing rope under feet twice per jump.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'Jump rope',\n      primaryMuscles: 'Calves, Cardiovascular',\n      secondaryMuscles: 'Shoulders, Core',\n      modifications: 'Practice single skips first',\n      safetyNotes: 'Stay on balls of feet, keep elbows close',\n      isPublic: true\n    },\n    {\n      name: 'Wall Balls',\n      description: 'Squat and throw medicine ball to target on wall.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Medicine ball, wall',\n      primaryMuscles: 'Legs, Shoulders',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Use lighter ball or lower target',\n      safetyNotes: 'Catch ball in squat position, aim consistently',\n      isPublic: true\n    },\n    {\n      name: 'Rowing',\n      description: 'Full-body cardio exercise using rowing machine.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'Rowing machine',\n      primaryMuscles: 'Back, Legs',\n      secondaryMuscles: 'Arms, Core',\n      modifications: 'Adjust resistance or stroke rate',\n      safetyNotes: 'Drive with legs first, then back, then arms',\n      isPublic: true\n    },\n    {\n      name: 'Handstand Push-ups',\n      description: 'Inverted push-up against wall or freestanding.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Wall (optional)',\n      primaryMuscles: 'Shoulders, Triceps',\n      secondaryMuscles: 'Core, Back',\n      modifications: 'Pike push-ups or wall walk-up',\n      safetyNotes: 'Build up gradually, use spotter if needed',\n      isPublic: true\n    },\n    {\n      name: 'Rope Climb',\n      description: 'Climb rope using legs and arms for assistance.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Climbing rope',\n      primaryMuscles: 'Arms, Back',\n      secondaryMuscles: 'Core, Legs',\n      modifications: 'Lying rope pulls or assisted climbs',\n      safetyNotes: 'Use proper foot technique, control descent',\n      isPublic: true\n    }\n  ],\n  'Barre': [\n    {\n      name: 'Pliés',\n      description: 'Ballet-inspired squats with turned-out legs and core engagement.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Inner thighs, Glutes',\n      secondaryMuscles: 'Quadriceps, Core',\n      modifications: 'Hold barre for support, reduce range',\n      safetyNotes: 'Keep knees aligned over toes',\n      isPublic: true\n    },\n    {\n      name: 'Relevés',\n      description: 'Rising up on balls of feet, engaging calves and improving balance.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Calves, Ankles',\n      secondaryMuscles: 'Core, Stabilizers',\n      modifications: 'Hold barre for support',\n      safetyNotes: 'Rise and lower with control',\n      isPublic: true\n    },\n    {\n      name: 'Attitude Lifts',\n      description: 'Standing leg lifts to side with bent knee, ballet-inspired.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Glutes, Outer thighs',\n      secondaryMuscles: 'Core, Hip flexors',\n      modifications: 'Lower leg height or use barre support',\n      safetyNotes: 'Keep hips square, engage core',\n      isPublic: true\n    },\n    {\n      name: 'Arabesques',\n      description: 'Standing on one leg with other leg extended behind.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Glutes, Hamstrings',\n      secondaryMuscles: 'Core, Back',\n      modifications: 'Lower leg height or touch toe to floor',\n      safetyNotes: 'Keep hips square, lengthen spine',\n      isPublic: true\n    },\n    {\n      name: 'Tricep Dips',\n      description: 'Seated dips using chair or bench, targeting back of arms.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Chair or bench',\n      primaryMuscles: 'Triceps, Shoulders',\n      secondaryMuscles: 'Core, Chest',\n      modifications: 'Bend knees or reduce range of motion',\n      safetyNotes: 'Keep shoulders down, control movement',\n      isPublic: true\n    },\n    {\n      name: 'Core Series',\n      description: 'Pilates-inspired abdominal exercises with small movements.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Mat',\n      primaryMuscles: 'Core, Deep abdominals',\n      secondaryMuscles: 'Hip flexors, Back',\n      modifications: 'Support head or reduce range',\n      safetyNotes: 'Keep lower back protected, breathe consistently',\n      isPublic: true\n    },\n    {\n      name: 'Port de Bras',\n      description: 'Graceful arm movements coordinated with breathing and posture.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Arms, Shoulders',\n      secondaryMuscles: 'Core, Back',\n      modifications: 'Seated or simplified arm patterns',\n      safetyNotes: 'Move with control, maintain posture',\n      isPublic: true\n    },\n    {\n      name: 'Chair Pose Pulses',\n      description: 'Small pulsing movements in squat position for endurance.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Core, Calves',\n      modifications: 'Larger range of motion or less time',\n      safetyNotes: 'Keep weight in heels, maintain alignment',\n      isPublic: true\n    },\n    {\n      name: 'Stretching Sequence',\n      description: 'Ballet-inspired stretches for flexibility and recovery.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Hip flexors, Hamstrings',\n      secondaryMuscles: 'Calves, Back',\n      modifications: 'Use props for support',\n      safetyNotes: 'Never force stretches, breathe deeply',\n      isPublic: true\n    },\n    {\n      name: 'Balance Challenge',\n      description: 'Single-leg stands with various arm and leg movements.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barre or chair',\n      primaryMuscles: 'Core, Stabilizers',\n      secondaryMuscles: 'Legs, Ankles',\n      modifications: 'Hold barre or reduce movement complexity',\n      safetyNotes: 'Progress gradually, use support as needed',\n      isPublic: true\n    }\n  ],\n  'BodyPump/Barbell Classes': [\n    {\n      name: 'Squats',\n      description: 'Fundamental lower body exercise with barbell across shoulders.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Hamstrings, Core',\n      modifications: 'Use lighter weight or bodyweight only',\n      safetyNotes: 'Keep chest up, knees aligned over toes',\n      isPublic: true\n    },\n    {\n      name: 'Chest Press',\n      description: 'Lying chest press with barbell for upper body strength.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, bench, weights',\n      primaryMuscles: 'Chest, Triceps',\n      secondaryMuscles: 'Shoulders, Core',\n      modifications: 'Use lighter weight or dumbbells',\n      safetyNotes: 'Use spotter, control the weight throughout',\n      isPublic: true\n    },\n    {\n      name: 'Bent-over Rows',\n      description: 'Pulling motion with barbell to strengthen back muscles.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Lats, Rhomboids',\n      secondaryMuscles: 'Biceps, Core',\n      modifications: 'Use lighter weight or supported position',\n      safetyNotes: 'Keep back straight, engage core throughout',\n      isPublic: true\n    },\n    {\n      name: 'Overhead Press',\n      description: 'Standing shoulder press with barbell overhead.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Shoulders, Triceps',\n      secondaryMuscles: 'Core, Upper back',\n      modifications: 'Seated position or lighter weight',\n      safetyNotes: 'Keep core tight, press straight up',\n      isPublic: true\n    },\n    {\n      name: 'Lunges',\n      description: 'Single-leg strengthening exercise with barbell for resistance.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Quadriceps, Glutes',\n      secondaryMuscles: 'Hamstrings, Core',\n      modifications: 'Bodyweight only or use support',\n      safetyNotes: 'Step back to starting position, avoid knee impact',\n      isPublic: true\n    },\n    {\n      name: 'Bicep Curls',\n      description: 'Isolated arm exercise targeting biceps with barbell.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Biceps',\n      secondaryMuscles: 'Forearms, Core',\n      modifications: 'Use lighter weight or dumbbells',\n      safetyNotes: 'Keep elbows stable, control the movement',\n      isPublic: true\n    },\n    {\n      name: 'Tricep Extensions',\n      description: 'Overhead tricep exercise using barbell for arm strength.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Triceps',\n      secondaryMuscles: 'Shoulders, Core',\n      modifications: 'Use lighter weight or dumbbells',\n      safetyNotes: 'Keep elbows pointed forward, control descent',\n      isPublic: true\n    },\n    {\n      name: 'Clean and Press',\n      description: 'Explosive movement from floor to overhead in one motion.',\n      difficultyLevel: 'Advanced',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular system',\n      modifications: 'Break into separate movements or lighter weight',\n      safetyNotes: 'Learn proper form first, use appropriate weight',\n      isPublic: true\n    },\n    {\n      name: 'Upright Rows',\n      description: 'Vertical pulling exercise targeting shoulders and upper back.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Barbell, weights',\n      primaryMuscles: 'Shoulders, Upper traps',\n      secondaryMuscles: 'Biceps, Core',\n      modifications: 'Use lighter weight or wider grip',\n      safetyNotes: 'Don\\'t pull too high, avoid shoulder impingement',\n      isPublic: true\n    },\n    {\n      name: 'Cool Down Stretches',\n      description: 'Static stretches to end strength training session properly.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'All worked muscles',\n      modifications: 'Hold stretches longer or shorter as needed',\n      safetyNotes: 'Never bounce, breathe deeply throughout',\n      isPublic: true\n    }\n  ],\n  'Aqua Fitness/Water Aerobics': [\n    {\n      name: 'Water Walking',\n      description: 'Forward and backward walking in water for low-impact cardio.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Arms, Cardiovascular',\n      modifications: 'Use pool noodle for support',\n      safetyNotes: 'Maintain good posture, use water resistance',\n      isPublic: true\n    },\n    {\n      name: 'Jumping Jacks',\n      description: 'Traditional jumping jacks modified for water resistance.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular system',\n      modifications: 'Step-touch variation or slower pace',\n      safetyNotes: 'Use water buoyancy, maintain balance',\n      isPublic: true\n    },\n    {\n      name: 'Leg Swings',\n      description: 'Side-to-side and front-to-back leg movements in water.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Hip flexors, Glutes',\n      secondaryMuscles: 'Core, Legs',\n      modifications: 'Smaller range of motion or wall support',\n      safetyNotes: 'Use pool edge for support if needed',\n      isPublic: true\n    },\n    {\n      name: 'Arm Circles',\n      description: 'Large and small arm circles using water resistance.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Shoulders, Arms',\n      secondaryMuscles: 'Core, Upper back',\n      modifications: 'Smaller circles or one arm at a time',\n      safetyNotes: 'Keep shoulders relaxed, use full range of motion',\n      isPublic: true\n    },\n    {\n      name: 'Cross-Country Skiing',\n      description: 'Alternating arm and leg movements simulating skiing motion.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular, Core',\n      modifications: 'Slower pace or arms-only variation',\n      safetyNotes: 'Coordinate opposite arm and leg movements',\n      isPublic: true\n    },\n    {\n      name: 'Water Jogging',\n      description: 'Running motion in deep water with or without flotation.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Pool, flotation belt (optional)',\n      primaryMuscles: 'Legs, Cardiovascular',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Use flotation belt or shallow water',\n      safetyNotes: 'Maintain running form, use proper buoyancy',\n      isPublic: true\n    },\n    {\n      name: 'Aqua Zumba',\n      description: 'Dance movements adapted for water with Latin music.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular, Core',\n      modifications: 'Simpler moves or slower pace',\n      safetyNotes: 'Keep movements flowing, enjoy the music',\n      isPublic: true\n    },\n    {\n      name: 'Resistance Exercises',\n      description: 'Strength training using water resistance and pool equipment.',\n      difficultyLevel: 'Intermediate',\n      category: 'strength',\n      equipmentNeeded: 'Pool, water weights (optional)',\n      primaryMuscles: 'Arms, Legs',\n      secondaryMuscles: 'Core, Full body',\n      modifications: 'Use equipment or bodyweight only',\n      safetyNotes: 'Control movements against water resistance',\n      isPublic: true\n    },\n    {\n      name: 'Pool Noodle Exercises',\n      description: 'Various exercises using pool noodles for resistance and support.',\n      difficultyLevel: 'Beginner',\n      category: 'strength',\n      equipmentNeeded: 'Pool, pool noodles',\n      primaryMuscles: 'Core, Arms',\n      secondaryMuscles: 'Legs, Stabilizers',\n      modifications: 'Different noodle positions or exercises',\n      safetyNotes: 'Use noodle safely, maintain proper form',\n      isPublic: true\n    },\n    {\n      name: 'Cool Down Float',\n      description: 'Gentle floating and stretching to end aqua fitness session.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'Pool',\n      primaryMuscles: 'Full body relaxation',\n      secondaryMuscles: 'Mind, Nervous system',\n      modifications: 'Use flotation aids if needed',\n      safetyNotes: 'Relax completely, breathe deeply',\n      isPublic: true\n    }\n  ],\n  'Dance Fitness': [\n    {\n      name: 'Basic Step Touch',\n      description: 'Simple side-step with touch, foundation for dance fitness.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Arms, Cardiovascular',\n      modifications: 'March in place or smaller steps',\n      safetyNotes: 'Land softly, keep movements controlled',\n      isPublic: true\n    },\n    {\n      name: 'Grapevine',\n      description: 'Traveling step pattern moving side to side with crossovers.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Hip abductors, Balance',\n      modifications: 'Step-touch without crossover',\n      safetyNotes: 'Watch for other participants, control direction changes',\n      isPublic: true\n    },\n    {\n      name: 'Hip Hop Moves',\n      description: 'Urban dance movements with attitude and rhythmic flow.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Core, Coordination',\n      modifications: 'Simplify moves or reduce intensity',\n      safetyNotes: 'Express yourself, stay within comfortable range',\n      isPublic: true\n    },\n    {\n      name: 'Latin Dance Steps',\n      description: 'Salsa, cha-cha, and merengue-inspired movements.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Hips, Legs',\n      secondaryMuscles: 'Core, Arms',\n      modifications: 'Reduce hip movement or arm styling',\n      safetyNotes: 'Keep movements flowing and rhythmic',\n      isPublic: true\n    },\n    {\n      name: 'Jazz Squares',\n      description: 'Classic dance move creating square pattern with feet.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Legs, Core',\n      secondaryMuscles: 'Balance, Coordination',\n      modifications: 'Step-touch or march in place',\n      safetyNotes: 'Keep steps controlled, maintain balance',\n      isPublic: true\n    },\n    {\n      name: 'Cardio Dance Combo',\n      description: 'High-energy combination of various dance styles.',\n      difficultyLevel: 'Advanced',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Cardiovascular, Core',\n      modifications: 'Break down into simpler moves',\n      safetyNotes: 'Stay hydrated, listen to your body',\n      isPublic: true\n    },\n    {\n      name: 'Arm Waves',\n      description: 'Flowing arm movements creating wave-like motion.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Arms, Shoulders',\n      secondaryMuscles: 'Core, Upper back',\n      modifications: 'Smaller range or one arm at a time',\n      safetyNotes: 'Keep movements smooth and controlled',\n      isPublic: true\n    },\n    {\n      name: 'Booty Shakes',\n      description: 'Hip and glute isolation movements with rhythm.',\n      difficultyLevel: 'Intermediate',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Glutes, Hips',\n      secondaryMuscles: 'Core, Legs',\n      modifications: 'Reduce intensity or range of motion',\n      safetyNotes: 'Move within comfortable range, have fun',\n      isPublic: true\n    },\n    {\n      name: 'Cool Down Dance',\n      description: 'Slow, flowing movements to gradually lower heart rate.',\n      difficultyLevel: 'Beginner',\n      category: 'flexibility',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Full body',\n      secondaryMuscles: 'Mind, Relaxation',\n      modifications: 'Even slower pace or seated movements',\n      safetyNotes: 'Focus on breathing, enjoy the music',\n      isPublic: true\n    },\n    {\n      name: 'Freestyle Expression',\n      description: 'Open movement time for personal dance expression.',\n      difficultyLevel: 'Beginner',\n      category: 'cardio',\n      equipmentNeeded: 'None',\n      primaryMuscles: 'Variable',\n      secondaryMuscles: 'Creativity, Confidence',\n      modifications: 'Any movement that feels good',\n      safetyNotes: 'Express yourself freely, no judgment',\n      isPublic: true\n    }\n  ]\n};\n\nexport async function seedExercises(userId: string) {\n  try {\n    console.log('Starting exercise seeding for user:', userId);\n    \n    // Get user's class types\n    const userClassTypes = await db.select().from(classTypes).where(eq(classTypes.createdByUserId, userId));\n    console.log('Found class types:', userClassTypes.length);\n    \n    let totalExercisesCreated = 0;\n    \n    for (const classType of userClassTypes) {\n      const exercisesForClass = exercisesData[classType.name] || [];\n      console.log(`Seeding ${exercisesForClass.length} exercises for class type: ${classType.name}`);\n      \n      for (const exerciseData of exercisesForClass) {\n        await db.insert(exercises).values({\n          ...exerciseData,\n          classTypeId: classType.id,\n          createdByUserId: userId,\n        });\n        totalExercisesCreated++;\n      }\n    }\n    \n    console.log(`Successfully seeded ${totalExercisesCreated} exercises for user: ${userId}`);\n    return totalExercisesCreated;\n  } catch (error) {\n    console.error('Error seeding exercises:', error);\n    throw error;\n  }\n}","size_bytes":46806}},"version":1}